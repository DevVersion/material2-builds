{"version":3,"file":"tab-label-wrapper.js","sourceRoot":"","sources":["../../../../src/lib/tabs/tab-label-wrapper.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,eAAe,CAAC;AACrE,OAAO,EAAC,qBAAqB,EAAC,MAAM,mCAAmC,CAAC;AAGxE;;;GAGG;AAOH,IAAa,iBAAiB;IAC5B,2BAAmB,UAAsB,EAAU,SAAmB;QAAnD,eAAU,GAAV,UAAU,CAAY;QAAU,cAAS,GAAT,SAAS,CAAU;QAEtE,0CAA0C;QAClC,cAAS,GAAY,KAAK,CAAC;IAHsC,CAAC;IAO1E,sBAAI,uCAAQ;QAFZ,uCAAuC;aAEvC,cAAiB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aACzC,UAAa,KAAU,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OADlC;IAGzC,wCAAwC;IACxC,iCAAK,GAAL;QACE,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IAC7E,CAAC;IAED,yCAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC;IAClD,CAAC;IAED,0CAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC;IACnD,CAAC;IACH,wBAAC;AAAD,CAAC,AAvBD,IAuBC;AAfC;IADC,KAAK,EAAE;;;iDACiC;AAR9B,iBAAiB;IAN7B,SAAS,CAAC;QACT,QAAQ,EAAE,iDAAiD;QAC3D,IAAI,EAAE;YACJ,0BAA0B,EAAE,UAAU;SACvC;KACF,CAAC;qCAE+B,UAAU,EAAqB,QAAQ;GAD3D,iBAAiB,CAuB7B;SAvBY,iBAAiB","sourcesContent":["import {Directive, ElementRef, Renderer, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\n\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MdTabLabelWrapper {\n  constructor(public elementRef: ElementRef, private _renderer: Renderer) {}\n\n  /** Whether the tab label is disabled.  */\n  private _disabled: boolean = false;\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this._renderer.invokeElementMethod(this.elementRef.nativeElement, 'focus');\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n"]}