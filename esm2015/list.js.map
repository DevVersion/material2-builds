{"version":3,"file":"list.js","sources":["../../packages/material/list/list.js","../../packages/material/list/selection-list.js","../../packages/material/list/list-module.js","../../packages/material/list/public-api.js","../../packages/material/list/index.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, Optional, QueryList, Renderer2, ViewEncapsulation, } from \"@angular/core\";\nimport { MatLine, MatLineSetter, mixinDisableRipple } from \"@angular/material/core\";\n/**\n * \\@docs-private\n */\nexport class MatListBase {\n}\nexport const /** @type {?} */ _MatListMixinBase = mixinDisableRipple(MatListBase);\n/**\n * \\@docs-private\n */\nexport class MatListItemBase {\n}\nexport const /** @type {?} */ _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n/**\n * Divider between items within a list.\n */\nexport class MatListDivider {\n}\nfunction MatListDivider_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatListDivider.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatListDivider.ctorParameters;\n}\n/**\n * A Material Design list component.\n */\nexport class MatList extends _MatListMixinBase {\n}\nfunction MatList_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatList.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatList.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatListCssMatStyler {\n}\nfunction MatListCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatListCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatListCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatNavListCssMatStyler {\n}\nfunction MatNavListCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatNavListCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatNavListCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatDividerCssMatStyler {\n}\nfunction MatDividerCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatDividerCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatDividerCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatListAvatarCssMatStyler {\n}\nfunction MatListAvatarCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatListAvatarCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatListAvatarCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatListIconCssMatStyler {\n}\nfunction MatListIconCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatListIconCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatListIconCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatListSubheaderCssMatStyler {\n}\nfunction MatListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatListSubheaderCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatListSubheaderCssMatStyler.ctorParameters;\n}\n/**\n * An item within a Material Design list.\n */\nexport class MatListItem extends _MatListItemMixinBase {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _list\n     * @param {?} navList\n     */\n    constructor(_renderer, _element, _list, navList) {\n        super();\n        this._renderer = _renderer;\n        this._element = _element;\n        this._list = _list;\n        this._isNavList = !!navList;\n    }\n    /**\n     * @param {?} avatar\n     * @return {?}\n     */\n    set _hasAvatar(avatar) {\n        if (avatar != null) {\n            this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n        }\n        else {\n            this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._lineSetter = new MatLineSetter(this._lines, this._renderer, this._element);\n    }\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return !this._isNavList || this.disableRipple || this._list.disableRipple;\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n    }\n    /**\n     * @return {?}\n     */\n    _handleBlur() {\n        this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n}\nfunction MatListItem_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatListItem.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatListItem.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatListItem.propDecorators;\n    /** @type {?} */\n    MatListItem.prototype._lineSetter;\n    /** @type {?} */\n    MatListItem.prototype._isNavList;\n    /** @type {?} */\n    MatListItem.prototype._lines;\n    /** @type {?} */\n    MatListItem.prototype._renderer;\n    /** @type {?} */\n    MatListItem.prototype._element;\n    /** @type {?} */\n    MatListItem.prototype._list;\n}\n//# sourceMappingURL=list.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusKeyManager } from \"@angular/cdk/a11y\";\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { SelectionModel } from \"@angular/cdk/collections\";\nimport { SPACE } from \"@angular/cdk/keycodes\";\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, QueryList, Renderer2, ViewEncapsulation, } from \"@angular/core\";\nimport { MatLine, MatLineSetter, mixinDisabled, mixinDisableRipple, mixinTabIndex, } from \"@angular/material/core\";\n/**\n * \\@docs-private\n */\nexport class MatSelectionListBase {\n}\nexport const /** @type {?} */ _MatSelectionListMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n/**\n * \\@docs-private\n */\nexport class MatListOptionBase {\n}\nexport const /** @type {?} */ _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n/**\n * Change event object emitted by MatListOption\n */\nexport class MatListOptionChange {\n}\nfunction MatListOptionChange_tsickle_Closure_declarations() {\n    /**\n     * The source MatListOption of the event.\n     * @type {?}\n     */\n    MatListOptionChange.prototype.source;\n    /**\n     * The new `selected` value of the option.\n     * @type {?}\n     */\n    MatListOptionChange.prototype.selected;\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\nexport class MatListOption extends _MatListOptionMixinBase {\n    /**\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _changeDetector\n     * @param {?} selectionList\n     */\n    constructor(_renderer, _element, _changeDetector, selectionList) {\n        super();\n        this._renderer = _renderer;\n        this._element = _element;\n        this._changeDetector = _changeDetector;\n        this.selectionList = selectionList;\n    }\n    /**\n     * Whether the option is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return (this.selectionList && this.selectionList.disabled) || this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the option is selected.\n     * @return {?}\n     */\n    get selected() { return this.selectionList.selectedOptions.isSelected(this); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        const /** @type {?} */ isSelected = coerceBooleanProperty(value);\n        if (isSelected !== this.selected) {\n            this.selectionList.selectedOptions.toggle(this);\n            this._changeDetector.markForCheck();\n            this.selectionChange.emit(this._createChangeEvent());\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.selected) {\n            this.selectionList.selectedOptions.select(this);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._lineSetter = new MatLineSetter(this._lines, this._renderer, this._element);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.selectionList._removeOptionFromList(this);\n    }\n    /**\n     * Toggles the selection state of the option.\n     * @return {?}\n     */\n    toggle() {\n        this.selected = !this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the option.\n     * @return {?}\n     */\n    focus() {\n        this._element.nativeElement.focus();\n    }\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n    }\n    /**\n     * @return {?}\n     */\n    _handleClick() {\n        if (!this.disabled) {\n            this.toggle();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        this._hasFocus = true;\n        this.selectionList._setFocusedOption(this);\n    }\n    /**\n     * Creates a selection event object from the specified option.\n     * @param {?=} option\n     * @return {?}\n     */\n    _createChangeEvent(option = this) {\n        const /** @type {?} */ event = new MatListOptionChange();\n        event.source = option;\n        event.selected = option.selected;\n        return event;\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n}\nfunction MatListOption_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatListOption.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatListOption.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatListOption.propDecorators;\n    /** @type {?} */\n    MatListOption.prototype._lineSetter;\n    /** @type {?} */\n    MatListOption.prototype._disabled;\n    /**\n     * Whether the option has focus.\n     * @type {?}\n     */\n    MatListOption.prototype._hasFocus;\n    /** @type {?} */\n    MatListOption.prototype._lines;\n    /**\n     * Whether the label should appear before or after the checkbox. Defaults to 'after'\n     * @type {?}\n     */\n    MatListOption.prototype.checkboxPosition;\n    /**\n     * Value of the option\n     * @type {?}\n     */\n    MatListOption.prototype.value;\n    /**\n     * Emitted when the option is selected or deselected.\n     * @type {?}\n     */\n    MatListOption.prototype.selectionChange;\n    /** @type {?} */\n    MatListOption.prototype._renderer;\n    /** @type {?} */\n    MatListOption.prototype._element;\n    /** @type {?} */\n    MatListOption.prototype._changeDetector;\n    /** @type {?} */\n    MatListOption.prototype.selectionList;\n}\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nexport class MatSelectionList extends _MatSelectionListMixinBase {\n    /**\n     * @param {?} _element\n     * @param {?} tabIndex\n     */\n    constructor(_element, tabIndex) {\n        super();\n        this._element = _element;\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.options).withWrap();\n    }\n    /**\n     * Focus the selection-list.\n     * @return {?}\n     */\n    focus() {\n        this._element.nativeElement.focus();\n    }\n    /**\n     * Selects all of the options.\n     * @return {?}\n     */\n    selectAll() {\n        this.options.forEach(option => {\n            if (!option.selected) {\n                option.toggle();\n            }\n        });\n    }\n    /**\n     * Deselects all of the options.\n     * @return {?}\n     */\n    deselectAll() {\n        this.options.forEach(option => {\n            if (option.selected) {\n                option.toggle();\n            }\n        });\n    }\n    /**\n     * Sets the focused option of the selection-list.\n     * @param {?} option\n     * @return {?}\n     */\n    _setFocusedOption(option) {\n        this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n    }\n    /**\n     * Removes an option from the selection list and updates the active item.\n     * @param {?} option\n     * @return {?}\n     */\n    _removeOptionFromList(option) {\n        if (option._hasFocus) {\n            const /** @type {?} */ optionIndex = this._getOptionIndex(option);\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            }\n            else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n    /**\n     * Passes relevant key presses to our key manager.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        switch (event.keyCode) {\n            case SPACE:\n                this._toggleSelectOnFocusedOption();\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Toggles the selected state of the currently focused option.\n     * @return {?}\n     */\n    _toggleSelectOnFocusedOption() {\n        let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            let /** @type {?} */ focusedOption = this.options.toArray()[focusedIndex];\n            if (focusedOption) {\n                focusedOption.toggle();\n            }\n        }\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of options.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.options.length;\n    }\n    /**\n     * Returns the index of the specified list option.\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.toArray().indexOf(option);\n    }\n}\nfunction MatSelectionList_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatSelectionList.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatSelectionList.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatSelectionList.propDecorators;\n    /**\n     * The FocusKeyManager which handles focus.\n     * @type {?}\n     */\n    MatSelectionList.prototype._keyManager;\n    /**\n     * The option components contained within this selection-list.\n     * @type {?}\n     */\n    MatSelectionList.prototype.options;\n    /**\n     * The currently selected options.\n     * @type {?}\n     */\n    MatSelectionList.prototype.selectedOptions;\n    /** @type {?} */\n    MatSelectionList.prototype._element;\n}\n//# sourceMappingURL=selection-list.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { MatCommonModule, MatLineModule, MatPseudoCheckboxModule, MatRippleModule, } from \"@angular/material/core\";\nimport { MatDividerCssMatStyler, MatList, MatListAvatarCssMatStyler, MatListCssMatStyler, MatListDivider, MatListIconCssMatStyler, MatListItem, MatListSubheaderCssMatStyler, MatNavListCssMatStyler, } from \"./list\";\nimport { MatListOption, MatSelectionList } from \"./selection-list\";\nexport class MatListModule {\n}\nfunction MatListModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatListModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatListModule.ctorParameters;\n}\n//# sourceMappingURL=list-module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatListModule } from \"./list-module\";\nexport { MatListBase, _MatListMixinBase, MatListItemBase, _MatListItemMixinBase, MatListDivider, MatList, MatListCssMatStyler, MatNavListCssMatStyler, MatDividerCssMatStyler, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatListItem } from \"./list\";\nexport { MatSelectionListBase, _MatSelectionListMixinBase, MatListOptionBase, _MatListOptionMixinBase, MatListOptionChange, MatListOption, MatSelectionList } from \"./selection-list\";\n//# sourceMappingURL=public-api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatListModule, MatListBase, _MatListMixinBase, MatListItemBase, _MatListItemMixinBase, MatListDivider, MatList, MatListCssMatStyler, MatNavListCssMatStyler, MatDividerCssMatStyler, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatListItem, MatSelectionListBase, _MatSelectionListMixinBase, MatListOptionBase, _MatListOptionMixinBase, MatListOptionChange, MatListOption, MatSelectionList } from \"./public-api\";\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}