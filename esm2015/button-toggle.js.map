{"version":3,"file":"button-toggle.js","sources":["../../packages/material/button-toggle/button-toggle.js","../../packages/material/button-toggle/button-toggle-module.js","../../packages/material/button-toggle/public-api.js","../../packages/material/button-toggle/index.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from \"@angular/cdk/a11y\";\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { UniqueSelectionDispatcher } from \"@angular/cdk/collections\";\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, QueryList, ViewChild, ViewEncapsulation, } from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { mixinDisabled } from \"@angular/material/core\";\n/**\n * \\@docs-private\n */\nexport class MatButtonToggleGroupBase {\n}\nexport const /** @type {?} */ _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const /** @type {?} */ MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nexport class MatButtonToggleChange {\n}\nfunction MatButtonToggleChange_tsickle_Closure_declarations() {\n    /**\n     * The MatButtonToggle that emits the event.\n     * @type {?}\n     */\n    MatButtonToggleChange.prototype.source;\n    /**\n     * The value assigned to the MatButtonToggle.\n     * @type {?}\n     */\n    MatButtonToggleChange.prototype.value;\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase {\n    /**\n     * @param {?} _changeDetector\n     */\n    constructor(_changeDetector) {\n        super();\n        this._changeDetector = _changeDetector;\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        this._updateButtonToggleNames();\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() {\n        return this._vertical;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (this._value != newValue) {\n            this._value = newValue;\n            this.valueChange.emit(newValue);\n            this._updateSelectedButtonToggleFromValue();\n        }\n    }\n    /**\n     * Whether the toggle group is selected.\n     * @return {?}\n     */\n    get selected() {\n        return this._selected;\n    }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        if (selected && !selected.checked) {\n            selected.checked = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _updateButtonToggleNames() {\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((toggle) => {\n                toggle.name = this._name;\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _updateSelectedButtonToggleFromValue() {\n        let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n        if (this._buttonToggles != null && !isAlreadySelected) {\n            let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(buttonToggle => buttonToggle.value == this._value)[0];\n            if (matchingButtonToggle) {\n                this.selected = matchingButtonToggle;\n            }\n            else if (this.value == null) {\n                this.selected = null;\n                this._buttonToggles.forEach(buttonToggle => {\n                    buttonToggle.checked = false;\n                });\n            }\n        }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        let /** @type {?} */ event = new MatButtonToggleChange();\n        event.source = this._selected;\n        event.value = this._value;\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback that will be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn On change callback function.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback that will be triggered when the control has been touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn On touch callback function.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the component should be disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._markButtonTogglesForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    _markButtonTogglesForCheck() {\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n        }\n    }\n}\nfunction MatButtonToggleGroup_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatButtonToggleGroup.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatButtonToggleGroup.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatButtonToggleGroup.propDecorators;\n    /**\n     * The value for the button toggle group. Should match currently selected button toggle.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._value;\n    /**\n     * The HTML name attribute applied to toggles in this group.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._name;\n    /**\n     * Whether the button toggle group should be vertical.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._vertical;\n    /**\n     * The currently selected button toggle, should match the value.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._selected;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._onTouched;\n    /**\n     * Child button toggle buttons.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype._buttonToggles;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.valueChange;\n    /**\n     * Event emitted when the group's value changes.\n     * @type {?}\n     */\n    MatButtonToggleGroup.prototype.change;\n    /** @type {?} */\n    MatButtonToggleGroup.prototype._changeDetector;\n}\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase {\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() {\n        return this._vertical;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n}\nfunction MatButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatButtonToggleGroupMultiple.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatButtonToggleGroupMultiple.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatButtonToggleGroupMultiple.propDecorators;\n    /**\n     * Whether the button toggle group should be vertical.\n     * @type {?}\n     */\n    MatButtonToggleGroupMultiple.prototype._vertical;\n}\n/**\n * Single button inside of a toggle group.\n */\nexport class MatButtonToggle {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} toggleGroupMultiple\n     * @param {?} _changeDetectorRef\n     * @param {?} _buttonToggleDispatcher\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     */\n    constructor(toggleGroup, toggleGroupMultiple, _changeDetectorRef, _buttonToggleDispatcher, _elementRef, _focusMonitor) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._buttonToggleDispatcher = _buttonToggleDispatcher;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.buttonToggleGroup = toggleGroup;\n        this.buttonToggleGroupMultiple = toggleGroupMultiple;\n        if (this.buttonToggleGroup) {\n            this._removeUniqueSelectionListener =\n                _buttonToggleDispatcher.listen((id, name) => {\n                    if (id != this.id && name == this.name) {\n                        this.checked = false;\n                        this._changeDetectorRef.markForCheck();\n                    }\n                });\n            this._type = 'radio';\n            this.name = this.buttonToggleGroup.name;\n            this._isSingleSelector = true;\n        }\n        else {\n            // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n            // toggled on or off.\n            this._type = 'checkbox';\n            this._isSingleSelector = false;\n        }\n    }\n    /**\n     * Unique ID for the underlying `input` element.\n     * @return {?}\n     */\n    get inputId() {\n        return `${this.id}-input`;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} newCheckedState\n     * @return {?}\n     */\n    set checked(newCheckedState) {\n        if (this._isSingleSelector && newCheckedState) {\n            // Notify all button toggles with the same name (in the same group) to un-check.\n            this._buttonToggleDispatcher.notify(this.id, this.name);\n            this._changeDetectorRef.markForCheck();\n        }\n        this._checked = newCheckedState;\n        if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n            this.buttonToggleGroup.selected = this;\n        }\n    }\n    /**\n     * MatButtonToggleGroup reads this to assign its own value.\n     * @return {?}\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._value != value) {\n            if (this.buttonToggleGroup != null && this.checked) {\n                this.buttonToggleGroup.value = value;\n            }\n            this._value = value;\n        }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n            (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.id == null) {\n            this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n        }\n        if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n            this._checked = true;\n        }\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    focus() {\n        this._inputElement.nativeElement.focus();\n    }\n    /**\n     * Toggle the state of the current button toggle.\n     * @return {?}\n     */\n    _toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native input.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputChange(event) {\n        event.stopPropagation();\n        if (this._isSingleSelector) {\n            // Propagate the change one-way via the group, which will in turn mark this\n            // button toggle as checked.\n            let /** @type {?} */ groupValueChanged = this.buttonToggleGroup.selected != this;\n            this.checked = true;\n            this.buttonToggleGroup.selected = this;\n            this.buttonToggleGroup._onTouched();\n            if (groupValueChanged) {\n                this.buttonToggleGroup._emitChangeEvent();\n            }\n        }\n        else {\n            this._toggle();\n        }\n        // Emit a change event when the native input does.\n        this._emitChangeEvent();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Dispatch change event with current value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        let /** @type {?} */ event = new MatButtonToggleChange();\n        event.source = this;\n        event.value = this._value;\n        this.change.emit(event);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeUniqueSelectionListener();\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update button toggle's status\n        this._changeDetectorRef.markForCheck();\n    }\n}\nfunction MatButtonToggle_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatButtonToggle.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatButtonToggle.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatButtonToggle.propDecorators;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.ariaLabel;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     * @type {?}\n     */\n    MatButtonToggle.prototype.ariaLabelledby;\n    /**\n     * Whether or not this button toggle is checked.\n     * @type {?}\n     */\n    MatButtonToggle.prototype._checked;\n    /**\n     * Type of the button toggle. Either 'radio' or 'checkbox'.\n     * @type {?}\n     */\n    MatButtonToggle.prototype._type;\n    /**\n     * Whether or not this button toggle is disabled.\n     * @type {?}\n     */\n    MatButtonToggle.prototype._disabled;\n    /**\n     * Value assigned to this button toggle.\n     * @type {?}\n     */\n    MatButtonToggle.prototype._value;\n    /**\n     * Whether or not the button toggle is a single selection.\n     * @type {?}\n     */\n    MatButtonToggle.prototype._isSingleSelector;\n    /**\n     * Unregister function for _buttonToggleDispatcher *\n     * @type {?}\n     */\n    MatButtonToggle.prototype._removeUniqueSelectionListener;\n    /** @type {?} */\n    MatButtonToggle.prototype._inputElement;\n    /**\n     * The parent button toggle group (exclusive selection). Optional.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.buttonToggleGroup;\n    /**\n     * The parent button toggle group (multiple selection). Optional.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.buttonToggleGroupMultiple;\n    /**\n     * The unique ID for this button toggle.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.id;\n    /**\n     * HTML's 'name' attribute used to group radios for unique selection.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.name;\n    /**\n     * Event emitted when the group value changes.\n     * @type {?}\n     */\n    MatButtonToggle.prototype.change;\n    /** @type {?} */\n    MatButtonToggle.prototype._changeDetectorRef;\n    /** @type {?} */\n    MatButtonToggle.prototype._buttonToggleDispatcher;\n    /** @type {?} */\n    MatButtonToggle.prototype._elementRef;\n    /** @type {?} */\n    MatButtonToggle.prototype._focusMonitor;\n}\n//# sourceMappingURL=button-toggle.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule } from \"@angular/core\";\nimport { MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle } from \"./button-toggle\";\nimport { MatCommonModule } from \"@angular/material/core\";\nimport { UNIQUE_SELECTION_DISPATCHER_PROVIDER } from \"@angular/cdk/collections\";\nimport { A11yModule } from \"@angular/cdk/a11y\";\nexport class MatButtonToggleModule {\n}\nfunction MatButtonToggleModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatButtonToggleModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatButtonToggleModule.ctorParameters;\n}\n//# sourceMappingURL=button-toggle-module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatButtonToggleGroupBase, _MatButtonToggleGroupMixinBase, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle } from \"./button-toggle\";\nexport { MatButtonToggleModule } from \"./button-toggle-module\";\n//# sourceMappingURL=public-api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatButtonToggleGroupBase, _MatButtonToggleGroupMixinBase, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle, MatButtonToggleModule } from \"./public-api\";\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}