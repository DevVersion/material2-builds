{"version":3,"file":"table.js","sources":["../../packages/material/table/table.js","../../packages/material/table/cell.js","../../packages/material/table/row.js","../../packages/material/table/table-module.js","../../packages/material/table/table-data-source.js","../../packages/material/table/public-api.js","../../packages/material/table/index.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation } from \"@angular/core\";\nimport { CDK_TABLE_TEMPLATE, CdkTable } from \"@angular/cdk/table\";\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const /** @type {?} */ _MatTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport class MatTable extends _MatTable {\n}\nfunction MatTable_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatTable.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatTable.ctorParameters;\n}\n//# sourceMappingURL=table.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Input, Renderer2 } from \"@angular/core\";\nimport { CdkCell, CdkCellDef, CdkColumnDef, CdkHeaderCell, CdkHeaderCellDef, } from \"@angular/cdk/table\";\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const /** @type {?} */ _MatCellDef = CdkCellDef;\nexport const /** @type {?} */ _MatHeaderCellDef = CdkHeaderCellDef;\nexport const /** @type {?} */ _MatColumnDef = CdkColumnDef;\nexport const /** @type {?} */ _MatHeaderCell = CdkHeaderCell;\nexport const /** @type {?} */ _MatCell = CdkCell;\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class MatCellDef extends _MatCellDef {\n}\nfunction MatCellDef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatCellDef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatCellDef.ctorParameters;\n}\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class MatHeaderCellDef extends _MatHeaderCellDef {\n}\nfunction MatHeaderCellDef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatHeaderCellDef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatHeaderCellDef.ctorParameters;\n}\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nexport class MatColumnDef extends _MatColumnDef {\n}\nfunction MatColumnDef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatColumnDef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatColumnDef.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatColumnDef.propDecorators;\n    /**\n     * Unique name for this column.\n     * @type {?}\n     */\n    MatColumnDef.prototype.name;\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MatHeaderCell extends _MatHeaderCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    constructor(columnDef, elementRef, renderer) {\n        super(columnDef, elementRef, renderer);\n        renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nfunction MatHeaderCell_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatHeaderCell.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatHeaderCell.ctorParameters;\n}\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MatCell extends _MatCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    constructor(columnDef, elementRef, renderer) {\n        super(columnDef, elementRef, renderer);\n        renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nfunction MatCell_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatCell.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatCell.ctorParameters;\n}\n//# sourceMappingURL=cell.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, Directive, ViewEncapsulation } from \"@angular/core\";\nimport { CDK_ROW_TEMPLATE, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, } from \"@angular/cdk/table\";\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const /** @type {?} */ _MatHeaderRowDef = CdkHeaderRowDef;\nexport const /** @type {?} */ _MatCdkRowDef = CdkRowDef;\nexport const /** @type {?} */ _MatHeaderRow = CdkHeaderRow;\nexport const /** @type {?} */ _MatRow = CdkRow;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class MatHeaderRowDef extends _MatHeaderRowDef {\n}\nfunction MatHeaderRowDef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatHeaderRowDef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatHeaderRowDef.ctorParameters;\n}\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nexport class MatRowDef extends _MatCdkRowDef {\n}\nfunction MatRowDef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatRowDef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatRowDef.ctorParameters;\n}\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MatHeaderRow extends _MatHeaderRow {\n}\nfunction MatHeaderRow_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatHeaderRow.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatHeaderRow.ctorParameters;\n}\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MatRow extends _MatRow {\n}\nfunction MatRow_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatRow.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatRow.ctorParameters;\n}\n//# sourceMappingURL=row.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule } from \"@angular/core\";\nimport { MatTable } from \"./table\";\nimport { CdkTableModule } from \"@angular/cdk/table\";\nimport { MatCell, MatHeaderCell, MatCellDef, MatHeaderCellDef, MatColumnDef } from \"./cell\";\nimport { MatHeaderRow, MatRow, MatHeaderRowDef, MatRowDef } from \"./row\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatCommonModule } from \"@angular/material/core\";\nexport class MatTableModule {\n}\nfunction MatTableModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatTableModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatTableModule.ctorParameters;\n}\n//# sourceMappingURL=table-module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\nimport { combineLatest } from \"rxjs/operators/combineLatest\";\nimport { map } from \"rxjs/operators/map\";\nimport { startWith } from \"rxjs/operators/startWith\";\nimport { empty } from \"rxjs/observable/empty\";\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource {\n    /**\n     * @param {?=} initialData\n     */\n    constructor(initialData = []) {\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     * @param {?} data\n     * @return {?}\n     */\n    set data(data) { this._data.next(data); }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     * @param {?} filter\n     * @return {?}\n     */\n    set filter(filter) { this._filter.next(filter); }\n    /**\n     * @return {?}\n     */\n    get filter() { return this._filter.value; }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     * @param {?} sort\n     * @return {?}\n     */\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * @return {?}\n     */\n    get sort() { return this._sort; }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     * @param {?} paginator\n     * @return {?}\n     */\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * @return {?}\n     */\n    get paginator() { return this._paginator; }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // Otherwise, use an empty observable stream to take their place.\n        const /** @type {?} */ sortChange = this._sort ? this._sort.sortChange : empty();\n        const /** @type {?} */ pageChange = this._paginator ? this._paginator.page : empty();\n        if (this._renderChangesSubscription) {\n            this._renderChangesSubscription.unsubscribe();\n        }\n        // Watch for base data or filter changes to provide a filtered set of data.\n        this._renderChangesSubscription = this._data.pipe(combineLatest(this._filter), map(([data]) => this._filterData(data)), \n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        combineLatest(sortChange.pipe(startWith(/** @type {?} */ ((null))))), map(([data]) => this._orderData(data)), \n        // Watch for ordered data or page changes to provide a paged set of data.\n        combineLatest(pageChange.pipe(startWith(/** @type {?} */ ((null))))), map(([data]) => this._pageData(data)))\n            .subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overriden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort || !this.sort.active || this.sort.direction == '') {\n            return data;\n        }\n        const /** @type {?} */ active = this.sort.active;\n        const /** @type {?} */ direction = this.sort.direction;\n        return data.slice().sort((a, b) => {\n            let /** @type {?} */ valueA = this.sortingDataAccessor(a, active);\n            let /** @type {?} */ valueB = this.sortingDataAccessor(b, active);\n            return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n        });\n    }\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const /** @type {?} */ startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice().splice(startIndex, this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            if (!this.paginator) {\n                return;\n            }\n            this.paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (this.paginator.pageIndex > 0) {\n                const /** @type {?} */ lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n                this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    connect() { return this._renderData; }\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    disconnect() { }\n}\nfunction MatTableDataSource_tsickle_Closure_declarations() {\n    /**\n     * Stream that emits when a new data array is set on the data source.\n     * @type {?}\n     */\n    MatTableDataSource.prototype._data;\n    /**\n     * Stream emitting render data to the table (depends on ordered data changes).\n     * @type {?}\n     */\n    MatTableDataSource.prototype._renderData;\n    /**\n     * Stream that emits when a new filter string is set on the data source.\n     * @type {?}\n     */\n    MatTableDataSource.prototype._filter;\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     * @type {?}\n     */\n    MatTableDataSource.prototype._renderChangesSubscription;\n    /**\n     * The filtered set of data that has been matched by the filter string, or all the data if there\n     * is no filter. Useful for knowing the set of data the table represents.\n     * For example, a 'selectAll()' function would likely want to select the set of filtered data\n     * shown to the user rather than all the data.\n     * @type {?}\n     */\n    MatTableDataSource.prototype.filteredData;\n    /** @type {?} */\n    MatTableDataSource.prototype._sort;\n    /** @type {?} */\n    MatTableDataSource.prototype._paginator;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * \\@param data Data object that is being accessed.\n     * \\@param sortHeaderId The name of the column that represents the data.\n     * @type {?}\n     */\n    MatTableDataSource.prototype.sortingDataAccessor;\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n     * filter matching.\n     * \\@param data Data object used to check against the filter.\n     * \\@param filter Filter string that has been set on the data source.\n     * \\@return Whether the filter matches against the data\n     * @type {?}\n     */\n    MatTableDataSource.prototype.filterPredicate;\n}\n//# sourceMappingURL=table-data-source.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatTableModule } from \"./table-module\";\nexport { _MatCellDef, _MatHeaderCellDef, _MatColumnDef, _MatHeaderCell, _MatCell, MatCellDef, MatHeaderCellDef, MatColumnDef, MatHeaderCell, MatCell } from \"./cell\";\nexport { _MatTable, MatTable } from \"./table\";\nexport { _MatHeaderRowDef, _MatCdkRowDef, _MatHeaderRow, _MatRow, MatHeaderRowDef, MatRowDef, MatHeaderRow, MatRow } from \"./row\";\nexport { MatTableDataSource } from \"./table-data-source\";\n//# sourceMappingURL=public-api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatTableModule, _MatCellDef, _MatHeaderCellDef, _MatColumnDef, _MatHeaderCell, _MatCell, MatCellDef, MatHeaderCellDef, MatColumnDef, MatHeaderCell, MatCell, _MatTable, MatTable, _MatHeaderRowDef, _MatCdkRowDef, _MatHeaderRow, _MatRow, MatHeaderRowDef, MatRowDef, MatHeaderRow, MatRow, MatTableDataSource } from \"./public-api\";\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}