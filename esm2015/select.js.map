{"version":3,"file":"select.js","sources":["../../../src/lib/select/index.ts","../../../src/lib/select/select-module.ts","../../../src/lib/select/select.ts","../../../src/lib/select/select-errors.ts","../../../src/lib/select/select-animations.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatSelectModule,SELECT_PANEL_MAX_HEIGHT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_ITEM_HEIGHT_EM,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_VIEWPORT_PADDING,MAT_SELECT_SCROLL_STRATEGY,MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_SELECT_SCROLL_STRATEGY_PROVIDER,MatSelectChange,MatSelectBase,_MatSelectMixinBase,MatSelectTrigger,MatSelect,transformPanel,fadeInContent} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nexport class MatSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSelectModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedOverlayDirective,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter, first, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanDisable,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fadeInContent, transformPanel} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MatSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MatSelect,\npublic value: any) { }\n}\n\nfunction MatSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelectChange.prototype.source;\n/** @type {?} */\nMatSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelectBase.prototype._renderer;\n/** @type {?} */\nMatSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatSelectMixinBase = mixinTabIndex(mixinDisabled(MatSelectBase));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport class MatSelectTrigger {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-select-trigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSelectTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelectTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSelectTrigger.ctorParameters;\n}\n\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanDisable, HasTabIndex, MatFormFieldControl<any> {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription = Subscription.EMPTY;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * Unique id for this input.\n */\nprivate _uid = `mat-select-${nextUniqueId++}`;\n/**\n * The last measured value for the trigger's client bounding rect.\n */\n_triggerRect: ClientRect;\n/**\n * The aria-describedby attribute on the select for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * The cached font-size of the trigger element.\n */\n_triggerFontSize = 0;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MatOption>;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager<MatOption>;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Stream that emits whenever the state of the select changes such that the wrapping\n * `MatFormField` needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * Whether the select is focused.\n */\nfocused = false;\n/**\n * A name for this control that can be used by `mat-form-field`.\n */\ncontrolType = 'mat-select';\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MatOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MatOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * User-supplied override of the trigger element.\n */\ncustomTrigger: MatSelectTrigger;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\n * is a value from an option. The second is a value from the selection. A boolean\n * should be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setOptionDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string;\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\nprivate _id: string;\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MatOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _ngZone\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} _parentFormField\n * @param {?} ngControl\n * @param {?} tabIndex\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _ngZone: NgZone,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\nprivate _parentFormField: MatFormField,\npublic ngControl: NgControl,\n     tabIndex: string,\nprivate _scrollStrategyFactory) {\n\n    super(renderer, elementRef);\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n    this._changeSubscription.unsubscribe();\n    this._tabSubscription.unsubscribe();\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._calculateOverlayPosition();\n    this._panelOpen = true;\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    first.call(this._ngZone.onStable).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (!this._selectionModel || this._selectionModel.isEmpty()) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this.focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Returns the theme to be used on the panel.\n * @return {?}\n */\n_getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\nget empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMatSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const /** @type {?} */ correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch ( /** @type {?} */error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MatOption>(this.options).withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n    this._setOptionDisableRipple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MatOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    this._optionSubscription.unsubscribe();\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this._onChange(valueToEmit);\n    this.change.emit(new MatSelectChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\n    if (this.options) {\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\n    }\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let /** @type {?} */ selectedOptionOffset =\n        this.empty ? 0 : /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const /** @type {?} */ scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    const /** @type {?} */ optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    const /** @type {?} */ optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const /** @type {?} */ maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let /** @type {?} */ partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    const /** @type {?} */ topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const /** @type {?} */ distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const /** @type {?} */ distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    const /** @type {?} */ optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const /** @type {?} */ originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MatOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nonContainerClick() {\n    this.focus();\n    this.open();\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat() { return this._panelOpen || !this.empty; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPanel,\n    fadeInContent\n  ],\n  providers: [{provide: MatFormFieldControl, useExisting: MatSelect}],\n  exportAs: 'matSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: MatFormField, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MatOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MatOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'customTrigger': [{ type: ContentChild, args: [MatSelectTrigger, ] },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MatSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSelect.ctorParameters;\n/** @type {?} */\nMatSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMatSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMatSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMatSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMatSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMatSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMatSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMatSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMatSelect.prototype._multiple;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMatSelect.prototype._compareWith;\n/**\n * Unique id for this input.\n * @type {?}\n */\nMatSelect.prototype._uid;\n/**\n * The last measured value for the trigger's client bounding rect.\n * @type {?}\n */\nMatSelect.prototype._triggerRect;\n/**\n * The aria-describedby attribute on the select for improved a11y.\n * @type {?}\n */\nMatSelect.prototype._ariaDescribedby;\n/**\n * The cached font-size of the trigger element.\n * @type {?}\n */\nMatSelect.prototype._triggerFontSize;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMatSelect.prototype._selectionModel;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMatSelect.prototype._keyManager;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMatSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMatSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMatSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMatSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMatSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMatSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMatSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMatSelect.prototype._positions;\n/**\n * Stream that emits whenever the state of the select changes such that the wrapping\n * `MatFormField` needs to run change detection.\n * @type {?}\n */\nMatSelect.prototype.stateChanges;\n/**\n * Whether the select is focused.\n * @type {?}\n */\nMatSelect.prototype.focused;\n/**\n * A name for this control that can be used by `mat-form-field`.\n * @type {?}\n */\nMatSelect.prototype.controlType;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMatSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMatSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMatSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMatSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMatSelect.prototype.panelClass;\n/**\n * User-supplied override of the trigger element.\n * @type {?}\n */\nMatSelect.prototype.customTrigger;\n/** @type {?} */\nMatSelect.prototype._value;\n/** @type {?} */\nMatSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMatSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMatSelect.prototype.ariaLabelledby;\n/** @type {?} */\nMatSelect.prototype._id;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMatSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMatSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMatSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMatSelect.prototype.valueChange;\n/** @type {?} */\nMatSelect.prototype._viewportRuler;\n/** @type {?} */\nMatSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMatSelect.prototype._ngZone;\n/** @type {?} */\nMatSelect.prototype._dir;\n/** @type {?} */\nMatSelect.prototype._parentForm;\n/** @type {?} */\nMatSelect.prototype._parentFormGroup;\n/** @type {?} */\nMatSelect.prototype._parentFormField;\n/** @type {?} */\nMatSelect.prototype.ngControl;\n/** @type {?} */\nMatSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('Cannot assign a non-function value to `compareWith`.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n"],"names":[],"mappings":"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"}