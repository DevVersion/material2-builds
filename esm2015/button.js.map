{"version":3,"file":"button.js","sources":["../../packages/material/button/button.js","../../packages/material/button/button-module.js","../../packages/material/button/public-api.js","../../packages/material/button/index.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from \"@angular/cdk/a11y\";\nimport { Platform } from \"@angular/cdk/platform\";\nimport { ChangeDetectionStrategy, Component, Directive, ElementRef, forwardRef, Inject, Optional, Renderer2, Self, ViewEncapsulation, } from \"@angular/core\";\nimport { mixinColor, mixinDisabled, mixinDisableRipple } from \"@angular/material/core\";\n/**\n * Default color palette for round buttons (mat-fab and mat-mini-fab)\n */\nconst /** @type {?} */ DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatButtonCssMatStyler {\n}\nfunction MatButtonCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatButtonCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatButtonCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatRaisedButtonCssMatStyler {\n}\nfunction MatRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatRaisedButtonCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatRaisedButtonCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatIconButtonCssMatStyler {\n}\nfunction MatIconButtonCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatIconButtonCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatIconButtonCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatFab {\n    /**\n     * @param {?} button\n     * @param {?} anchor\n     */\n    constructor(button, anchor) {\n        // Set the default color palette for the mat-fab components.\n        (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n}\nfunction MatFab_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatFab.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatFab.ctorParameters;\n}\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MatMiniFab {\n    /**\n     * @param {?} button\n     * @param {?} anchor\n     */\n    constructor(button, anchor) {\n        // Set the default color palette for the mat-mini-fab components.\n        (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n}\nfunction MatMiniFab_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatMiniFab.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatMiniFab.ctorParameters;\n}\n/**\n * \\@docs-private\n */\nexport class MatButtonBase {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n}\nfunction MatButtonBase_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatButtonBase.prototype._renderer;\n    /** @type {?} */\n    MatButtonBase.prototype._elementRef;\n}\nexport const /** @type {?} */ _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n/**\n * Material design button.\n */\nexport class MatButton extends _MatButtonMixinBase {\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} _platform\n     * @param {?} _focusMonitor\n     */\n    constructor(renderer, elementRef, _platform, _focusMonitor) {\n        super(renderer, elementRef);\n        this._platform = _platform;\n        this._focusMonitor = _focusMonitor;\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    focus() {\n        this._getHostElement().focus();\n    }\n    /**\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Gets whether the button has one of the given attributes.\n     * @param {...?} attributes\n     * @return {?}\n     */\n    _hasHostAttributes(...attributes) {\n        // If not on the browser, say that there are none of the attributes present.\n        // Since these only affect how the ripple displays (and ripples only happen on the client),\n        // detecting these attributes isn't necessary when not on the browser.\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n    }\n}\nfunction MatButton_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatButton.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatButton.ctorParameters;\n    /**\n     * Whether the button is round.\n     * @type {?}\n     */\n    MatButton.prototype._isRoundButton;\n    /**\n     * Whether the button is icon button.\n     * @type {?}\n     */\n    MatButton.prototype._isIconButton;\n    /** @type {?} */\n    MatButton.prototype._platform;\n    /** @type {?} */\n    MatButton.prototype._focusMonitor;\n}\n/**\n * Raised Material design button.\n */\nexport class MatAnchor extends MatButton {\n    /**\n     * @param {?} platform\n     * @param {?} focusMonitor\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    constructor(platform, focusMonitor, elementRef, renderer) {\n        super(renderer, elementRef, platform, focusMonitor);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _haltDisabledEvents(event) {\n        // A disabled button shouldn't apply any actions\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\nfunction MatAnchor_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatAnchor.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatAnchor.ctorParameters;\n}\n//# sourceMappingURL=button.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatCommonModule, MatRippleModule } from \"@angular/material/core\";\nimport { A11yModule } from \"@angular/cdk/a11y\";\nimport { MatAnchor, MatButton, MatMiniFab, MatButtonCssMatStyler, MatFab, MatIconButtonCssMatStyler, MatRaisedButtonCssMatStyler } from \"./button\";\nexport class MatButtonModule {\n}\nfunction MatButtonModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatButtonModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatButtonModule.ctorParameters;\n}\n//# sourceMappingURL=button-module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatButtonModule } from \"./button-module\";\nexport { MatButtonCssMatStyler, MatRaisedButtonCssMatStyler, MatIconButtonCssMatStyler, MatFab, MatMiniFab, MatButtonBase, _MatButtonMixinBase, MatButton, MatAnchor } from \"./button\";\n//# sourceMappingURL=public-api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatButtonModule, MatButtonCssMatStyler, MatRaisedButtonCssMatStyler, MatIconButtonCssMatStyler, MatFab, MatMiniFab, MatButtonBase, _MatButtonMixinBase, MatButton, MatAnchor } from \"./public-api\";\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}