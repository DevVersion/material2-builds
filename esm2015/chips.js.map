{"version":3,"file":"chips.js","sources":["../../../src/lib/chips/index.ts","../../../src/lib/chips/public_api.ts","../../../src/lib/chips/chip-input.ts","../../../src/lib/chips/chip-list.ts","../../../src/lib/chips/chip.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdChipsModule,MdChipList,MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove,MdChipInputEvent,MdChipInput} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdBasicChip, MdChip, MdChipRemove} from './chip';\nimport {MdChipInput} from './chip-input';\n\nexport {MdChipList} from './chip-list';\nexport {MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove} from './chip';\nexport {MdChipInputEvent,MdChipInput} from './chip-input';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdChipInput, MdChipRemove, MdChipRemove, MdBasicChip],\n  declarations: [MdChipList, MdChip, MdChipInput, MdChipRemove,  MdChipRemove, MdBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Output, EventEmitter, ElementRef, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/material/core';\nimport {MdChipList} from './chip-list';\n\nexport interface MdChipInputEvent {\n  input: HTMLInputElement;\n  value: string;\n}\nexport class MdChipInput {\n\n  _chipList: MdChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MdChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this._inputElement);\n    }\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MdChipInputEvent>();\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MdChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdChipInputFor], input[matChipInputFor]',\n  host: {\n    'class': 'mat-chip-input',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['mdChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['mdChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['mdChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['mdChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/** @type {?} */\nMdChipInput.prototype._chipList;\n/** @type {?} */\nMdChipInput.prototype._addOnBlur;\n/** @type {?} */\nMdChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipEnd;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  OnDestroy,\n  Optional,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {BACKSPACE, DELETE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport class MdChipList implements AfterContentInit, OnDestroy {\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _lastDestroyedIndex: number|null = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _chipSet: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription = Subscription.EMPTY;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n\n  protected _inputElement: HTMLInputElement;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n */\n_userTabIndex: number | null = null;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdChip>;\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * Orientation of the chip list.\n */\nariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(protected _renderer: Renderer2, protected _elementRef: ElementRef,\nprivate _dir: Directionality) {\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MdChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // Make sure we set our tab index at the start\n    this._updateTabIndex();\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n\n      // If we have 0 chips, attempt to focus an input (if available)\n      if (chips.length === 0) {\n        this._focusInput();\n      }\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n  }\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * it's selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n/**\n * Associates an HTML input element with this chip list.\n * @param {?} inputElement\n * @return {?}\n */\nregisterInput(inputElement: HTMLInputElement) {\n    this._inputElement = inputElement;\n  }\n/**\n * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n * are no eligible chips.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._focusInput();\n    }\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\n_focusInput() {\n    if (this._inputElement) {\n      this._inputElement.focus();\n    }\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ code = event.keyCode;\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n    let /** @type {?} */ isInputEmpty = this._isInputEmpty(target);\n    let /** @type {?} */ isRtl = this._dir && this._dir.value == 'rtl';\n\n    let /** @type {?} */ isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let /** @type {?} */ isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let /** @type {?} */ isBackKey = (code === BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._chipSet.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip._onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and setup our destroyed focus check\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n      if (this._isValidIndex(chipIndex)) {\n        if (chip._hasFocus) {\n          // Check whether the chip is the last item\n          if (chipIndex < this.chips.length - 1) {\n            this._keyManager.setActiveItem(chipIndex);\n          } else if (chipIndex - 1 >= 0) {\n            this._keyManager.setActiveItem(chipIndex - 1);\n          }\n        }\n        if (this._keyManager.activeItemIndex === chipIndex) {\n          this._lastDestroyedIndex = chipIndex;\n        }\n\n      }\n\n      this._chipSet.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._chipSet.set(chip, true);\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n * one.\n * @return {?}\n */\nprotected _updateFocusForDestroyedChips() {\n    let /** @type {?} */ chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let /** @type {?} */ focusChip = this._keyManager.activeItem;\n\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\n\n      return !input.value;\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'mdChipList, matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    'role': 'listbox',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaOrientation': [{ type: Input, args: ['aria-orientation', ] },],\n'selectable': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMdChipList.prototype._lastDestroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._chipSet;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/** @type {?} */\nMdChipList.prototype._inputElement;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n * @type {?}\n */\nMdChipList.prototype._userTabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/**\n * Orientation of the chip list.\n * @type {?}\n */\nMdChipList.prototype.ariaOrientation;\n/** @type {?} */\nMdChipList.prototype._renderer;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n/** @type {?} */\nMdChipList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport {\n  BACKSPACE,\n  CanColor,\n  CanDisable,\n  DELETE,\n  mixinColor,\n  mixinDisabled,\n  SPACE,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n  CanDisable {\n\n   _chipRemove: MdChipRemove;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    (this.selected ? this.select : this.deselect).emit({chip: this});\n  }\n  protected _selected: boolean = false;\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\n * changes to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean {\n    return this._removable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Emits when the chip is focused.\n */\n_onFocus = new Subject<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * @return {?}\n */\nget ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n/**\n * Emitted when a chip is to be removed.\n */\nonRemove = new EventEmitter<MdChipEvent>();\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?}\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\n * BACKSPACE keys are pressed.\n * \n * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\n    if (this.removable) {\n      this.onRemove.emit({chip: this});\n    }\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected();\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'mdChip, matChip',\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_hasFocus = false',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_chipRemove': [{ type: ContentChild, args: [forwardRef(() => MdChipRemove), ] },],\n'selected': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._chipRemove;\n/** @type {?} */\nMdChip.prototype._selected;\n/** @type {?} */\nMdChip.prototype._selectable;\n/** @type {?} */\nMdChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emits when the chip is focused.\n * @type {?}\n */\nMdChip.prototype._onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n * \n * Example:\n * \n *     <md-chip>\n *       <md-icon mdChipRemove>cancel</md-icon>\n *     </md-chip>\n * \n * You *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\n * to properly center the icon within the chip.\n */\nexport class MdChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MdChip) {}\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick() {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdChipRemove], [matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}