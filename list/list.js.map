{"version":3,"file":"list.js","sourceRoot":"","sources":["../../../../src/lib/list/list.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  ContentChildren,\n  ContentChild,\n  QueryList,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  OpaqueToken,\n  Optional,\n  Renderer,\n  AfterContentInit,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\n\n@Directive({\n  selector: 'md-divider, mat-divider'\n})\nexport class MdListDivider {}\n\n/**\n * Token used to inject the list type into child MdListItem components so they can know whether\n * they're in a nav list (and thus should use an MdRipple).\n */\nexport const LIST_TYPE_TOKEN = new OpaqueToken('list_type');\n\nconst NORMAL_LIST_TYPE = 'normal_list_type';\nconst NAV_LIST_TYPE = 'nav_list_type';\n\n@Component({\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {\n    'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  providers: [{ provide: LIST_TYPE_TOKEN, useValue: NORMAL_LIST_TYPE }],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MdList {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'md-list, mat-list',\n  host: {\n    '[class.mat-list]': 'true'\n  }\n})\nexport class MdListCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'md-nav-list, mat-nav-list',\n  host: {\n    '[class.mat-nav-list]': 'true'\n  }\n})\nexport class MdNavListCssMatStyler {}\n\n/**\n * Directive to set the ListType token to NAV_LIST_TYPE.\n */\n@Directive({\n  selector: 'md-nav-list, mat-nav-list',\n  providers: [{ provide: LIST_TYPE_TOKEN, useValue: NAV_LIST_TYPE }],\n})\nexport class MdNavListTokenSetter {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'md-divider, mat-divider',\n  host: {\n    '[class.mat-divider]': 'true'\n  }\n})\nexport class MdDividerCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[md-list-avatar], [mat-list-avatar]',\n  host: {\n    '[class.mat-list-avatar]': 'true'\n  }\n})\nexport class MdListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[md-list-icon], [mat-list-icon]',\n  host: {\n    '[class.mat-list-icon]': 'true'\n  }\n})\nexport class MdListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[md-subheader], [mat-subheader]',\n  host: {\n    '[class.mat-subheader]': 'true'\n  }\n})\nexport class MdListSubheaderCssMatStyler {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '[class.mat-list-item]': 'true',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class MdListItem implements AfterContentInit {\n  /**\n   * Whether the ripple effect on click should be disabled. This applies only to list items that\n   * are children of an md-nav-list; md-list items never have ripples.\n   */\n  @Input() disableRipple: boolean = false;\n  _hasFocus: boolean = false;\n\n  private _lineSetter: MdLineSetter;\n\n  @ContentChildren(MdLine) _lines: QueryList<MdLine>;\n\n  @ContentChild(MdListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    this._renderer.setElementClass(\n        this._element.nativeElement, 'mat-list-item-avatar', avatar != null);\n  }\n\n  constructor(private _renderer: Renderer, private _element: ElementRef,\n      @Optional() @Inject(LIST_TYPE_TOKEN) private _listType: string) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  isRippleEnabled() {\n    return !this.disableRipple && (this._listType === NAV_LIST_TYPE);\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n  }\n}\n"]}