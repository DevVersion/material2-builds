{"version":3,"file":"expansion.es5.js","sources":["../../packages/material/esm5/expansion/accordion.js","../../packages/material/esm5/expansion/expansion-panel.js","../../packages/material/esm5/expansion/expansion-panel-header.js","../../packages/material/esm5/expansion/expansion-module.js","../../packages/material/esm5/expansion/public-api.js","../../packages/material/esm5/expansion/index.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input } from \"@angular/core\";\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { CdkAccordion } from \"@angular/cdk/accordion\";\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport var /** @type {?} */ _CdkAccordion = CdkAccordion;\n/**\n * Directive for a Material Design Accordion.\n */\nvar /**\n * Directive for a Material Design Accordion.\n */\nMatAccordion = /** @class */ (function (_super) {\n    tslib_1.__extends(MatAccordion, _super);\n    function MatAccordion() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(MatAccordion.prototype, \"hideToggle\", {\n        get: /**\n         * Whether the expansion indicator should be hidden.\n         * @return {?}\n         */\n        function () { return this._hideToggle; },\n        set: /**\n         * @param {?} show\n         * @return {?}\n         */\n        function (show) { this._hideToggle = coerceBooleanProperty(show); },\n        enumerable: true,\n        configurable: true\n    });\n    return MatAccordion;\n}(_CdkAccordion));\n/**\n * Directive for a Material Design Accordion.\n */\nexport { MatAccordion };\nfunction MatAccordion_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatAccordion.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatAccordion.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatAccordion.propDecorators;\n    /** @type {?} */\n    MatAccordion.prototype._hideToggle;\n    /**\n     * The display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the reset of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     * @type {?}\n     */\n    MatAccordion.prototype.displayMode;\n}\n//# sourceMappingURL=accordion.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from \"@angular/animations\";\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, forwardRef, Host, Input, Optional, ViewEncapsulation, } from \"@angular/core\";\nimport { CdkAccordionItem } from \"@angular/cdk/accordion\";\nimport { UniqueSelectionDispatcher } from \"@angular/cdk/collections\";\nimport { mixinDisabled } from \"@angular/material/core\";\nimport { Subject } from \"rxjs/Subject\";\nimport { MatAccordion } from \"./accordion\";\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport var /** @type {?} */ _CdkAccordionItem = CdkAccordionItem;\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport var /** @type {?} */ EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * \\@docs-private\n */\nvar /**\n * \\@docs-private\n */\nMatExpansionPanelBase = /** @class */ (function (_super) {\n    tslib_1.__extends(MatExpansionPanelBase, _super);\n    function MatExpansionPanelBase(accordion, _changeDetectorRef, _uniqueSelectionDispatcher) {\n        return _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;\n    }\n    return MatExpansionPanelBase;\n}(_CdkAccordionItem));\n/**\n * \\@docs-private\n */\nexport { MatExpansionPanelBase };\nfunction MatExpansionPanelBase_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanelBase.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanelBase.ctorParameters;\n}\nexport var /** @type {?} */ _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\nvar /**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\nMatExpansionPanel = /** @class */ (function (_super) {\n    tslib_1.__extends(MatExpansionPanel, _super);\n    function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher) {\n        var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;\n        _this.accordion = accordion;\n        return _this;\n    }\n    Object.defineProperty(MatExpansionPanel.prototype, \"hideToggle\", {\n        get: /**\n         * Whether the toggle indicator should be hidden.\n         * @return {?}\n         */\n        function () {\n            return this._hideToggle;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._hideToggle = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Whether the expansion indicator should be hidden. */\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._getHideToggle = /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    function () {\n        if (this.accordion) {\n            return this.accordion.hideToggle;\n        }\n        return this.hideToggle;\n    };\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._hasSpacing = /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    function () {\n        if (this.accordion) {\n            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n        }\n        return false;\n    };\n    /** Gets the expanded state string. */\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._getExpandedState = /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    function () {\n        return this.expanded ? 'expanded' : 'collapsed';\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._inputChanges.next(changes);\n    };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._inputChanges.complete();\n    };\n    return MatExpansionPanel;\n}(_MatExpansionPanelMixinBase));\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\nexport { MatExpansionPanel };\nfunction MatExpansionPanel_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanel.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanel.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatExpansionPanel.propDecorators;\n    /** @type {?} */\n    MatExpansionPanel.prototype._hideToggle;\n    /**\n     * Stream that emits for changes in `\\@Input` properties.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype._inputChanges;\n    /**\n     * Optionally defined accordion the expansion panel belongs to.\n     * @type {?}\n     */\n    MatExpansionPanel.prototype.accordion;\n}\nvar MatExpansionPanelActionRow = /** @class */ (function () {\n    function MatExpansionPanelActionRow() {\n    }\n    return MatExpansionPanelActionRow;\n}());\nexport { MatExpansionPanelActionRow };\nfunction MatExpansionPanelActionRow_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanelActionRow.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanelActionRow.ctorParameters;\n}\n//# sourceMappingURL=expansion-panel.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from \"@angular/animations\";\nimport { FocusMonitor } from \"@angular/cdk/a11y\";\nimport { ENTER, SPACE } from \"@angular/cdk/keycodes\";\nimport { filter } from \"rxjs/operators/filter\";\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Host, Input, ViewEncapsulation, } from \"@angular/core\";\nimport { merge } from \"rxjs/observable/merge\";\nimport { Subscription } from \"rxjs/Subscription\";\nimport { EXPANSION_PANEL_ANIMATION_TIMING, MatExpansionPanel } from \"./expansion-panel\";\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\nvar /**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\nMatExpansionPanelHeader = /** @class */ (function () {\n    function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef) {\n        var _this = this;\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to  subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter(function (changes) { return !!(changes[\"hideToggle\"] || changes[\"disabled\"]); })))\n            .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n        _focusMonitor.monitor(_element.nativeElement, false);\n    }\n    /** Toggles the expanded state of the panel. */\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._toggle = /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    function () {\n        if (!this.panel.disabled) {\n            this.panel.toggle();\n        }\n    };\n    /** Gets whether the panel is expanded. */\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._isExpanded = /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    function () {\n        return this.panel.expanded;\n    };\n    /** Gets the expanded state string of the panel. */\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._getExpandedState = /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    function () {\n        return this.panel._getExpandedState();\n    };\n    /** Gets the panel id. */\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._getPanelId = /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    function () {\n        return this.panel.id;\n    };\n    /** Gets whether the expand indicator should be shown. */\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._showToggle = /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    function () {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    };\n    /** Handle keyup event calling to toggle() if appropriate. */\n    /**\n     * Handle keyup event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._keyup = /**\n     * Handle keyup event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this._toggle();\n                break;\n            default:\n                return;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element.nativeElement);\n    };\n    return MatExpansionPanelHeader;\n}());\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\nexport { MatExpansionPanelHeader };\nfunction MatExpansionPanelHeader_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanelHeader.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanelHeader.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatExpansionPanelHeader.propDecorators;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._parentChangeSubscription;\n    /**\n     * Height of the header while the panel is expanded.\n     * @type {?}\n     */\n    MatExpansionPanelHeader.prototype.expandedHeight;\n    /**\n     * Height of the header while the panel is collapsed.\n     * @type {?}\n     */\n    MatExpansionPanelHeader.prototype.collapsedHeight;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype.panel;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._element;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._focusMonitor;\n    /** @type {?} */\n    MatExpansionPanelHeader.prototype._changeDetectorRef;\n}\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nvar /**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nMatExpansionPanelDescription = /** @class */ (function () {\n    function MatExpansionPanelDescription() {\n    }\n    return MatExpansionPanelDescription;\n}());\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nexport { MatExpansionPanelDescription };\nfunction MatExpansionPanelDescription_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanelDescription.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanelDescription.ctorParameters;\n}\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nvar /**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nMatExpansionPanelTitle = /** @class */ (function () {\n    function MatExpansionPanelTitle() {\n    }\n    return MatExpansionPanelTitle;\n}());\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nexport { MatExpansionPanelTitle };\nfunction MatExpansionPanelTitle_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionPanelTitle.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionPanelTitle.ctorParameters;\n}\n//# sourceMappingURL=expansion-panel-header.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { UNIQUE_SELECTION_DISPATCHER_PROVIDER } from \"@angular/cdk/collections\";\nimport { CdkAccordionModule } from \"@angular/cdk/accordion\";\nimport { A11yModule } from \"@angular/cdk/a11y\";\nimport { MatAccordion } from \"./accordion\";\nimport { MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelBase } from \"./expansion-panel\";\nimport { MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, } from \"./expansion-panel-header\";\nvar MatExpansionModule = /** @class */ (function () {\n    function MatExpansionModule() {\n    }\n    return MatExpansionModule;\n}());\nexport { MatExpansionModule };\nfunction MatExpansionModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatExpansionModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatExpansionModule.ctorParameters;\n}\n//# sourceMappingURL=expansion-module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatExpansionModule } from \"./expansion-module\";\nexport { _CdkAccordion, MatAccordion } from \"./accordion\";\nexport { _CdkAccordionItem, EXPANSION_PANEL_ANIMATION_TIMING, MatExpansionPanelBase, _MatExpansionPanelMixinBase, MatExpansionPanel, MatExpansionPanelActionRow } from \"./expansion-panel\";\nexport { MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle } from \"./expansion-panel-header\";\n//# sourceMappingURL=public-api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatExpansionModule, _CdkAccordion, MatAccordion, _CdkAccordionItem, EXPANSION_PANEL_ANIMATION_TIMING, MatExpansionPanelBase, _MatExpansionPanelMixinBase, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle } from \"./public-api\";\n//# sourceMappingURL=index.js.map"],"names":["tslib_1.__extends"],"mappings":"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"}