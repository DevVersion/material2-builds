{"version":3,"file":"progress-spinner.es5.js","sources":["../../packages/material/esm5/progress-spinner/progress-spinner.js","../../packages/material/esm5/progress-spinner/progress-spinner-module.js","../../packages/material/esm5/progress-spinner/index.js"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Component, ChangeDetectionStrategy, Input, ElementRef, NgZone, Renderer2, Directive, ViewChild, ViewEncapsulation, } from '@angular/core';\nimport { mixinColor } from '@angular/material/core';\n/**\n * A single degree in radians.\n */\nvar DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nvar DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nvar DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nvar startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nvar endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nvar MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nvar HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport var PROGRESS_SPINNER_STROKE_WIDTH = 10;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MatProgressSpinnerCssMatStyler = (function () {\n    function MatProgressSpinnerCssMatStyler() {\n    }\n    MatProgressSpinnerCssMatStyler.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-progress-spinner',\n                    host: { 'class': 'mat-progress-spinner' }\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatProgressSpinnerCssMatStyler.ctorParameters = function () { return []; };\n    return MatProgressSpinnerCssMatStyler;\n}());\nexport { MatProgressSpinnerCssMatStyler };\nfunction MatProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatProgressSpinnerCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatProgressSpinnerCssMatStyler.ctorParameters;\n}\n/**\n * \\@docs-private\n */\nvar MatProgressSpinnerBase = (function () {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    function MatProgressSpinnerBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MatProgressSpinnerBase;\n}());\nexport { MatProgressSpinnerBase };\nfunction MatProgressSpinnerBase_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatProgressSpinnerBase.prototype._renderer;\n    /** @type {?} */\n    MatProgressSpinnerBase.prototype._elementRef;\n}\nexport var /** @type {?} */ _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/**\n * <mat-progress-spinner> component.\n */\nvar MatProgressSpinner = (function (_super) {\n    tslib_1.__extends(MatProgressSpinner, _super);\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} _ngZone\n     */\n    function MatProgressSpinner(renderer, elementRef, _ngZone) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._ngZone = _ngZone;\n        /**\n         * The id of the last requested animation.\n         */\n        _this._lastAnimationId = 0;\n        _this._mode = 'determinate';\n        /**\n         * Stroke width of the progress spinner. By default uses 10px as stroke width.\n         */\n        _this.strokeWidth = PROGRESS_SPINNER_STROKE_WIDTH;\n        return _this;\n    }\n    Object.defineProperty(MatProgressSpinner.prototype, \"_ariaValueMin\", {\n        /**\n         * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n         * because voiceover does not report the progress indicator as indeterminate if the aria min\n         * and/or max value are number values.\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'determinate' ? 0 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"_ariaValueMax\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.mode == 'determinate' ? 100 : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"interdeterminateInterval\", {\n        /**\n         * \\@docs-private\n         * @return {?}\n         */\n        get: function () {\n            return this._interdeterminateInterval;\n        },\n        /**\n         * \\@docs-private\n         * @param {?} interval\n         * @return {?}\n         */\n        set: function (interval) {\n            if (this._interdeterminateInterval) {\n                clearInterval(this._interdeterminateInterval);\n            }\n            this._interdeterminateInterval = interval;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clean up any animations that were running.\n     * @return {?}\n     */\n    MatProgressSpinner.prototype.ngOnDestroy = function () {\n        this._cleanupIndeterminateAnimation();\n    };\n    Object.defineProperty(MatProgressSpinner.prototype, \"value\", {\n        /**\n         * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n         * @return {?}\n         */\n        get: function () {\n            if (this.mode == 'determinate') {\n                return this._value;\n            }\n            return 0;\n        },\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set: function (v) {\n            if (v != null && this.mode == 'determinate') {\n                var /** @type {?} */ newValue = clamp(v);\n                this._animateCircle(this.value || 0, newValue);\n                this._value = newValue;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatProgressSpinner.prototype, \"mode\", {\n        /**\n         * Mode of the progress circle\n         *\n         * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n         * mode is bound to the host as the attribute host.\n         * @return {?}\n         */\n        get: function () { return this._mode; },\n        /**\n         * @param {?} mode\n         * @return {?}\n         */\n        set: function (mode) {\n            if (mode !== this._mode) {\n                if (mode === 'indeterminate') {\n                    this._startIndeterminateAnimation();\n                }\n                else {\n                    this._cleanupIndeterminateAnimation();\n                    this._animateCircle(0, this._value);\n                }\n                this._mode = mode;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Animates the circle from one percentage value to another.\n     *\n     * @param {?} animateFrom The percentage of the circle filled starting the animation.\n     * @param {?} animateTo The percentage of the circle filled ending the animation.\n     * @param {?=} ease The easing function to manage the pace of change in the animation.\n     * @param {?=} duration The length of time to show the animation, in milliseconds.\n     * @param {?=} rotation The starting angle of the circle fill, with 0Â° represented at the top center\n     *    of the circle.\n     * @return {?}\n     */\n    MatProgressSpinner.prototype._animateCircle = function (animateFrom, animateTo, ease, duration, rotation) {\n        var _this = this;\n        if (ease === void 0) { ease = linearEase; }\n        if (duration === void 0) { duration = DURATION_DETERMINATE; }\n        if (rotation === void 0) { rotation = 0; }\n        var /** @type {?} */ id = ++this._lastAnimationId;\n        var /** @type {?} */ startTime = Date.now();\n        var /** @type {?} */ changeInValue = animateTo - animateFrom;\n        // No need to animate it if the values are the same\n        if (animateTo === animateFrom) {\n            this._renderArc(animateTo, rotation);\n        }\n        else {\n            var /** @type {?} */ animation_1 = function () {\n                // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n                var /** @type {?} */ elapsedTime = HAS_RAF ?\n                    Math.max(0, Math.min(Date.now() - startTime, duration)) :\n                    duration;\n                _this._renderArc(ease(elapsedTime, animateFrom, changeInValue, duration), rotation);\n                // Prevent overlapping animations by checking if a new animation has been called for and\n                // if the animation has lasted longer than the animation duration.\n                if (id === _this._lastAnimationId && elapsedTime < duration) {\n                    requestAnimationFrame(animation_1);\n                }\n            };\n            // Run the animation outside of Angular's zone, in order to avoid\n            // hitting ZoneJS and change detection on each frame.\n            this._ngZone.runOutsideAngular(animation_1);\n        }\n    };\n    /**\n     * Starts the indeterminate animation interval, if it is not already running.\n     * @return {?}\n     */\n    MatProgressSpinner.prototype._startIndeterminateAnimation = function () {\n        var _this = this;\n        var /** @type {?} */ rotationStartPoint = 0;\n        var /** @type {?} */ start = startIndeterminate;\n        var /** @type {?} */ end = endIndeterminate;\n        var /** @type {?} */ duration = DURATION_INDETERMINATE;\n        var /** @type {?} */ animate = function () {\n            _this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n            // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n            rotationStartPoint = (rotationStartPoint + end) % 100;\n            var /** @type {?} */ temp = start;\n            start = -end;\n            end = -temp;\n        };\n        if (!this.interdeterminateInterval) {\n            this._ngZone.runOutsideAngular(function () {\n                _this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n                animate();\n            });\n        }\n    };\n    /**\n     * Removes interval, ending the animation.\n     * @return {?}\n     */\n    MatProgressSpinner.prototype._cleanupIndeterminateAnimation = function () {\n        this.interdeterminateInterval = null;\n    };\n    /**\n     * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n     * DOM attribute on the `<path>`.\n     * @param {?} currentValue\n     * @param {?=} rotation\n     * @return {?}\n     */\n    MatProgressSpinner.prototype._renderArc = function (currentValue, rotation) {\n        if (rotation === void 0) { rotation = 0; }\n        if (this._path) {\n            var /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n            this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n        }\n    };\n    MatProgressSpinner.decorators = [\n        { type: Component, args: [{selector: 'mat-progress-spinner',\n                    exportAs: 'matProgressSpinner',\n                    host: {\n                        'role': 'progressbar',\n                        'class': 'mat-progress-spinner',\n                        '[attr.aria-valuemin]': '_ariaValueMin',\n                        '[attr.aria-valuemax]': '_ariaValueMax',\n                        '[attr.aria-valuenow]': 'value',\n                        '[attr.mode]': 'mode',\n                    },\n                    inputs: ['color'],\n                    template: \"<svg viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\"><path #path [style.strokeWidth]=\\\"strokeWidth\\\"></path></svg>\",\n                    styles: [\".mat-progress-spinner{display:block;height:100px;width:100px;overflow:hidden}.mat-progress-spinner svg{height:100%;width:100%;transform-origin:center}.mat-progress-spinner path{fill:transparent;transition:stroke .3s cubic-bezier(.35,0,.25,1)}.mat-progress-spinner[mode=indeterminate] svg{animation-duration:5.25s,2.887s;animation-name:mat-progress-spinner-sporadic-rotate,mat-progress-spinner-linear-rotate;animation-timing-function:cubic-bezier(.35,0,.25,1),linear;animation-iteration-count:infinite;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-sporadic-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}}\"],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatProgressSpinner.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n        { type: NgZone, },\n    ]; };\n    MatProgressSpinner.propDecorators = {\n        '_path': [{ type: ViewChild, args: ['path',] },],\n        'strokeWidth': [{ type: Input },],\n        'value': [{ type: Input },],\n        'mode': [{ type: Input },],\n    };\n    return MatProgressSpinner;\n}(_MatProgressSpinnerMixinBase));\nexport { MatProgressSpinner };\nfunction MatProgressSpinner_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatProgressSpinner.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatProgressSpinner.ctorParameters;\n    /** @type {?} */\n    MatProgressSpinner.propDecorators;\n    /**\n     * The id of the last requested animation.\n     * @type {?}\n     */\n    MatProgressSpinner.prototype._lastAnimationId;\n    /**\n     * The id of the indeterminate interval.\n     * @type {?}\n     */\n    MatProgressSpinner.prototype._interdeterminateInterval;\n    /**\n     * The SVG <path> node that is used to draw the circle.\n     * @type {?}\n     */\n    MatProgressSpinner.prototype._path;\n    /** @type {?} */\n    MatProgressSpinner.prototype._mode;\n    /** @type {?} */\n    MatProgressSpinner.prototype._value;\n    /**\n     * Stroke width of the progress spinner. By default uses 10px as stroke width.\n     * @type {?}\n     */\n    MatProgressSpinner.prototype.strokeWidth;\n    /** @type {?} */\n    MatProgressSpinner.prototype._ngZone;\n}\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\nvar MatSpinner = (function (_super) {\n    tslib_1.__extends(MatSpinner, _super);\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} renderer\n     */\n    function MatSpinner(elementRef, ngZone, renderer) {\n        var _this = _super.call(this, renderer, elementRef, ngZone) || this;\n        _this.mode = 'indeterminate';\n        return _this;\n    }\n    MatSpinner.decorators = [\n        { type: Component, args: [{selector: 'mat-spinner',\n                    host: {\n                        'role': 'progressbar',\n                        'mode': 'indeterminate',\n                        'class': 'mat-spinner mat-progress-spinner',\n                    },\n                    inputs: ['color'],\n                    template: \"<svg viewBox=\\\"0 0 100 100\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\"><path #path [style.strokeWidth]=\\\"strokeWidth\\\"></path></svg>\",\n                    styles: [\".mat-progress-spinner{display:block;height:100px;width:100px;overflow:hidden}.mat-progress-spinner svg{height:100%;width:100%;transform-origin:center}.mat-progress-spinner path{fill:transparent;transition:stroke .3s cubic-bezier(.35,0,.25,1)}.mat-progress-spinner[mode=indeterminate] svg{animation-duration:5.25s,2.887s;animation-name:mat-progress-spinner-sporadic-rotate,mat-progress-spinner-linear-rotate;animation-timing-function:cubic-bezier(.35,0,.25,1),linear;animation-iteration-count:infinite;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-sporadic-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}}\"],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatSpinner.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: NgZone, },\n        { type: Renderer2, },\n    ]; };\n    return MatSpinner;\n}(MatProgressSpinner));\nexport { MatSpinner };\nfunction MatSpinner_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatSpinner.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatSpinner.ctorParameters;\n}\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v) {\n    return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius, pathRadius, angleInDegrees) {\n    var /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n    return (radius + (pathRadius * Math.cos(angleInRadians))) +\n        ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime, startValue, changeInValue, duration) {\n    return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime, startValue, changeInValue, duration) {\n    var /** @type {?} */ time = currentTime / duration;\n    var /** @type {?} */ timeCubed = Math.pow(time, 3);\n    var /** @type {?} */ timeQuad = Math.pow(time, 4);\n    var /** @type {?} */ timeQuint = Math.pow(time, 5);\n    return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n *\n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue, rotation, strokeWidth) {\n    var /** @type {?} */ startPoint = rotation || 0;\n    var /** @type {?} */ radius = 50;\n    var /** @type {?} */ pathRadius = radius - strokeWidth;\n    var /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n    var /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n    var /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n    var /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n    var /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n    var /** @type {?} */ largeArcFlag;\n    if (endAngle < 0) {\n        largeArcFlag = endAngle >= -180 ? 0 : 1;\n    }\n    else {\n        largeArcFlag = endAngle <= 180 ? 0 : 1;\n    }\n    return \"M\" + start + \"A\" + pathRadius + \",\" + pathRadius + \" 0 \" + largeArcFlag + \",\" + arcSweep + \" \" + end;\n}\n//# sourceMappingURL=progress-spinner.js.map","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatProgressSpinner, MatSpinner, MatProgressSpinnerCssMatStyler, } from './progress-spinner';\nvar MatProgressSpinnerModule = (function () {\n    function MatProgressSpinnerModule() {\n    }\n    MatProgressSpinnerModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [MatCommonModule],\n                    exports: [\n                        MatProgressSpinner,\n                        MatSpinner,\n                        MatCommonModule,\n                        MatProgressSpinnerCssMatStyler\n                    ],\n                    declarations: [\n                        MatProgressSpinner,\n                        MatSpinner,\n                        MatProgressSpinnerCssMatStyler\n                    ],\n                },] },\n    ];\n    /**\n     * @nocollapse\n     */\n    MatProgressSpinnerModule.ctorParameters = function () { return []; };\n    return MatProgressSpinnerModule;\n}());\nexport { MatProgressSpinnerModule };\nfunction MatProgressSpinnerModule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatProgressSpinnerModule.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    MatProgressSpinnerModule.ctorParameters;\n}\n//# sourceMappingURL=progress-spinner-module.js.map","/**\n * Generated bundle index. Do not edit.\n */\nexport { MatProgressSpinnerModule, PROGRESS_SPINNER_STROKE_WIDTH, MatProgressSpinnerCssMatStyler, MatProgressSpinnerBase, _MatProgressSpinnerMixinBase, MatProgressSpinner, MatSpinner } from './public-api';\n//# sourceMappingURL=index.js.map"],"names":["tslib_1.__extends"],"mappings":"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"}