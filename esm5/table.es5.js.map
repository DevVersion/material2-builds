{"version":3,"file":"table.es5.js","sources":["../../packages/material/esm5/table/table.js","../../packages/material/esm5/table/cell.js","../../packages/material/esm5/table/row.js","../../packages/material/esm5/table/table-module.js","../../packages/material/esm5/table/table-data-source.js","../../packages/material/esm5/table/public-api.js","../../packages/material/esm5/table/index.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation } from \"@angular/core\";\nimport { CDK_TABLE_TEMPLATE, CdkTable } from \"@angular/cdk/table\";\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport var /** @type {?} */ _MatTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nvar /**\n * Wrapper for the CdkTable with Material design styles.\n */\nMatTable = /** @class */ (function (_super) {\n    tslib_1.__extends(MatTable, _super);\n    function MatTable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatTable;\n}(_MatTable));\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport { MatTable };\nfunction MatTable_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatTable.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatTable.ctorParameters;\n}\n//# sourceMappingURL=table.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Input, Renderer2 } from \"@angular/core\";\nimport { CdkCell, CdkCellDef, CdkColumnDef, CdkHeaderCell, CdkHeaderCellDef, } from \"@angular/cdk/table\";\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport var /** @type {?} */ _MatCellDef = CdkCellDef;\nexport var /** @type {?} */ _MatHeaderCellDef = CdkHeaderCellDef;\nexport var /** @type {?} */ _MatColumnDef = CdkColumnDef;\nexport var /** @type {?} */ _MatHeaderCell = CdkHeaderCell;\nexport var /** @type {?} */ _MatCell = CdkCell;\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nvar /**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nMatCellDef = /** @class */ (function (_super) {\n    tslib_1.__extends(MatCellDef, _super);\n    function MatCellDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatCellDef;\n}(_MatCellDef));\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport { MatCellDef };\nfunction MatCellDef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatCellDef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatCellDef.ctorParameters;\n}\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nvar /**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nMatHeaderCellDef = /** @class */ (function (_super) {\n    tslib_1.__extends(MatHeaderCellDef, _super);\n    function MatHeaderCellDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatHeaderCellDef;\n}(_MatHeaderCellDef));\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport { MatHeaderCellDef };\nfunction MatHeaderCellDef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatHeaderCellDef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatHeaderCellDef.ctorParameters;\n}\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nvar /**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nMatColumnDef = /** @class */ (function (_super) {\n    tslib_1.__extends(MatColumnDef, _super);\n    function MatColumnDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatColumnDef;\n}(_MatColumnDef));\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nexport { MatColumnDef };\nfunction MatColumnDef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatColumnDef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatColumnDef.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    MatColumnDef.propDecorators;\n    /**\n     * Unique name for this column.\n     * @type {?}\n     */\n    MatColumnDef.prototype.name;\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nvar /**\n * Header cell template container that adds the right classes and role.\n */\nMatHeaderCell = /** @class */ (function (_super) {\n    tslib_1.__extends(MatHeaderCell, _super);\n    function MatHeaderCell(columnDef, elementRef, renderer) {\n        var _this = _super.call(this, columnDef, elementRef, renderer) || this;\n        renderer.addClass(elementRef.nativeElement, \"mat-column-\" + columnDef.cssClassFriendlyName);\n        return _this;\n    }\n    return MatHeaderCell;\n}(_MatHeaderCell));\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport { MatHeaderCell };\nfunction MatHeaderCell_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatHeaderCell.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatHeaderCell.ctorParameters;\n}\n/**\n * Cell template container that adds the right classes and role.\n */\nvar /**\n * Cell template container that adds the right classes and role.\n */\nMatCell = /** @class */ (function (_super) {\n    tslib_1.__extends(MatCell, _super);\n    function MatCell(columnDef, elementRef, renderer) {\n        var _this = _super.call(this, columnDef, elementRef, renderer) || this;\n        renderer.addClass(elementRef.nativeElement, \"mat-column-\" + columnDef.cssClassFriendlyName);\n        return _this;\n    }\n    return MatCell;\n}(_MatCell));\n/**\n * Cell template container that adds the right classes and role.\n */\nexport { MatCell };\nfunction MatCell_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatCell.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatCell.ctorParameters;\n}\n//# sourceMappingURL=cell.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, Directive, ViewEncapsulation } from \"@angular/core\";\nimport { CDK_ROW_TEMPLATE, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, } from \"@angular/cdk/table\";\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport var /** @type {?} */ _MatHeaderRowDef = CdkHeaderRowDef;\nexport var /** @type {?} */ _MatCdkRowDef = CdkRowDef;\nexport var /** @type {?} */ _MatHeaderRow = CdkHeaderRow;\nexport var /** @type {?} */ _MatRow = CdkRow;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nvar /**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nMatHeaderRowDef = /** @class */ (function (_super) {\n    tslib_1.__extends(MatHeaderRowDef, _super);\n    function MatHeaderRowDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatHeaderRowDef;\n}(_MatHeaderRowDef));\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport { MatHeaderRowDef };\nfunction MatHeaderRowDef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatHeaderRowDef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatHeaderRowDef.ctorParameters;\n}\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nvar /**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nMatRowDef = /** @class */ (function (_super) {\n    tslib_1.__extends(MatRowDef, _super);\n    function MatRowDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatRowDef;\n}(_MatCdkRowDef));\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nexport { MatRowDef };\nfunction MatRowDef_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatRowDef.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatRowDef.ctorParameters;\n}\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nvar /**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nMatHeaderRow = /** @class */ (function (_super) {\n    tslib_1.__extends(MatHeaderRow, _super);\n    function MatHeaderRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatHeaderRow;\n}(_MatHeaderRow));\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport { MatHeaderRow };\nfunction MatHeaderRow_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatHeaderRow.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatHeaderRow.ctorParameters;\n}\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nvar /**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nMatRow = /** @class */ (function (_super) {\n    tslib_1.__extends(MatRow, _super);\n    function MatRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatRow;\n}(_MatRow));\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport { MatRow };\nfunction MatRow_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatRow.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatRow.ctorParameters;\n}\n//# sourceMappingURL=row.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule } from \"@angular/core\";\nimport { MatTable } from \"./table\";\nimport { CdkTableModule } from \"@angular/cdk/table\";\nimport { MatCell, MatHeaderCell, MatCellDef, MatHeaderCellDef, MatColumnDef } from \"./cell\";\nimport { MatHeaderRow, MatRow, MatHeaderRowDef, MatRowDef } from \"./row\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatCommonModule } from \"@angular/material/core\";\nvar MatTableModule = /** @class */ (function () {\n    function MatTableModule() {\n    }\n    return MatTableModule;\n}());\nexport { MatTableModule };\nfunction MatTableModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatTableModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatTableModule.ctorParameters;\n}\n//# sourceMappingURL=table-module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\nimport { combineLatest } from \"rxjs/operators/combineLatest\";\nimport { map } from \"rxjs/operators/map\";\nimport { startWith } from \"rxjs/operators/startWith\";\nimport { empty } from \"rxjs/observable/empty\";\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nvar /**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nMatTableDataSource = /** @class */ (function () {\n    function MatTableDataSource(initialData) {\n        if (initialData === void 0) { initialData = []; }\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    Object.defineProperty(MatTableDataSource.prototype, \"data\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._data.value; },\n        /** Array of data that should be rendered by the table, where each object represents one row. */\n        set: /**\n         * Array of data that should be rendered by the table, where each object represents one row.\n         * @param {?} data\n         * @return {?}\n         */\n        function (data) { this._data.next(data); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTableDataSource.prototype, \"filter\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._filter.value; },\n        /**\n         * Filter term that should be used to filter out objects from the data array. To override how\n         * data objects match to this filter string, provide a custom function for filterPredicate.\n         */\n        set: /**\n         * Filter term that should be used to filter out objects from the data array. To override how\n         * data objects match to this filter string, provide a custom function for filterPredicate.\n         * @param {?} filter\n         * @return {?}\n         */\n        function (filter) { this._filter.next(filter); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTableDataSource.prototype, \"sort\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._sort; },\n        /**\n         * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n         * emitted by the MatSort will trigger an update to the table's rendered data.\n         */\n        set: /**\n         * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n         * emitted by the MatSort will trigger an update to the table's rendered data.\n         * @param {?} sort\n         * @return {?}\n         */\n        function (sort) {\n            this._sort = sort;\n            this._updateChangeSubscription();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTableDataSource.prototype, \"paginator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._paginator; },\n        /**\n         * Instance of the MatPaginator component used by the table to control what page of the data is\n         * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n         * table's rendered data.\n         *\n         * Note that the data source uses the paginator's properties to calculate which page of data\n         * should be displayed. If the paginator receives its properties as template inputs,\n         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n         * initialized before assigning it to this data source.\n         */\n        set: /**\n         * Instance of the MatPaginator component used by the table to control what page of the data is\n         * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n         * table's rendered data.\n         *\n         * Note that the data source uses the paginator's properties to calculate which page of data\n         * should be displayed. If the paginator receives its properties as template inputs,\n         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n         * initialized before assigning it to this data source.\n         * @param {?} paginator\n         * @return {?}\n         */\n        function (paginator) {\n            this._paginator = paginator;\n            this._updateChangeSubscription();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    MatTableDataSource.prototype._updateChangeSubscription = /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // Otherwise, use an empty observable stream to take their place.\n        var /** @type {?} */ sortChange = this._sort ? this._sort.sortChange : empty();\n        var /** @type {?} */ pageChange = this._paginator ? this._paginator.page : empty();\n        if (this._renderChangesSubscription) {\n            this._renderChangesSubscription.unsubscribe();\n        }\n        // Watch for base data or filter changes to provide a filtered set of data.\n        this._renderChangesSubscription = this._data.pipe(combineLatest(this._filter), map(function (_a) {\n            var data = _a[0];\n            return _this._filterData(data);\n        }), \n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        combineLatest(sortChange.pipe(startWith(/** @type {?} */ ((null))))), map(function (_a) {\n            var data = _a[0];\n            return _this._orderData(data);\n        }), \n        // Watch for ordered data or page changes to provide a paged set of data.\n        combineLatest(pageChange.pipe(startWith(/** @type {?} */ ((null))))), map(function (_a) {\n            var data = _a[0];\n            return _this._pageData(data);\n        }))\n            .subscribe(function (data) { return _this._renderData.next(data); });\n    };\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    MatTableDataSource.prototype._filterData = /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        var _this = this;\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overriden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter(function (obj) { return _this.filterPredicate(obj, _this.filter); });\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    };\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    MatTableDataSource.prototype._orderData = /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        var _this = this;\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort || !this.sort.active || this.sort.direction == '') {\n            return data;\n        }\n        var /** @type {?} */ active = this.sort.active;\n        var /** @type {?} */ direction = this.sort.direction;\n        return data.slice().sort(function (a, b) {\n            var /** @type {?} */ valueA = _this.sortingDataAccessor(a, active);\n            var /** @type {?} */ valueB = _this.sortingDataAccessor(b, active);\n            return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n        });\n    };\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    MatTableDataSource.prototype._pageData = /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        if (!this.paginator) {\n            return data;\n        }\n        var /** @type {?} */ startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice().splice(startIndex, this.paginator.pageSize);\n    };\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    MatTableDataSource.prototype._updatePaginator = /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    function (filteredDataLength) {\n        var _this = this;\n        Promise.resolve().then(function () {\n            if (!_this.paginator) {\n                return;\n            }\n            _this.paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (_this.paginator.pageIndex > 0) {\n                var /** @type {?} */ lastPageIndex = Math.ceil(_this.paginator.length / _this.paginator.pageSize) - 1 || 0;\n                _this.paginator.pageIndex = Math.min(_this.paginator.pageIndex, lastPageIndex);\n            }\n        });\n    };\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatTableDataSource.prototype.connect = /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () { return this._renderData; };\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * @docs-private\n     */\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatTableDataSource.prototype.disconnect = /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () { };\n    return MatTableDataSource;\n}());\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport { MatTableDataSource };\nfunction MatTableDataSource_tsickle_Closure_declarations() {\n    /**\n     * Stream that emits when a new data array is set on the data source.\n     * @type {?}\n     */\n    MatTableDataSource.prototype._data;\n    /**\n     * Stream emitting render data to the table (depends on ordered data changes).\n     * @type {?}\n     */\n    MatTableDataSource.prototype._renderData;\n    /**\n     * Stream that emits when a new filter string is set on the data source.\n     * @type {?}\n     */\n    MatTableDataSource.prototype._filter;\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     * @type {?}\n     */\n    MatTableDataSource.prototype._renderChangesSubscription;\n    /**\n     * The filtered set of data that has been matched by the filter string, or all the data if there\n     * is no filter. Useful for knowing the set of data the table represents.\n     * For example, a 'selectAll()' function would likely want to select the set of filtered data\n     * shown to the user rather than all the data.\n     * @type {?}\n     */\n    MatTableDataSource.prototype.filteredData;\n    /** @type {?} */\n    MatTableDataSource.prototype._sort;\n    /** @type {?} */\n    MatTableDataSource.prototype._paginator;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * \\@param data Data object that is being accessed.\n     * \\@param sortHeaderId The name of the column that represents the data.\n     * @type {?}\n     */\n    MatTableDataSource.prototype.sortingDataAccessor;\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n     * filter matching.\n     * \\@param data Data object used to check against the filter.\n     * \\@param filter Filter string that has been set on the data source.\n     * \\@return Whether the filter matches against the data\n     * @type {?}\n     */\n    MatTableDataSource.prototype.filterPredicate;\n}\n//# sourceMappingURL=table-data-source.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatTableModule } from \"./table-module\";\nexport { _MatCellDef, _MatHeaderCellDef, _MatColumnDef, _MatHeaderCell, _MatCell, MatCellDef, MatHeaderCellDef, MatColumnDef, MatHeaderCell, MatCell } from \"./cell\";\nexport { _MatTable, MatTable } from \"./table\";\nexport { _MatHeaderRowDef, _MatCdkRowDef, _MatHeaderRow, _MatRow, MatHeaderRowDef, MatRowDef, MatHeaderRow, MatRow } from \"./row\";\nexport { MatTableDataSource } from \"./table-data-source\";\n//# sourceMappingURL=public-api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatTableModule, _MatCellDef, _MatHeaderCellDef, _MatColumnDef, _MatHeaderCell, _MatCell, MatCellDef, MatHeaderCellDef, MatColumnDef, MatHeaderCell, MatCell, _MatTable, MatTable, _MatHeaderRowDef, _MatCdkRowDef, _MatHeaderRow, _MatRow, MatHeaderRowDef, MatRowDef, MatHeaderRow, MatRow, MatTableDataSource } from \"./public-api\";\n//# sourceMappingURL=index.js.map"],"names":["tslib_1.__extends"],"mappings":"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"}