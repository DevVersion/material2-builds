{"version":3,"file":"button.es5.js","sources":["../../packages/material/esm5/button/button.js","../../packages/material/esm5/button/button-module.js","../../packages/material/esm5/button/public-api.js","../../packages/material/esm5/button/index.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from \"@angular/cdk/a11y\";\nimport { Platform } from \"@angular/cdk/platform\";\nimport { ChangeDetectionStrategy, Component, Directive, ElementRef, forwardRef, Inject, Optional, Renderer2, Self, ViewEncapsulation, } from \"@angular/core\";\nimport { mixinColor, mixinDisabled, mixinDisableRipple } from \"@angular/material/core\";\n/**\n * Default color palette for round buttons (mat-fab and mat-mini-fab)\n */\nvar /** @type {?} */ DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar /**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nMatButtonCssMatStyler = /** @class */ (function () {\n    function MatButtonCssMatStyler() {\n    }\n    return MatButtonCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport { MatButtonCssMatStyler };\nfunction MatButtonCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatButtonCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatButtonCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar /**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nMatRaisedButtonCssMatStyler = /** @class */ (function () {\n    function MatRaisedButtonCssMatStyler() {\n    }\n    return MatRaisedButtonCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport { MatRaisedButtonCssMatStyler };\nfunction MatRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatRaisedButtonCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatRaisedButtonCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar /**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nMatIconButtonCssMatStyler = /** @class */ (function () {\n    function MatIconButtonCssMatStyler() {\n    }\n    return MatIconButtonCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport { MatIconButtonCssMatStyler };\nfunction MatIconButtonCssMatStyler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatIconButtonCssMatStyler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatIconButtonCssMatStyler.ctorParameters;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar /**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nMatFab = /** @class */ (function () {\n    function MatFab(button, anchor) {\n        // Set the default color palette for the mat-fab components.\n        (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n    return MatFab;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport { MatFab };\nfunction MatFab_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatFab.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatFab.ctorParameters;\n}\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nvar /**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nMatMiniFab = /** @class */ (function () {\n    function MatMiniFab(button, anchor) {\n        // Set the default color palette for the mat-mini-fab components.\n        (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n    return MatMiniFab;\n}());\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport { MatMiniFab };\nfunction MatMiniFab_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatMiniFab.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatMiniFab.ctorParameters;\n}\n/**\n * \\@docs-private\n */\nvar /**\n * \\@docs-private\n */\nMatButtonBase = /** @class */ (function () {\n    function MatButtonBase(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n    }\n    return MatButtonBase;\n}());\n/**\n * \\@docs-private\n */\nexport { MatButtonBase };\nfunction MatButtonBase_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MatButtonBase.prototype._renderer;\n    /** @type {?} */\n    MatButtonBase.prototype._elementRef;\n}\nexport var /** @type {?} */ _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n/**\n * Material design button.\n */\nvar /**\n * Material design button.\n */\nMatButton = /** @class */ (function (_super) {\n    tslib_1.__extends(MatButton, _super);\n    function MatButton(renderer, elementRef, _platform, _focusMonitor) {\n        var _this = _super.call(this, renderer, elementRef) || this;\n        _this._platform = _platform;\n        _this._focusMonitor = _focusMonitor;\n        _this._focusMonitor.monitor(_this._elementRef.nativeElement, true);\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    MatButton.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    /** Focuses the button. */\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    MatButton.prototype.focus = /**\n     * Focuses the button.\n     * @return {?}\n     */\n    function () {\n        this._getHostElement().focus();\n    };\n    /**\n     * @return {?}\n     */\n    MatButton.prototype._getHostElement = /**\n     * @return {?}\n     */\n    function () {\n        return this._elementRef.nativeElement;\n    };\n    /**\n     * @return {?}\n     */\n    MatButton.prototype._isRippleDisabled = /**\n     * @return {?}\n     */\n    function () {\n        return this.disableRipple || this.disabled;\n    };\n    /** Gets whether the button has one of the given attributes. */\n    /**\n     * Gets whether the button has one of the given attributes.\n     * @param {...?} attributes\n     * @return {?}\n     */\n    MatButton.prototype._hasHostAttributes = /**\n     * Gets whether the button has one of the given attributes.\n     * @param {...?} attributes\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var attributes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            attributes[_i] = arguments[_i];\n        }\n        // If not on the browser, say that there are none of the attributes present.\n        // Since these only affect how the ripple displays (and ripples only happen on the client),\n        // detecting these attributes isn't necessary when not on the browser.\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        return attributes.some(function (attribute) { return _this._getHostElement().hasAttribute(attribute); });\n    };\n    return MatButton;\n}(_MatButtonMixinBase));\n/**\n * Material design button.\n */\nexport { MatButton };\nfunction MatButton_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatButton.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatButton.ctorParameters;\n    /**\n     * Whether the button is round.\n     * @type {?}\n     */\n    MatButton.prototype._isRoundButton;\n    /**\n     * Whether the button is icon button.\n     * @type {?}\n     */\n    MatButton.prototype._isIconButton;\n    /** @type {?} */\n    MatButton.prototype._platform;\n    /** @type {?} */\n    MatButton.prototype._focusMonitor;\n}\n/**\n * Raised Material design button.\n */\nvar /**\n * Raised Material design button.\n */\nMatAnchor = /** @class */ (function (_super) {\n    tslib_1.__extends(MatAnchor, _super);\n    function MatAnchor(platform, focusMonitor, elementRef, renderer) {\n        return _super.call(this, renderer, elementRef, platform, focusMonitor) || this;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatAnchor.prototype._haltDisabledEvents = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // A disabled button shouldn't apply any actions\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    };\n    return MatAnchor;\n}(MatButton));\n/**\n * Raised Material design button.\n */\nexport { MatAnchor };\nfunction MatAnchor_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatAnchor.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatAnchor.ctorParameters;\n}\n//# sourceMappingURL=button.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { MatCommonModule, MatRippleModule } from \"@angular/material/core\";\nimport { A11yModule } from \"@angular/cdk/a11y\";\nimport { MatAnchor, MatButton, MatMiniFab, MatButtonCssMatStyler, MatFab, MatIconButtonCssMatStyler, MatRaisedButtonCssMatStyler } from \"./button\";\nvar MatButtonModule = /** @class */ (function () {\n    function MatButtonModule() {\n    }\n    return MatButtonModule;\n}());\nexport { MatButtonModule };\nfunction MatButtonModule_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MatButtonModule.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MatButtonModule.ctorParameters;\n}\n//# sourceMappingURL=button-module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { MatButtonModule } from \"./button-module\";\nexport { MatButtonCssMatStyler, MatRaisedButtonCssMatStyler, MatIconButtonCssMatStyler, MatFab, MatMiniFab, MatButtonBase, _MatButtonMixinBase, MatButton, MatAnchor } from \"./button\";\n//# sourceMappingURL=public-api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MatButtonModule, MatButtonCssMatStyler, MatRaisedButtonCssMatStyler, MatIconButtonCssMatStyler, MatFab, MatMiniFab, MatButtonBase, _MatButtonMixinBase, MatButton, MatAnchor } from \"./public-api\";\n//# sourceMappingURL=index.js.map"],"names":["tslib_1.__extends"],"mappings":"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"}