{"version":3,"file":"material-datepicker.umd.min.js","sources":["../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/form-field/index.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/button/button.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/button/button-module.ts","../../src/lib/button/index.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/dialog/index.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/icon/index.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/datepicker/coerce-date-property.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatCalendar} from './calendar';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n   _calendar: MatCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MatCalendar, ] },],\n};\n}\n\nfunction MatDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepickerContent.ctorParameters;\n/** @type {?} */\nMatDatepickerContent.propDecorators;\n/** @type {?} */\nMatDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMatDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MatDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, date); }\nprivate _startAt: D | null;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Whether the datepicker pop-up should be disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\nprivate _disabled: boolean;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `mat-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n * @return {?}\n */\nget _selected(): D | null { return this._validSelected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _selected(value: D | null) { this._validSelected = value; }\nprivate _validSelected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MatDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription = Subscription.EMPTY;\n/**\n * The input element this datepicker is associated with.\n */\n_datepickerInput: MatDatepickerInput<D>;\n/**\n * Emits when the datepicker is disabled.\n */\n_disabledChange = new Subject<boolean>();\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MatDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n/**\n * Selects the given date\n * @param {?} date\n * @return {?}\n */\n_select(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('An MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n\n      this._focusedElementBeforeOpen.focus();\n      this._focusedElementBeforeOpen = null;\n    }\n\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MatDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepicker.ctorParameters;\n/** @type {?} */\nMatDatepicker.propDecorators;\n/** @type {?} */\nMatDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMatDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMatDatepicker.prototype.touchUi;\n/** @type {?} */\nMatDatepicker.prototype._disabled;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n * @type {?}\n */\nMatDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMatDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMatDatepicker.prototype.id;\n/** @type {?} */\nMatDatepicker.prototype._validSelected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMatDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMatDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMatDatepicker.prototype._calendarPortal;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMatDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMatDatepicker.prototype._inputSubscription;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMatDatepicker.prototype._datepickerInput;\n/**\n * Emits when the datepicker is disabled.\n * @type {?}\n */\nMatDatepicker.prototype._disabledChange;\n/** @type {?} */\nMatDatepicker.prototype._dialog;\n/** @type {?} */\nMatDatepicker.prototype._overlay;\n/** @type {?} */\nMatDatepicker.prototype._ngZone;\n/** @type {?} */\nMatDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMatDatepicker.prototype._scrollStrategy;\n/** @type {?} */\nMatDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMatDatepicker.prototype._dir;\n/** @type {?} */\nMatDatepicker.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const /** @type {?} */ MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n/**\n * The new value for the target datepicker input.\n */\nvalue: D | null;\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nconstructor(public target: MatDatepickerInput<D>,\npublic targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\nfunction MatDatepickerInputEvent_tsickle_Closure_declarations() {\n/**\n * The new value for the target datepicker input.\n * @type {?}\n */\nMatDatepickerInputEvent.prototype.value;\n/** @type {?} */\nMatDatepickerInputEvent.prototype.target;\n/** @type {?} */\nMatDatepickerInputEvent.prototype.targetElement;\n}\n\n/**\n * Directive used to connect an input to a MatDatepicker.\n */\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nprivate registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\n    value = coerceDateProperty(this._dateAdapter, value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n\n    let /** @type {?} */ oldDate = this.value;\n    this._value = value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\nprivate _value: D | null;\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D | null { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D | null) {\n    this._min = coerceDateProperty(this._dateAdapter, value);\n    this._validatorOnChange();\n  }\nprivate _min: D | null;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D | null { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D | null) {\n    this._max = coerceDateProperty(this._dateAdapter, value);\n    this._validatorOnChange();\n  }\nprivate _max: D | null;\n/**\n * Whether the datepicker-input is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\nprivate _disabled: boolean;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n */\ndateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n/**\n * Emits when an `input` event is fired on this `<input>`.\n */\ndateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n/**\n * Emits when the disabled state has changed\n */\n_disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription = Subscription.EMPTY;\nprivate _localeSubscription = Subscription.EMPTY;\n/**\n * The form control validator for whether the input parses.\n */\nprivate _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * Whether the last value set on the input was valid.\n */\nprivate _lastValueValid = false;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _formField\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MatDateFormats,\nprivate _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @return {?}\n */\n_onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @param {?} obj The object to check.\n * @return {?} The given object if it is both a date instance and valid, otherwise null.\n */\nprivate _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[matDatepicker]',\n  providers: [MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS, ] }, ]},\n{type: MatFormField, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'matDatepicker': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'disabled': [{ type: Input },],\n'dateChange': [{ type: Output },],\n'dateInput': [{ type: Output },],\n};\n}\n\nfunction MatDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepickerInput.ctorParameters;\n/** @type {?} */\nMatDatepickerInput.propDecorators;\n/** @type {?} */\nMatDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMatDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMatDatepickerInput.prototype._value;\n/** @type {?} */\nMatDatepickerInput.prototype._min;\n/** @type {?} */\nMatDatepickerInput.prototype._max;\n/** @type {?} */\nMatDatepickerInput.prototype._disabled;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n * @type {?}\n */\nMatDatepickerInput.prototype.dateChange;\n/**\n * Emits when an `input` event is fired on this `<input>`.\n * @type {?}\n */\nMatDatepickerInput.prototype.dateInput;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMatDatepickerInput.prototype._valueChange;\n/**\n * Emits when the disabled state has changed\n * @type {?}\n */\nMatDatepickerInput.prototype._disabledChange;\n/** @type {?} */\nMatDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMatDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMatDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMatDatepickerInput.prototype._datepickerSubscription;\n/** @type {?} */\nMatDatepickerInput.prototype._localeSubscription;\n/**\n * The form control validator for whether the input parses.\n * @type {?}\n */\nMatDatepickerInput.prototype._parseValidator;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMatDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMatDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMatDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMatDatepickerInput.prototype._validator;\n/**\n * Whether the last value set on the input was valid.\n * @type {?}\n */\nMatDatepickerInput.prototype._lastValueValid;\n/** @type {?} */\nMatDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMatDatepickerInput.prototype._renderer;\n/** @type {?} */\nMatDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMatDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMatDatepickerInput.prototype._formField;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nexport class MatDatepickerToggle<D> implements OnChanges, OnDestroy {\nprivate _stateChanges = Subscription.EMPTY;\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MatDatepicker<D>;\n/**\n * Whether the toggle button is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this.datepicker.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\nprivate _disabled: boolean;\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic _intl: MatDatepickerIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      const /** @type {?} */ datepicker: MatDatepicker<D> = changes.datepicker.currentValue;\n      const /** @type {?} */ datepickerDisabled = datepicker ? datepicker._disabledChange : observableOf();\n      const /** @type {?} */ inputDisabled = datepicker && datepicker._datepickerInput ?\n        datepicker._datepickerInput._disabledChange :\n        observableOf();\n\n      this._stateChanges.unsubscribe();\n      this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDatepickerIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['for', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MatDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepickerToggle.ctorParameters;\n/** @type {?} */\nMatDatepickerToggle.propDecorators;\n/** @type {?} */\nMatDatepickerToggle.prototype._stateChanges;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMatDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMatDatepickerToggle.prototype._disabled;\n/** @type {?} */\nMatDatepickerToggle.prototype._intl;\n/** @type {?} */\nMatDatepickerToggle.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\nexport class MatDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MatFormField`.\n */\nexport class MatPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPlaceholder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MatPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matPrefix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MatSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matSuffix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSuffix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {first, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList, Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  FloatPlaceholderType,\n  MAT_PLACEHOLDER_GLOBAL_OPTIONS,\n  PlaceholderOptions,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n */\nprivate _showAlwaysAnimate = false;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() {\n    return this._floatPlaceholder === 'always' && !this._showAlwaysAnimate;\n  }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the mat-hint and mat-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    if (value !== this._floatPlaceholder) {\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\n   _connectionContainerRef: ElementRef;\nprivate _placeholder: ElementRef;\n   _control: MatFormFieldControl<any>;\n   _placeholderChild: MatPlaceholder;\n   _errorChildren: QueryList<MatError>;\n   _hintChildren: QueryList<MatHint>;\n   _prefixChildren: QueryList<MatPrefix>;\n   _suffixChildren: QueryList<MatSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\n        placeholderOptions: PlaceholderOptions) {\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._renderer.addClass(\n          this._elementRef.nativeElement, `mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let /** @type {?} */ ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateControlChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n/**\n * Animates the placeholder up and locks it in position.\n * @return {?}\n */\n_animateAndLockPlaceholder(): void {\n    if (this._placeholder && this._canPlaceholderFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatPlaceholder = 'always';\n\n      first.call(fromEvent(this._placeholder.nativeElement, 'transitionend')).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n * or child element with the `mat-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n/**\n * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MatHint;\n      let /** @type {?} */ endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\n * its `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\n    if (this._control) {\n      let /** @type {?} */ ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let /** @type {?} */ startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let /** @type {?} */ endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n      ]),\n    ]),\n  ],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canPlaceholderFloat',\n    '[class.mat-form-field-should-float]': '_control.shouldPlaceholderFloat || _shouldAlwaysFloat',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_placeholder': [{ type: ViewChild, args: ['placeholder', ] },],\n'_control': [{ type: ContentChild, args: [MatFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MatPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MatError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MatHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MatPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MatSuffix, ] },],\n};\n}\n\nfunction MatFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMatFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatFormField.ctorParameters;\n/** @type {?} */\nMatFormField.propDecorators;\n/** @type {?} */\nMatFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMatFormField.prototype.color;\n/** @type {?} */\nMatFormField.prototype._hideRequiredMarker;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n * @type {?}\n */\nMatFormField.prototype._showAlwaysAnimate;\n/**\n * State of the mat-hint and mat-error animations.\n * @type {?}\n */\nMatFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMatFormField.prototype._hintLabel;\n/** @type {?} */\nMatFormField.prototype._hintLabelId;\n/** @type {?} */\nMatFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMatFormField.prototype.underlineRef;\n/** @type {?} */\nMatFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMatFormField.prototype._placeholder;\n/** @type {?} */\nMatFormField.prototype._control;\n/** @type {?} */\nMatFormField.prototype._placeholderChild;\n/** @type {?} */\nMatFormField.prototype._errorChildren;\n/** @type {?} */\nMatFormField.prototype._hintChildren;\n/** @type {?} */\nMatFormField.prototype._prefixChildren;\n/** @type {?} */\nMatFormField.prototype._suffixChildren;\n/** @type {?} */\nMatFormField.prototype._elementRef;\n/** @type {?} */\nMatFormField.prototype._renderer;\n/** @type {?} */\nMatFormField.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nexport class MatFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatFormFieldModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatFormFieldModule,MatError,MatFormField,MatFormFieldControl,getMatFormFieldPlaceholderConflictError,getMatFormFieldDuplicatedHintError,getMatFormFieldMissingControlError,MatHint,MatPlaceholder,MatPrefix,MatSuffix} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MatDatepickerIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepickerIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMatDatepickerIntl.prototype.changes;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MatCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MatCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCalendarCell.prototype.value;\n/** @type {?} */\nMatCalendarCell.prototype.displayValue;\n/** @type {?} */\nMatCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMatCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MatCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MatCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n */\ncellAspectRatio = 1;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'cellAspectRatio': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MatCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCalendarBody.ctorParameters;\n/** @type {?} */\nMatCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMatCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMatCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMatCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMatCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMatCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMatCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMatCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMatCalendarBody.prototype.activeCell;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n * @type {?}\n */\nMatCalendarBody.prototype.cellAspectRatio;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMatCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MatMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\n    this._selected = coerceDateProperty(this._dateAdapter, value);\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MatCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MatDateFormats,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const /** @type {?} */ selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const /** @type {?} */ selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const /** @type {?} */ selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this.userSelection.emit();\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\n_init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Creates MatCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MatMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMonthView.ctorParameters;\n/** @type {?} */\nMatMonthView.propDecorators;\n/** @type {?} */\nMatMonthView.prototype._activeDate;\n/** @type {?} */\nMatMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMatMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMatMonthView.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMatMonthView.prototype.userSelection;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMatMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMatMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMatMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMatMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMatMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMatMonthView.prototype._weekdays;\n/** @type {?} */\nMatMonthView.prototype._dateAdapter;\n/** @type {?} */\nMatMonthView.prototype._dateFormats;\n/** @type {?} */\nMatMonthView.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MatYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\n    this._selected = coerceDateProperty(this._dateAdapter, value);\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MatCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MatDateFormats,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\n_init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MatCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MatYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMatYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatYearView.ctorParameters;\n/** @type {?} */\nMatYearView.propDecorators;\n/** @type {?} */\nMatYearView.prototype._activeDate;\n/** @type {?} */\nMatYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMatYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMatYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMatYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMatYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMatYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMatYearView.prototype._selectedMonth;\n/** @type {?} */\nMatYearView.prototype._dateAdapter;\n/** @type {?} */\nMatYearView.prototype._dateFormats;\n/** @type {?} */\nMatYearView.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {first} from 'rxjs/operator/first';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\nprivate _intlChanges: Subscription;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @return {?}\n */\nget startAt(): D | null { return this._startAt; }\n/**\n * @param {?} value\n * @return {?}\n */\nset startAt(value: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, value); }\nprivate _startAt: D | null;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) { this._selected = coerceDateProperty(this._dateAdapter, value); }\nprivate _selected: D | null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget minDate(): D | null { return this._minDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minDate(value: D | null) { this._minDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _minDate: D | null;\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget maxDate(): D | null { return this._maxDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxDate(value: D | null) { this._maxDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _maxDate: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * Reference to the current month view component.\n */\nmonthView: MatMonthView<D>;\n/**\n * Reference to the current year view component.\n */\nyearView: MatYearView<D>;\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} changeDetectorRef\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MatDatepickerIntl,\nprivate _ngZone: NgZone,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const /** @type {?} */ view = this.monthView || this.yearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * @return {?}\n */\n_userSelected(): void {\n    this.userSelection.emit();\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MatDatepickerIntl, },\n{type: NgZone, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n'monthView': [{ type: ViewChild, args: [MatMonthView, ] },],\n'yearView': [{ type: ViewChild, args: [MatYearView, ] },],\n};\n}\n\nfunction MatCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCalendar.ctorParameters;\n/** @type {?} */\nMatCalendar.propDecorators;\n/** @type {?} */\nMatCalendar.prototype._intlChanges;\n/** @type {?} */\nMatCalendar.prototype._startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMatCalendar.prototype.startView;\n/** @type {?} */\nMatCalendar.prototype._selected;\n/** @type {?} */\nMatCalendar.prototype._minDate;\n/** @type {?} */\nMatCalendar.prototype._maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMatCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMatCalendar.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMatCalendar.prototype.userSelection;\n/**\n * Reference to the current month view component.\n * @type {?}\n */\nMatCalendar.prototype.monthView;\n/**\n * Reference to the current year view component.\n * @type {?}\n */\nMatCalendar.prototype.yearView;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMatCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMatCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMatCalendar.prototype._monthView;\n/** @type {?} */\nMatCalendar.prototype._elementRef;\n/** @type {?} */\nMatCalendar.prototype._intl;\n/** @type {?} */\nMatCalendar.prototype._ngZone;\n/** @type {?} */\nMatCalendar.prototype._dateAdapter;\n/** @type {?} */\nMatCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n/**\n * Default color palette for round buttons (mat-fab and mat-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MatButton,\n                 anchor: MatAnchor) {\n    // Set the default color palette for the mat-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatButton), ] }, ]},\n{type: MatAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatAnchor), ] }, ]},\n];\n}\n\nfunction MatFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMatFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MatMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MatButton,\n                 anchor: MatAnchor) {\n    // Set the default color palette for the mat-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatButton), ] }, ]},\n{type: MatAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatAnchor), ] }, ]},\n];\n}\n\nfunction MatMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonBase.prototype._renderer;\n/** @type {?} */\nMatButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n/**\n * Material design button.\n */\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor) {\n    super(renderer, elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes with a 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      return this._getHostElement().hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusMonitor, },\n];\n}\n\nfunction MatButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButton.ctorParameters;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMatButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMatButton.prototype._isIconButton;\n/** @type {?} */\nMatButton.prototype._platform;\n/** @type {?} */\nMatButton.prototype._focusMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MatAnchor extends MatButton {\n/**\n * @param {?} platform\n * @param {?} focusMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusMonitor);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MatAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMatAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatAnchor.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nexport class MatCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * Reference to the global `document` object.\n */\nprivate _document = typeof document === 'object' && document ? document : null;\n/**\n * @param {?} sanityChecksEnabled\n */\nconstructor(  sanityChecksEnabled: boolean) {\n    if (sanityChecksEnabled && !this._hasDoneGlobalChecks && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const /** @type {?} */ computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MatCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMatCommonModule.prototype._hasDoneGlobalChecks;\n/**\n * Reference to the global `document` object.\n * @type {?}\n */\nMatCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\nexport class MatButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatButtonModule,MatButtonCssMatStyler,MatRaisedButtonCssMatStyler,MatIconButtonCssMatStyler,MatFab,MatMiniFab,MatButtonBase,_MatButtonMixinBase,MatButton,MatAnchor} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\n\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MatDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMatDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMatDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMatDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMatDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMatDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMatDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMatDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMatDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMatDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMatDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMatDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMatDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMatDialogConfig.prototype.ariaDescribedBy;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MatDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MatDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @template C\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalHost.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If we didn't find any focusable elements inside the dialog, focus the\n      // container so the user can't tab into other elements behind it.\n      if (!hasMovedFocus) {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n    this._isAnimating = false;\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n    this._animationStateChanged.emit(event);\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MatDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogContainer.ctorParameters;\n/** @type {?} */\nMatDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMatDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMatDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMatDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMatDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMatDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMatDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMatDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMatDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMatDialogContainer.prototype._elementRef;\n/** @type {?} */\nMatDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMatDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMatDialogContainer.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {filter, first, RxChain} from '@angular/cdk/rxjs';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n */\nprivate _afterOpen = new Subject<void>();\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed = new Subject<any>();\n/**\n * Subject for notifying the user that the dialog has started closing.\n */\nprivate _beforeClose = new Subject<any>();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MatDialogContainer,\npublic readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'enter')\n      .call(first)\n      .subscribe(() => {\n        this._afterOpen.next();\n        this._afterOpen.complete();\n      });\n\n    // Dispose overlay when closing animation is complete\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\n      .call(first)\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    RxChain.from(this._containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'start')\n      .call(first)\n      .subscribe(() => {\n        this._beforeClose.next(dialogResult);\n        this._beforeClose.complete();\n        this._overlayRef.detachBackdrop();\n      });\n\n    this._containerInstance._startExitAnimation();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished opening.\n * @return {?}\n */\nafterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog has started closing.\n * @return {?}\n */\nbeforeClose(): Observable<any> {\n    return this._beforeClose.asObservable();\n  }\n/**\n * Gets an observable that emits when the overlay's backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\n    return this._containerInstance._isAnimating;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MatDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMatDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMatDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n * @type {?}\n */\nMatDialogRef.prototype._afterOpen;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMatDialogRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the dialog has started closing.\n * @type {?}\n */\nMatDialogRef.prototype._beforeClose;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMatDialogRef.prototype._result;\n/** @type {?} */\nMatDialogRef.prototype._overlayRef;\n/** @type {?} */\nMatDialogRef.prototype._containerInstance;\n/** @type {?} */\nMatDialogRef.prototype.id;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {extendObject} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\nimport {of as observableOf} from 'rxjs/observable/of';\n\n\nexport const /** @type {?} */ MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MatDialog {\nprivate _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\n    const /** @type {?} */ parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} location\n * @param {?} _scrollStrategy\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\n       location: Location,\nprivate _scrollStrategy,\nprivate _parentDialog: MatDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig): MatDialogRef<T> {\n\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\n\n    // If there's a dialog that is in the process of being opened, return it instead.\n    if (inProgressDialog) {\n      return inProgressDialog;\n    }\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this.openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n/**\n * Finds an open dialog by its id.\n * @param {?} id ID to use when looking up the dialog.\n * @return {?}\n */\ngetDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MatDialogConfig): OverlayRef {\n    const /** @type {?} */ overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n/**\n * Creates an overlay config from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const /** @type {?} */ state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n/**\n * Attaches an MatDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MatDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const /** @type {?} */ dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, /** @type {?} */(( null)), /** @type {?} */((\n          <any>{ $implicit: config.data, dialogRef }))));\n    } else {\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this.openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MatDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialog.ctorParameters;\n/** @type {?} */\nMatDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMatDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMatDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMatDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMatDialog.prototype.afterAllClosed;\n/** @type {?} */\nMatDialog.prototype._overlay;\n/** @type {?} */\nMatDialog.prototype._injector;\n/** @type {?} */\nMatDialog.prototype._scrollStrategy;\n/** @type {?} */\nMatDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MatDialogConfig): MatDialogConfig {\n  return extendObject(new MatDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MatDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n\n   _matDialogClose: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MatDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n};\n}\n\nfunction MatDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogClose.ctorParameters;\n/** @type {?} */\nMatDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMatDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMatDialogClose.prototype.dialogResult;\n/** @type {?} */\nMatDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMatDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MatDialogTitle implements OnInit {\n   id = `mat-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MatDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MatDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogTitle.ctorParameters;\n/** @type {?} */\nMatDialogTitle.propDecorators;\n/** @type {?} */\nMatDialogTitle.prototype.id;\n/** @type {?} */\nMatDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MatDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MatDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\nexport class MatDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatDialogModule,MAT_DIALOG_DATA,MAT_DIALOG_SCROLL_STRATEGY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,MatDialog,throwMatDialogContentAlreadyAttachedError,MatDialogContainer,MatDialogClose,MatDialogTitle,MatDialogContent,MatDialogActions,DialogRole,DialogPosition,MatDialogConfig,MatDialogRef} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {catchOperator, doOperator, finallyOperator, map, RxChain, share} from '@angular/cdk/rxjs';\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MatIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <mat-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MatIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMatIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMatIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMatIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMatIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMatIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMatIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMatIconRegistry.prototype._http;\n/** @type {?} */\nMatIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MatIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MatIconRegistry(http, sanitizer);\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {first} from '@angular/cdk/rxjs';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n/**\n * \\@docs-private\n */\nexport class MatIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconBase.prototype._renderer;\n/** @type {?} */\nMatIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _iconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _iconRegistry: MatIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return /** @type {?} */(( <[string, string]>parts));\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        first.call(this._iconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._renderer.appendChild(this._elementRef.nativeElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _clearSvgElement() {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MatIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MatIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIcon.ctorParameters;\n/** @type {?} */\nMatIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMatIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMatIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMatIcon.prototype.fontIcon;\n/** @type {?} */\nMatIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMatIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMatIcon.prototype._iconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MatIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatIconModule,MatIconBase,_MatIconMixinBase,MatIcon,getMatIconNameNotFoundError,getMatIconNoHttpProviderError,getMatIconFailedToSanitizeError,MatIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MatError {\n   id: string = `mat-error-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MatError_tsickle_Closure_declarations() {\n/** @type {?} */\nMatError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatError.ctorParameters;\n/** @type {?} */\nMatError.propDecorators;\n/** @type {?} */\nMatError.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MatFormField`.\n * @abstract\n */\nexport abstract class MatFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n * needs to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the `MatFormField` label should try to float.\n */\nreadonly shouldPlaceholderFloat: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n * based on their control type. The form field will add a class,\n * `mat-form-field-type-{{controlType}}` to its root element.\n */\nreadonly controlType?: string;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Handles a click on the control's container.\n * @abstract\n * @param {?} event\n * @return {?}\n */\nonContainerClick(event: MouseEvent) {}\n}\n\nfunction MatFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMatFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n * needs to run change detection.\n * @type {?}\n */\nMatFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMatFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMatFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMatFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMatFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMatFormFieldControl.prototype.empty;\n/**\n * Whether the `MatFormField` label should try to float.\n * @type {?}\n */\nMatFormFieldControl.prototype.shouldPlaceholderFloat;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMatFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMatFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMatFormFieldControl.prototype.errorState;\n/**\n * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n * based on their control type. The form field will add a class,\n * `mat-form-field-type-{{controlType}}` to its root element.\n * @type {?}\n */\nMatFormFieldControl.prototype.controlType;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MatHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MatHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHint.ctorParameters;\n/** @type {?} */\nMatHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMatHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMatHint.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, InjectionToken, NgModule} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matCellDef],\n  [matColumnDef],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matHeaderCellDef],\n  [matHeaderRowDef],\n  [matLine],\n  [matRowDef],\n  [matStepLabel],\n  [matStepperNext],\n  [matStepperPrevious],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  [matInput],\n  [matPrefix],\n  [matSuffix],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-header-row,\n  mat-hint,\n  mat-horizontal-stepper,\n  mat-icon,\n  mat-input-container,\n  mat-form-field,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-step,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar,\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdCellDef],\n  [mdColumnDef],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdHeaderCellDef],\n  [mdHeaderRowDef],\n  [mdLine],\n  [mdRowDef],\n  [mdStepLabel],\n  [mdStepperNext],\n  [mdStepperPrevious],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  [mdInput],\n  [mdPrefix],\n  [mdSuffix],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-header-row,\n  md-hint,\n  md-horizontal-stepper,\n  md-icon,\n  md-input-container,\n  md-form-field,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-step,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar,\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ntoIso8601(date: D) {}\n/**\n * Creates a date from an RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339).\n * @abstract\n * @param {?} iso8601String The ISO date string to create a date from\n * @return {?} The date created from the ISO date string.\n */\nfromIso8601(iso8601String: string) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the pointer is currently being held on the trigger or not.\n */\nprivate _isPointerDown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('touchstart', this.onTouchstart.bind(this));\n\n      this._triggerEvents.set('mouseup', this.onPointerUp.bind(this));\n      this._triggerEvents.set('touchend', this.onPointerUp.bind(this));\n\n      this._triggerEvents.set('mouseleave', this.onPointerLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Function being called whenever the trigger is being pressed.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Function being called whenever the pointer is being released.\n * @return {?}\n */\nprivate onPointerUp() {\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Function being called whenever the pointer leaves the trigger.\n * @return {?}\n */\nprivate onPointerLeave() {\n    if (this._isPointerDown) {\n      this.onPointerUp();\n    }\n  }\n/**\n * Function being called whenever the trigger is being touched.\n * @param {?} event\n * @return {?}\n */\nprivate onTouchstart(event: TouchEvent) {\n    if (!this.rippleDisabled) {\n      const {pageX, pageY} = event.touches[0];\n      this._isPointerDown = true;\n      this.fadeInRipple(pageX, pageY, this.rippleConfig);\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the pointer is currently being held on the trigger or not.\n * @type {?}\n */\nRippleRenderer.prototype._isPointerDown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl. ' +\n      'Did you forget to add matInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DateAdapter} from '@angular/material/core';\n/**\n * Function that attempts to coerce a value to a date using a DateAdapter. Date instances, null,\n * and undefined will be passed through. Empty strings will be coerced to null. Valid ISO 8601\n * strings (https://www.ietf.org/rfc/rfc3339.txt) will be coerced to dates. All other values will\n * result in an error being thrown.\n * @throws Throws when the value cannot be coerced.\n * @template D\n * @param {?} adapter The date adapter to use for coercion\n * @param {?} value The value to coerce.\n * @return {?} A date object coerced from the value.\n */\nexport function coerceDateProperty<D>(adapter: DateAdapter<D>, value: any): D | null {\n  if (typeof value === 'string') {\n    if (value == '') {\n      value = null;\n    } else {\n      value = adapter.fromIso8601(value) || value;\n    }\n  }\n  if (value == null || adapter.isDateInstance(value)) {\n    return value;\n  }\n  throw Error(`Datepicker: Value must be either a date object recognized by the DateAdapter or ` +\n              `an ISO 8601 string. Instead got: ${value}`);\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string): Date | null {\n    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n    // string is the right format first.\n    if (ISO_8601_REGEX.test(iso8601String)) {\n      let /** @type {?} */ d = new Date(iso8601String);\n      if (this.isValid(d)) {\n        return d;\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\nexport {MatDateFormats,MAT_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MatNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MAT_ERROR_GLOBAL_OPTIONS =\n    new InjectionToken<ErrorOptions>('mat-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nexport class MatLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMatLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MatLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MatLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MatLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMatLineSetter.prototype._lines;\n/** @type {?} */\nMatLineSetter.prototype._renderer;\n/** @type {?} */\nMatLineSetter.prototype._element;\n}\n\nexport class MatLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\nexport class MatRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if ((changes['trigger'] || changes['_matRippleTrigger']) && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['matRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['matRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['matRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MatRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRipple.ctorParameters;\n/** @type {?} */\nMatRipple.propDecorators;\n/** @type {?} */\nMatRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMatRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMatRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMatRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMatRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMatRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMatRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMatRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMatRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport {MatRipple, RippleGlobalOptions, MAT_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MatRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MatPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MatPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MatPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMatPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMatPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMatPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MatPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPseudoCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MatPseudoCheckboxState,MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MatOptgroupBase { }\nexport const /** @type {?} */ _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `mat-option`.\n */\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MatOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMatOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatOptgroup.ctorParameters;\n/** @type {?} */\nMatOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMatOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMatOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MatOption when selected or deselected.\n */\nexport class MatOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MatOption,\npublic isUserInput = false) { }\n}\n\nfunction MatOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMatOptionSelectionChange.prototype.source;\n/** @type {?} */\nMatOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\nexport class MatOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `mat-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MatOptgroup) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\n    return this.viewValue;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let /** @type {?} */ optionsArray = options.toArray();\n      let /** @type {?} */ groups = optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MatOptgroup, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MatOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMatOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatOption.ctorParameters;\n/** @type {?} */\nMatOption.propDecorators;\n/** @type {?} */\nMatOption.prototype._selected;\n/** @type {?} */\nMatOption.prototype._active;\n/** @type {?} */\nMatOption.prototype._multiple;\n/** @type {?} */\nMatOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMatOption.prototype._disabled;\n/** @type {?} */\nMatOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMatOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMatOption.prototype.onSelectionChange;\n/** @type {?} */\nMatOption.prototype._element;\n/** @type {?} */\nMatOption.prototype._changeDetectorRef;\n/** @type {?} */\nMatOption.prototype.group;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["changeDetection","ChangeDetectionStrategy","OnPush","MatCalendar","ctorParameters","type","ChangeDetectorRef","propDecorators","startAt","Input","startView","selected","minDate","dateFilter","selectedChange","Output","userSelection","monthView","ViewChild","args","MatMonthView","yearView","MatYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","InjectionToken","MatDatepickerContent","prototype","ngAfterContentInit","[class.mat-datepicker-content-touch]","_calendar","this","_viewContainerRef","_scrollStrategy","_dateAdapter","touchUi","_disabledChange","Subject","_startAt","_datepickerInput","value","get","undefined","_disabled","disabled","newValue","coerceBooleanProperty","next","enumerable","_validSelected","set","configurable","Object","defineProperty","MatDatepicker","min","max","ngOnDestroy","close","_inputSubscription","unsubscribe","_select","date","oldValue","_selected","sameDate","input","_valueChange","subscribe","_this","Error","_document","_focusedElementBeforeOpen","activeElement","_openAsDialog","_openAsPopup","opened","_dialogRef","_calendarPortal","isAttached","detach","focus","_dialog","open","direction","_dir","viewContainerRef","afterClosed","componentInstance","datepicker","_createPopup","_popupRef","hasAttached","attach","instance","first$1","call","_ngZone","onStable","asObservable","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","scrollStrategy","withFallbackPosition","originX","originY","overlayX","overlayY","decorators","Component","selector","template","encapsulation","ViewEncapsulation","None","ViewContainerRef","Inject","DateAdapter","Optional","Directionality","DOCUMENT","selectedChanged","MAT_DATEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","useExisting","forwardRef","MatDatepickerInput","multi","MatDatepickerInputEvent","target","targetElement","_renderer","_dateFormats","_formField","dateInput","EventEmitter","_onTouched","_parseValidator","_lastValueValid","matDatepickerParse","text","_elementRef","nativeElement","_minValidator","control","controlValue","coerceDateProperty","compareDate","matDatepickerMax","actual","_filterValidator","_validator","Validators","compose","_maxValidator","_localeSubscription","localeChanges","registerDatepicker","_datepicker","_registerInput","_validatorOnChange","oldDate","_value","setProperty","format","display","_min","_max","emit","_datepickerSubscription","_cvaOnChange","dateChange","complete","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","underlineRef","writeValue","registerOnChange","registerOnTouched","setDisabledState","event","altKey","keyCode","DOWN_ARROW","preventDefault","_onInput","parse","isValid","_getValidDateOrNull","_onChange","isDateInstance","obj","Directive","host","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","exportAs","ElementRef","Renderer2","MAT_DATE_FORMATS","MatFormField","matDatepicker","matDatepickerFilter","MatDatepickerToggle","_intl","_changeDetectorRef","MatPlaceholder","MatPrefix","MatSuffix","_subscriptAnimationState","floatPlaceholder","_placeholderOptions","float","_hintLabel","_processHints","_floatPlaceholder","markForCheck","_validateControlChild","_control","controlType","startWith","stateChanges","_syncDescribedByIds","_hintChildren","changes","ngAfterContentChecked","detectChanges","_shouldForward","prop","ngControl","_hasPlaceholder","placeholder","_placeholderChild","_errorChildren","length","errorState","_placeholder","_canPlaceholderFloat","_showAlwaysAnimate","first","fromEvent","_validatePlaceholders","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","forEach","hint","align","hintLabel","getMatFormFieldDuplicatedHintError","ids","_getDisplayedMessages","startHint","push","id","_hintLabelId","endHint","map","error","setDescribedByIds","getMatFormFieldMissingControlError","state","style","opacity","transform","transition","animate","class","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-focused]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-invalid]","preserveWhitespaces","MAT_PLACEHOLDER_GLOBAL_OPTIONS","color","dividerColor","hideRequiredMarker","_connectionContainerRef","ContentChildren","MatHint","_suffixChildren","MatFormFieldModule","MatDatepickerIntl","ariaLabel","enabled","MatCalendarCell","selectedValueChange","cell","MatCalendarBody","rows","numCols","cellNumber","rowIndex","colIndex","_firstRowOffset","styles","label","todayValue","selectedValue","labelMinRequiredCells","allowDisabledSelection","activeCell","createMissingDateImplError","firstDayOfWeek","getFirstDayOfWeek","longWeekdays","getDayOfWeekNames","weekdays","long","i","narrow","narrowWeekdays","_weekdays","slice","concat","oldActiveDate","_activeDate","today","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_init","selectedMonth","getMonth","activeDate","selectedDate","createDate","selectedYear","_todayDate","_firstWeekOffset","getDayOfWeek","firstOfMonth","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","getDate","d1","d2","getYear","_selectedMonth","_getMonthInCurrentYear","_months","row","month","_createCellForMonth","monthNames","monthName","monthYearA11yLabel","toLocaleUpperCase","_isMonthEnabled","_minDate","_maxDate","_clampedActiveDate","clampDate","maxDate","getYearName","_monthView","prevMonthLabel","prevYearLabel","nextMonthLabel","nextYearLabel","ngOnChanges","change","firstChange","_monthSelected","_previousClicked","_nextClicked","addCalendarMonths","addCalendarYears","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_focusActiveCell","querySelector","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","UP_ARROW","HOME","END","PAGE_UP","ENTER","_dateFilterForViews","_prevMonthInSameCol","_nextMonthInSameCol","increment","_MatButtonMixinBase","mixinColor","mixinDisabled","base","_super","_i","arguments","apply","_disableRipple","tslib_1.__extends","class_3","MatButtonBase","MatButton","renderer","elementRef","_platform","_focusMonitor","_isIconButton","_hasAttributeWithPrefix","monitor","stopMonitoring","_getHostElement","_isRippleDisabled","disableRipple","unprefixedAttributeNames","isBrowser","MatAnchor","platform","focusMonitor","_haltDisabledEvents","[attr.tabindex]","[attr.aria-disabled]","inputs","Platform","FocusMonitor","MatButtonModule","NgModule","imports","CommonModule","MatRippleModule","MatCommonModule","MatMiniFab","MatDialogConfig","role","panelClass","disableClose","width","height","data","ariaDescribedBy","MatDialogContainer","_focusTrapFactory","_isAnimating","attachComponentPortal","portal","_portalHost","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","attachTemplatePortal","_trapFocus","_focusTrap","focusInitialElementWhenReady","then","hasMovedFocus","_restoreFocus","toFocus","_elementFocusedBeforeDialogWasOpened","_onAnimationDone","toState","_onAnimationStart","_state","BasePortalHost","tabindex","[attr.role]","[attr.aria-labelledby]","[attr.aria-describedby]","[@slideDialog]","(@slideDialog.start)","FocusTrapFactory","MatDialogRef","_overlayRef","_containerInstance","_beforeClose","RxChain","from","_animationStateChanged","filter","phaseName","_afterOpen","dispose","dialogResult","_result","_startExitAnimation","_afterClosed","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","getConfig","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MatDialog","_overlay","_injector","location","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","afterAllClosed","defer","openDialogs","closeAll","parent","_afterAllClosed","inProgressDialog","overlayRef","_createOverlay","config","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","componentOrTemplateRef","afterOpen","getDialogById","find","dialog","_getOverlayConfig","dialogConfig","state$$1","global","overlay","containerPortal","ComponentPortal","containerRef","_config","TemplateRef","TemplatePortal","$implicit","injector","_createInjector","contentRef","updateSize","userInjector","injectionTokens","WeakMap","MAT_DIALOG_DATA","_removeOpenDialog","index","indexOf","splice","topDialog","SkipSelf","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","_matDialogCloseResult","currentValue","[attr.aria-label]","MatDialogTitle","ngOnInit","MatDialogContent","MatDialogActions","MatDialogModule","PortalModule","SvgIconConfig","url","svgElement","MatIconRegistry","_http","_sanitizer","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","key","iconKey","_svgIconConfigs","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","_iconSetConfigs","registerFontClassAlias","alias","className","_fontCssClassesByAlias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","_cachedIconsByUrl","of","cloneSvg","_loadSvgIconFromConfig","doOperator","svg","getNamedSvgIcon","name","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","_loadSvgIconSetFromConfig","iconSetConfig","catchOperator","err","console","log","result","forkJoin","Observable","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_svgElementFromString","iconSet","iconNode","tagName","toLowerCase","_setSvgAttributes","cloneNode","_toSvgElement","str","div","document","createElement","element","getAttribute","setAttribute","inProgressFetch","_inProgressUrlFetches","response","finallyOperator","delete","share","Injectable","DomSanitizer","deps","Http","useFactory","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","MatIcon","parts","split","svgIcon","_usingFontIcon","_updateFontIconClasses","_setSvgElement","_clearSvgElement","appendChild","layoutElement","childCount","childNodes","removeChild","elem","fontSetClass","fontSet","_iconRegistry","_previousFontSetClass","removeClass","addClass","fontIcon","_previousFontIconClass","_MatIconMixinBase","Attribute","MatIconModule","MatError","nextUniqueId","[attr.id]","MatFormFieldControl","onContainerClick","nextUniqueId$2","[class.mat-right]","[attr.align]","__extends","d","b","__","constructor","extendStatics","create","class_1","class_2","_color","parentDispatcher","UniqueSelectionDispatcher","sources","source","enforceStyleRecalculation","window","getComputedStyle","getPropertyValue","distX","Math","abs","x","rect","distY","y","sqrt","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","scrollStrategies","block","getMatIconNameNotFoundError","getMatIconNoHttpProviderError","parentRegistry","http","sanitizer","adapter","fromIso8601","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","reposition","setPrototypeOf","__proto__","Array","p","hasOwnProperty","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","AnimationDurations","EXITING","_listeners","listener","_a","listen","registered","MAT_DATE_LOCALE","_localeChanges","getMonthNames","clone","years","locale","second","DEFAULT_DATE_NAMES","range","String","short","useUtcForDisplay","setLocale","matDateLocale","NativeDateAdapter","getDay","SUPPORTS_INTL_API","dtf_1","Intl","DateTimeFormat","_stripDirectionalityCharacters","Date","DEFAULT_MONTH_NAMES","dtf_3","weekday","dtf","year","_createDateWithOverflow","UTC","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","displayFormat","extendObject","timeZone","months","newDate","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","iso8601String","ISO_8601_REGEX","test","setFullYear","n","MAT_NATIVE_DATE_FORMATS","monthYearLabel","dateA11yLabel","day","NativeDateModule","MAT_DATE_LOCALE_PROVIDER","MatNativeDateModule","GestureConfig","events","_hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","add","inheritances","item","recognizer","recognizeWith","MatLine","MatLineModule","declarations","RippleState","HIDDEN","FADING_IN","RippleRef","fadeOut","fadeOutRipple","RippleRenderer","_ruler","_isPointerDown","rippleConfig","rippleDisabled","_triggerEvents","onMousedown","bind","setTriggerElement","_containerElement","containerRect","getBoundingClientRect","centered","pageX","pageY","scrollPosition","getViewportScrollPosition","radius","distanceToFurthestCorner","ripple","runTimeoutOutsideZone","_activeRipples","rippleRef","rippleEl","transitionDuration","RIPPLE_FADE_OUT_DURATION","FADING_OUT","_triggerElement","removeEventListener","runOutsideAngular","addEventListener","onPointerUp","persistent","VISIBLE","onPointerLeave","onTouchstart","touches","fadeInRipple","MatRipple","ngZone","ruler","globalOptions","trigger","_rippleRenderer","speedFactor","_globalOptions","baseSpeedFactor","[class.mat-ripple-unbounded]","NgZone","ViewportRuler","providers","VIEWPORT_RULER_PROVIDER","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckboxModule","exports","MatOptgroup","_labelId","_uniqueOptgroupIdCounter","_MatOptgroupMixinBase","[class.mat-optgroup-disabled]","_uniqueIdCounter","isUserInput","MatOptionSelectionChange","MatOption","_element","group","_active","_multiple","_id","onSelectionChange","select","deselect","_handleKeydown","_selectViaInteraction","_emitSelectionChangeEvent","countGroupLabelsBeforeOption","optionIndex","options","optionGroups","optionsArray","groups","groupCounter","[id]","[attr.aria-selected]","[class.mat-option-disabled]","(click)","MatOptionModule","DEFAULT_ROUND_BUTTON_COLOR","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatFab","button","anchor","Self"],"mappings":"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"}