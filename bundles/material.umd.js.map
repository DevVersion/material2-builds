{"version":3,"file":"material.umd.js","sources":["../../src/lib/index.ts","../../src/lib/module.ts","../../src/lib/paginator/index.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/sort/index.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/table/index.ts","../../src/lib/table/row.ts","../../src/lib/table/cell.ts","../../src/lib/table/table.ts","../../src/lib/expansion/index.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/accordion-item.ts","../../src/lib/expansion/accordion.ts","../../src/lib/datepicker/index.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/autocomplete/index.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/dialog/index.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/menu/index.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/tooltip/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/toolbar/index.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/tabs/index.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/snack-bar/index.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/core/portal/portal-injector.ts","../../src/lib/input/index.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input.ts","../../src/lib/form-field/index.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/form-field/error.ts","../../src/lib/input/input-errors.ts","../../src/lib/progress-bar/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/icon/index.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/chips/index.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip.ts","../../src/lib/card/index.ts","../../src/lib/card/card.ts","../../src/lib/grid-list/index.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/list/index.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list.ts","../../src/lib/sidenav/index.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/slider/index.ts","../../src/lib/slider/slider.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/select/index.ts","../../src/lib/select/select.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/select-animations.ts","../../src/lib/radio/index.ts","../../src/lib/radio/radio.ts","../../src/lib/checkbox/index.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/button/index.ts","../../src/lib/button/button.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/button-toggle/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/core/core.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/placeholder/placeholder-options.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/style/index.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/option/index.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/line/line.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/version.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {VERSION,coerceBooleanProperty,coerceNumberProperty,ObserversModule,ObserveContent,SelectionModel,Dir,Direction,Directionality,BidiModule,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MATERIAL_SANITY_CHECKS,FloatPlaceholderType,PlaceholderOptions,MD_PLACEHOLDER_GLOBAL_OPTIONS,ErrorStateMatcher,ErrorOptions,MD_ERROR_GLOBAL_OPTIONS,defaultErrorStateMatcher,showOnDirtyErrorStateMatcher,MdCoreModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,PlatformModule,Platform,getSupportedInputTypes,OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,ComponentType,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,VIEWPORT_RULER_PROVIDER,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollingVisibility,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,A,Z,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdPseudoCheckboxModule,MdPseudoCheckboxState,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS,MaterialModule,MdAutocompleteModule,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MdButtonToggleModule,ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdChipsModule,MdChipList,MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove,MdChipInputEvent,MdChipInput,MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,_MdCheckboxRequiredValidator,MD_CHECKBOX_REQUIRED_VALIDATOR,MdCheckboxRequiredValidator,MdDatepickerModule,MdCalendar,MdCalendarCell,MdCalendarBody,MD_DATEPICKER_SCROLL_STRATEGY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,MdDatepickerContent,MdDatepicker,MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInputEvent,MdDatepickerInput,MdDatepickerIntl,MdDatepickerToggle,MdMonthView,MdYearView,MdDialogModule,MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MdExpansionModule,CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdFormFieldModule,MdError,MdFormField,MdFormFieldControl,getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError,MdHint,MdPlaceholder,MdPrefix,MdSuffix,MdGridListModule,MdGridTile,MdGridList,MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MdInputModule,MdTextareaAutosize,MdInput,getMdInputUnsupportedTypeError,MdListModule,MdListBase,_MdListMixinBase,MdListItemBase,_MdListItemMixinBase,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdSelectionListBase,_MdSelectionListMixinBase,MdSelectionListOptionEvent,MdListOption,MdSelectionList,MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuDefaultOptions,MD_MENU_DEFAULT_OPTIONS,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MdPaginatorModule,PageEvent,MdPaginator,MdPaginatorIntl,MdProgressBarModule,MdProgressBar,MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect,MdSidenavModule,throwMdDuplicatedDrawerError,MdDrawerToggleResult,MdDrawer,MdDrawerContainer,MdSidenav,MdSidenavContainer,MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle,MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MD_SNACK_BAR_DATA,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MdSortModule,SortDirection,MdSortHeader,MdSortHeaderIntl,MdSortable,Sort,MdSort,MdTableModule,_MdCellDef,_MdHeaderCellDef,_MdColumnDef,_MdHeaderCell,_MdCell,MdCellDef,MdHeaderCellDef,MdColumnDef,MdHeaderCell,MdCell,_MdTable,MdTable,_MdHeaderRowDef,_MdCdkRowDef,_MdHeaderRow,_MdRow,MdHeaderRowDef,MdRowDef,MdHeaderRow,MdRow,MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabNav,MdTabLink,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroupBase,_MdTabGroupMixinBase,MdTabGroup,MdTabNavBase,_MdTabNavMixinBase,MdTabLinkBase,_MdTabLinkMixinBase,MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar,MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,TOOLTIP_PANEL_CLASS,getMdTooltipInvalidPositionError,MD_TOOLTIP_SCROLL_STRATEGY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MdTooltip,TooltipVisibility,TooltipComponent} from './public_api';\n\nexport {mixinColor as ɵv} from './core/common-behaviors/color';\nexport {mixinDisableRipple as ɵw} from './core/common-behaviors/disable-ripple';\nexport {mixinDisabled as ɵu} from './core/common-behaviors/disabled';\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵb} from './core/coordination/unique-selection-dispatcher';\nexport {MdDateFormats as ɵx} from './core/datetime/date-formats';\nexport {RippleRenderer as ɵa} from './core/ripple/ripple-renderer';\nexport {AccordionItemBase as ɵc,_AccordionItemMixinBase as ɵd} from './expansion/accordion-item';\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵe} from './expansion/expansion-panel';\nexport {MdGridAvatarCssMatStyler as ɵg,MdGridTileFooterCssMatStyler as ɵi,MdGridTileHeaderCssMatStyler as ɵh,MdGridTileText as ɵf} from './grid-list/grid-tile';\nexport {MdMenuItemBase as ɵj,_MdMenuItemMixinBase as ɵk} from './menu/menu-item';\nexport {MD_MENU_SCROLL_STRATEGY as ɵl,MD_MENU_SCROLL_STRATEGY_PROVIDER as ɵn,MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵm} from './menu/menu-trigger';\nexport {MdTabBase as ɵs,_MdTabMixinBase as ɵt} from './tabs/tab';\nexport {MdTabHeaderBase as ɵo,_MdTabHeaderMixinBase as ɵp} from './tabs/tab-header';\nexport {MdTabLabelWrapperBase as ɵq,_MdTabLabelWrapperMixinBase as ɵr} from './tabs/tab-label-wrapper';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\n\nimport {MdCommonModule, MdRippleModule} from './core';\nimport {MdButtonToggleModule} from './button-toggle/index';\nimport {MdButtonModule} from './button/index';\nimport {MdCheckboxModule} from './checkbox/index';\nimport {MdRadioModule} from './radio/index';\nimport {MdSelectModule} from './select/index';\nimport {MdSlideToggleModule} from './slide-toggle/index';\nimport {MdSliderModule} from './slider/index';\nimport {MdSidenavModule} from './sidenav/index';\nimport {MdListModule} from './list/index';\nimport {MdGridListModule} from './grid-list/index';\nimport {MdCardModule} from './card/index';\nimport {MdChipsModule} from './chips/index';\nimport {MdIconModule} from './icon/index';\nimport {MdProgressSpinnerModule} from './progress-spinner/index';\nimport {MdProgressBarModule} from './progress-bar/index';\nimport {MdInputModule} from './input/index';\nimport {MdSnackBarModule} from './snack-bar/index';\nimport {MdTabsModule} from './tabs/index';\nimport {MdToolbarModule} from './toolbar/index';\nimport {MdTooltipModule} from './tooltip/index';\nimport {MdMenuModule} from './menu/index';\nimport {MdDialogModule} from './dialog/index';\nimport {PlatformModule} from './core/platform/index';\nimport {MdAutocompleteModule} from './autocomplete/index';\nimport {StyleModule} from './core/style/index';\nimport {MdDatepickerModule} from './datepicker/index';\nimport {MdExpansionModule} from './expansion/index';\nimport {MdTableModule} from './table/index';\nimport {MdSortModule} from './sort/index';\nimport {MdPaginatorModule} from './paginator/index';\nimport {MdFormFieldModule} from './form-field/index';\n\nconst /** @type {?} */ MATERIAL_MODULES = [\n  MdAutocompleteModule,\n  MdButtonModule,\n  MdButtonToggleModule,\n  MdCardModule,\n  MdChipsModule,\n  MdCheckboxModule,\n  MdDatepickerModule,\n  MdTableModule,\n  MdDialogModule,\n  MdExpansionModule,\n  MdFormFieldModule,\n  MdGridListModule,\n  MdIconModule,\n  MdInputModule,\n  MdListModule,\n  MdMenuModule,\n  MdPaginatorModule,\n  MdProgressBarModule,\n  MdProgressSpinnerModule,\n  MdRadioModule,\n  MdRippleModule,\n  MdSelectModule,\n  MdSidenavModule,\n  MdSliderModule,\n  MdSlideToggleModule,\n  MdSnackBarModule,\n  MdSortModule,\n  MdTabsModule,\n  MdToolbarModule,\n  MdTooltipModule,\n  OverlayModule,\n  PortalModule,\n  BidiModule,\n  StyleModule,\n  A11yModule,\n  PlatformModule,\n  MdCommonModule,\n  ObserversModule\n];\n/**\n * @deprecated\n */\nexport class MaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: MATERIAL_MODULES,\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdButtonModule} from '../button/index';\nimport {MdSelectModule} from '../select/index';\nimport {MdPaginator} from './paginator';\nimport {MdPaginatorIntl} from './paginator-intl';\nimport {MdTooltipModule} from '../tooltip/index';\nexport class MdPaginatorModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdSelectModule,\n    MdTooltipModule,\n  ],\n  exports: [MdPaginator],\n  declarations: [MdPaginator],\n  providers: [MdPaginatorIntl],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorModule.ctorParameters;\n}\n\n\n\nexport {PageEvent,MdPaginator} from './paginator';\nexport {MdPaginatorIntl} from './paginator-intl';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {MdPaginatorIntl} from './paginator-intl';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * The default page size if there is no page size and there are no provided page size options.\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n/**\n * The current page index.\n */\npageIndex: number;\n/**\n * The current page size\n */\npageSize: number;\n/**\n * The current total number of items being paged\n */\nlength: number;\n}\n\nfunction PageEvent_tsickle_Closure_declarations() {\n/**\n * The current page index.\n * @type {?}\n */\nPageEvent.prototype.pageIndex;\n/**\n * The current page size\n * @type {?}\n */\nPageEvent.prototype.pageSize;\n/**\n * The current total number of items being paged\n * @type {?}\n */\nPageEvent.prototype.length;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport class MdPaginator implements OnInit, OnDestroy {\nprivate _initialized: boolean;\nprivate _intlChanges: Subscription;\n/**\n * The zero-based page index of the displayed list of items. Defaulted to 0.\n * @return {?}\n */\nget pageIndex(): number { return this._pageIndex; }\n/**\n * @param {?} pageIndex\n * @return {?}\n */\nset pageIndex(pageIndex: number) {\n    this._pageIndex = pageIndex;\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n/**\n * The length of the total number of items that are being paginated. Defaulted to 0.\n * @return {?}\n */\nget length(): number { return this._length; }\n/**\n * @param {?} length\n * @return {?}\n */\nset length(length: number) {\n    this._length = length;\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n/**\n * Number of items to display on a page. By default set to 50.\n * @return {?}\n */\nget pageSize(): number { return this._pageSize; }\n/**\n * @param {?} pageSize\n * @return {?}\n */\nset pageSize(pageSize: number) {\n    this._pageSize = pageSize;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSize: number;\n/**\n * The set of provided page size options to display to the user.\n * @return {?}\n */\nget pageSizeOptions(): number[] { return this._pageSizeOptions; }\n/**\n * @param {?} pageSizeOptions\n * @return {?}\n */\nset pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = pageSizeOptions;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSizeOptions: number[] = [];\n/**\n * Event emitted when the paginator changes the page size or page index.\n */\npage = new EventEmitter<PageEvent>();\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n */\n_displayedPageSizeOptions: number[];\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(public _intl: MdPaginatorIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * Advances to the next page if it exists.\n * @return {?}\n */\nnextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n/**\n * Move back to the previous page if it exists.\n * @return {?}\n */\npreviousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n/**\n * Whether there is a previous page.\n * @return {?}\n */\nhasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n/**\n * Whether there is a next page.\n * @return {?}\n */\nhasNextPage() {\n    const /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n/**\n * Changes the page size so that the first item displayed on the page will still be\n * displayed using the new page size.\n * \n * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n * switching so that the page size is 5 will set the third page as the current page so\n * that the 10th item will still be displayed.\n * @param {?} pageSize\n * @return {?}\n */\n_changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const /** @type {?} */ startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n/**\n * Updates the list of page size options to display to the user. Includes making sure that\n * the page size is an option and that the list is sorted.\n * @return {?}\n */\nprivate _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Emits an event notifying that a change of the paginator's properties has been triggered.\n * @return {?}\n */\nprivate _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-paginator, mat-paginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  providers: [\n    {provide: MATERIAL_COMPATIBILITY_MODE, useValue: false}\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdPaginatorIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pageIndex': [{ type: Input },],\n'length': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageSizeOptions': [{ type: Input },],\n'page': [{ type: Output },],\n};\n}\n\nfunction MdPaginator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginator.ctorParameters;\n/** @type {?} */\nMdPaginator.propDecorators;\n/** @type {?} */\nMdPaginator.prototype._initialized;\n/** @type {?} */\nMdPaginator.prototype._intlChanges;\n/** @type {?} */\nMdPaginator.prototype._pageIndex;\n/** @type {?} */\nMdPaginator.prototype._length;\n/** @type {?} */\nMdPaginator.prototype._pageSize;\n/** @type {?} */\nMdPaginator.prototype._pageSizeOptions;\n/**\n * Event emitted when the paginator changes the page size or page index.\n * @type {?}\n */\nMdPaginator.prototype.page;\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n * @type {?}\n */\nMdPaginator.prototype._displayedPageSizeOptions;\n/** @type {?} */\nMdPaginator.prototype._intl;\n/** @type {?} */\nMdPaginator.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * To modify the labels and text displayed, create a new instance of MdPaginatorIntl and\n * include it in a custom provider\n */\nexport class MdPaginatorIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the page size selector.\n */\nitemsPerPageLabel = 'Items per page:';\n/**\n * A label for the button that increments the current page.\n */\nnextPageLabel = 'Next page';\n/**\n * A label for the button that decrements the current page.\n */\npreviousPageLabel = 'Previous page';\n/**\n * A label for the range of items within the current page and the length of the whole list.\n */\ngetRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdPaginatorIntl.prototype.changes;\n/**\n * A label for the page size selector.\n * @type {?}\n */\nMdPaginatorIntl.prototype.itemsPerPageLabel;\n/**\n * A label for the button that increments the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.nextPageLabel;\n/**\n * A label for the button that decrements the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.previousPageLabel;\n/**\n * A label for the range of items within the current page and the length of the whole list.\n * @type {?}\n */\nMdPaginatorIntl.prototype.getRangeLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdSortHeader} from './sort-header';\nimport {MdSort} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\nexport {SortDirection} from './sort-direction';\nexport {MdSortHeader} from './sort-header';\nexport {MdSortHeaderIntl} from './sort-header-intl';\nexport {MdSortable,Sort,MdSort} from './sort';\nexport class MdSortModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [MdSort, MdSortHeader],\n  declarations: [MdSort, MdSortHeader],\n  providers: [MdSortHeaderIntl]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MdSort, MdSortable} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {getMdSortHeaderNotContainedWithinMdSortError} from './sort-errors';\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n * \n * Must be provided with an id and contained within a parent MdSort directive.\n * \n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport class MdSortHeader implements MdSortable {\nprivate _rerenderSubscription: Subscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n */\nid: string;\n/**\n * Sets the position of the arrow that displays when sorted.\n */\narrowPosition: 'before' | 'after' = 'after';\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n */\nstart: 'asc' | 'desc';\n/**\n * Overrides the disable clear value of the containing MdSort for this MdSortable.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _id() { return this.id; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _id(v: string) { this.id = v; }\n/**\n * @param {?} _intl\n * @param {?} changeDetectorRef\n * @param {?} _sort\n * @param {?} _cdkColumnDef\n */\nconstructor(public _intl: MdSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\npublic _sort: MdSort,\npublic _cdkColumnDef: CdkColumnDef) {\n    if (!_sort) {\n      throw getMdSortHeaderNotContainedWithinMdSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.mdSortChange, _intl.changes).subscribe(() => {\n      changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n/**\n * Whether this MdSortHeader is currently sorted in either ascending or descending order.\n * @return {?}\n */\n_isSorted() {\n    return this._sort.active == this.id && this._sort.direction;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-sort-header], [mat-sort-header]',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_sort.sort(this)',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSortHeaderIntl, },\n{type: ChangeDetectorRef, },\n{type: MdSort, decorators: [{ type: Optional }, ]},\n{type: CdkColumnDef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input, args: ['md-sort-header', ] },],\n'arrowPosition': [{ type: Input },],\n'start': [{ type: Input, args: ['start', ] },],\n'disableClear': [{ type: Input },],\n'_id': [{ type: Input, args: ['mat-sort-header', ] },],\n};\n}\n\nfunction MdSortHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeader.ctorParameters;\n/** @type {?} */\nMdSortHeader.propDecorators;\n/** @type {?} */\nMdSortHeader.prototype._rerenderSubscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n * @type {?}\n */\nMdSortHeader.prototype.id;\n/**\n * Sets the position of the arrow that displays when sorted.\n * @type {?}\n */\nMdSortHeader.prototype.arrowPosition;\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n * @type {?}\n */\nMdSortHeader.prototype.start;\n/** @type {?} */\nMdSortHeader.prototype._disableClear;\n/** @type {?} */\nMdSortHeader.prototype._intl;\n/** @type {?} */\nMdSortHeader.prototype._sort;\n/** @type {?} */\nMdSortHeader.prototype._cdkColumnDef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MdSortHeaderIntl and\n * include it in a custom provider.\n */\nexport class MdSortHeaderIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * ARIA label for the sorting button.\n */\nsortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeaderIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.changes;\n/**\n * ARIA label for the sorting button.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SortDirection} from './sort-direction';\nimport {getMdSortDuplicateMdSortableIdError, getMdSortHeaderMissingIdError} from './sort-errors';\n\nexport interface MdSortable {\n  id: string;\n  start: 'asc' | 'desc';\n  disableClear: boolean;\n}\n\nexport interface Sort {\n  active: string;\n  direction: SortDirection;\n}\n/**\n * Container for MdSortables to manage the sort state and provide default sort parameters.\n */\nexport class MdSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MdSortable>();\n/**\n * The id of the most recently sorted MdSortable.\n */\nactive: string;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MdSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n * May be overriden by the MdSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _matSortActive() { return this.active; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortActive(v) { this.active = v; }\n/**\n * @return {?}\n */\nget _matSortStart() { return this.start; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortStart(v) { this.start = v; }\n/**\n * @return {?}\n */\nget _matSortDirection() { return this.direction; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDirection(v) { this.direction = v; }\n/**\n * @return {?}\n */\nget _matSortDisableClear() { return this.disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDisableClear(v) { this.disableClear = v; }\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nmdSortChange = new EventEmitter<Sort>();\n/**\n * Register function to be used by the contained MdSortables. Adds the MdSortable to the\n * collection of MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MdSortable) {\n    if (!sortable.id) {\n      throw getMdSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getMdSortDuplicateMdSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n/**\n * Unregister function to be used by the contained MdSortables. Removes the MdSortable from the\n * collection of contained MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MdSortable) {\n    this.sortables.delete(sortable.id);\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MdSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.mdSortChange.next({active: this.active, direction: this.direction});\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MdSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSort], [matSort]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['mdSortActive', ] },],\n'start': [{ type: Input, args: ['mdSortStart', ] },],\n'direction': [{ type: Input, args: ['mdSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['mdSortDisableClear', ] },],\n'_matSortActive': [{ type: Input, args: ['matSortActive', ] },],\n'_matSortStart': [{ type: Input, args: ['matSortStart', ] },],\n'_matSortDirection': [{ type: Input, args: ['matSortDirection', ] },],\n'_matSortDisableClear': [{ type: Input, args: ['matSortDisableClear', ] },],\n'mdSortChange': [{ type: Output },],\n};\n}\n\nfunction MdSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSort.ctorParameters;\n/** @type {?} */\nMdSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMdSort.prototype.sortables;\n/**\n * The id of the most recently sorted MdSortable.\n * @type {?}\n */\nMdSort.prototype.active;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n * @type {?}\n */\nMdSort.prototype.start;\n/**\n * The sort direction of the currently active MdSortable.\n * @type {?}\n */\nMdSort.prototype.direction;\n/** @type {?} */\nMdSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMdSort.prototype.mdSortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getMdSortDuplicateMdSortableIdError(id: string): Error {\n  return Error(`Cannot have two MdSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderNotContainedWithinMdSortError(): Error {\n  return Error(`MdSortHeader must be placed within a parent element with the MdSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderMissingIdError(): Error {\n  return Error(`MdSortHeader must be provided with a unique id.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MdCell, MdHeaderCell, MdCellDef, MdHeaderCellDef, MdColumnDef} from './cell';\nimport {MdHeaderRow, MdRow, MdHeaderRowDef, MdRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\n\nexport {_MdCellDef,_MdHeaderCellDef,_MdColumnDef,_MdHeaderCell,_MdCell,MdCellDef,MdHeaderCellDef,MdColumnDef,MdHeaderCell,MdCell} from './cell';\nexport {_MdTable,MdTable} from './table';\nexport {_MdHeaderRowDef,_MdCdkRowDef,_MdHeaderRow,_MdRow,MdHeaderRowDef,MdRowDef,MdHeaderRow,MdRow} from './row';\nexport class MdTableModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CdkTableModule, CommonModule, MdCommonModule],\n  exports: [MdTable, MdCellDef, MdHeaderCellDef, MdColumnDef,\n    MdHeaderRowDef, MdRowDef,\n    MdHeaderCell, MdCell, MdHeaderRow, MdRow],\n  declarations: [MdTable, MdCellDef, MdHeaderCellDef, MdColumnDef,\n    MdHeaderRowDef, MdRowDef,\n    MdHeaderCell, MdCell, MdHeaderRow, MdRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CdkHeaderRow,\n  CdkRow,\n  CDK_ROW_TEMPLATE,\n  CdkRowDef,\n  CdkHeaderRowDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdHeaderRowDef = CdkHeaderRowDef;\nexport const /** @type {?} */ _MdCdkRowDef = CdkRowDef;\nexport const /** @type {?} */ _MdHeaderRow = CdkHeaderRow;\nexport const /** @type {?} */ _MdRow = CdkRow;\n/**\n * Header row definition for the md-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class MdHeaderRowDef extends _MdHeaderRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdHeaderRowDef], [matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MdHeaderRowDef}],\n  inputs: ['columns: mdHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the md-table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class MdRowDef extends _MdCdkRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdRowDef], [matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MdRowDef}],\n  inputs: ['columns: mdRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRowDef.ctorParameters;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdHeaderRow extends _MdHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'md-header-row, mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdRow extends _MdRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'md-row, mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, Renderer2} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdCellDef = CdkCellDef;\nexport const /** @type {?} */ _MdHeaderCellDef = CdkHeaderCellDef;\nexport const /** @type {?} */ _MdColumnDef = CdkColumnDef;\nexport const /** @type {?} */ _MdHeaderCell = CdkHeaderCell;\nexport const /** @type {?} */ _MdCell = CdkCell;\n/**\n * Cell definition for the md-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class MdCellDef extends _MdCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdCellDef], [matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MdCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCellDef.ctorParameters;\n}\n\n/**\n * Header cell definition for the md-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class MdHeaderCellDef extends _MdHeaderCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdHeaderCellDef], [matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MdHeaderCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCellDef.ctorParameters;\n}\n\n/**\n * Column definition for the md-table.\n * Defines a set of cells available for a table column.\n */\nexport class MdColumnDef extends _MdColumnDef {\n/**\n * Unique name for this column.\n */\nname: string;\n/**\n * @return {?}\n */\nget _matColumnDefName() { return this.name; }\n/**\n * @param {?} name\n * @return {?}\n */\nset _matColumnDefName(name) { this.name = name; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdColumnDef], [matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MdColumnDef}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['mdColumnDef', ] },],\n'_matColumnDefName': [{ type: Input, args: ['matColumnDef', ] },],\n};\n}\n\nfunction MdColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdColumnDef.ctorParameters;\n/** @type {?} */\nMdColumnDef.propDecorators;\n/**\n * Unique name for this column.\n * @type {?}\n */\nMdColumnDef.prototype.name;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MdHeaderCell extends _MdHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-header-cell, mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MdCell extends _MdCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-cell, mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport class MdTable<T> extends _MdTable<T> { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-table, mat-table',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTable_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTable.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule, StyleModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '../core';\nimport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\nimport {\n  MdExpansionPanel,\n  MdExpansionPanelActionRow,\n} from './expansion-panel';\nimport {\n  CdkAccordion,\n  MdAccordion,\n} from './accordion';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, CommonModule, StyleModule],\n  exports: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  declarations: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\n\nexport {\n  CdkAccordion,\n  MdAccordion,\n  MdAccordionDisplayMode\n} from './accordion';\nexport {AccordionItem} from './accordion-item';\nexport {\n  MdExpansionPanel,\n  MdExpansionPanelState,\n  MdExpansionPanelActionRow\n} from './expansion-panel';\nexport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {SPACE, ENTER} from '../core/keyboard/keycodes';\nimport {MdExpansionPanel, EXPANSION_PANEL_ANIMATION_TIMING} from './expansion-panel';\nimport {filter} from '../core/rxjs/index';\nimport {FocusOriginMonitor} from '../core/style/index';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * <md-expansion-panel-header> component.\n * \n * This component corresponds to the header element of an <md-expansion-panel>.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader implements OnDestroy {\nprivate _parentChangeSubscription: Subscription | null = null;\n/**\n * @param {?} panel\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic panel: MdExpansionPanel,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      filter.call(panel._inputChanges, changes => !!(changes.hideToggle || changes.disabled))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusOriginMonitor.monitor(_element.nativeElement, _renderer, false);\n  }\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\n    return this.panel.id;\n  }\n/**\n * Gets whether the expand indicator should be shown.\n * @return {?}\n */\n_showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._parentChangeSubscription) {\n      this._parentChangeSubscription.unsubscribe();\n      this._parentChangeSubscription = null;\n    }\n\n    this._focusOriginMonitor.stopMonitoring(this._element.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': '_getExpandedState()',\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({height: '48px'})),\n      state('expanded', style({height: '64px'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._parentChangeSubscription;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._renderer;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._element;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._focusOriginMonitor;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._changeDetectorRef;\n}\n\n/**\n * <md-panel-description> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-description, mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-title, mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  Input,\n  ViewEncapsulation,\n  Optional,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {MdAccordion} from './accordion';\nimport {AccordionItem} from './accordion-item';\nimport {UniqueSelectionDispatcher} from '../core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** MdExpansionPanel's states. */\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends AccordionItem implements OnChanges, OnDestroy {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n */\n_inputChanges = new Subject<SimpleChanges>();\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Determines whether the expansion panel should have spacing between it and its siblings.\n * @return {?}\n */\n_hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n\n    return false;\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._inputChanges.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'md-expansion-panel, mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n * @type {?}\n */\nMdExpansionPanel.prototype._inputChanges;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row, md-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Output,\n  EventEmitter,\n  Input,\n  Injectable,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '../core';\nimport {CdkAccordion} from './accordion';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * \\@docs-private\n */\nexport class AccordionItemBase { }\nexport const /** @type {?} */ _AccordionItemMixinBase = mixinDisabled(AccordionItemBase);\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem extends _AccordionItemMixinBase implements OnDestroy, CanDisable {\n/**\n * Event emitted every time the MdAccordionChild is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the MdAccordionChild is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the MdAccordionChild is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique MdAccordionChild id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the MdAccordionChild is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n * the name value is the id of the accordion.\n */\nconst accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\nprivate _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n\n    super();\n\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n  }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the MdAccordionChild is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the MdAccordionChild is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the MdAccordionChild is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique MdAccordionChild id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._changeDetectorRef;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** MdAccordion's display modes. */\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-accordion, [cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion, md-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdMonthView} from './month-view';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {StyleModule} from '../core';\nimport {MdCalendarBody} from './calendar-body';\nimport {MdYearView} from './year-view';\nimport {\n  MdDatepicker,\n  MdDatepickerContent,\n  MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n} from './datepicker';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {MdDialogModule} from '../dialog/index';\nimport {MdCalendar} from './calendar';\nimport {MdDatepickerToggle} from './datepicker-toggle';\nimport {MdButtonModule} from '../button/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {MdIconModule} from '../icon/index';\n\n\nexport {MdCalendar} from './calendar';\nexport {MdCalendarCell,MdCalendarBody} from './calendar-body';\nexport {MD_DATEPICKER_SCROLL_STRATEGY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,MdDatepickerContent,MdDatepicker} from './datepicker';\nexport {MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInputEvent,MdDatepickerInput} from './datepicker-input';\nexport {MdDatepickerIntl} from './datepicker-intl';\nexport {MdDatepickerToggle} from './datepicker-toggle';\nexport {MdMonthView} from './month-view';\nexport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdDialogModule,\n    MdIconModule,\n    OverlayModule,\n    StyleModule,\n    A11yModule,\n  ],\n  exports: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  declarations: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  providers: [\n    MdDatepickerIntl,\n    MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MdDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ViewEncapsulation,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nexport class MdDatepickerToggle<D> implements OnDestroy {\nprivate _intlChanges: Subscription;\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * Whether the toggle button is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this.datepicker.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\nprivate _disabled: boolean;\n/**\n * @param {?} _intl\n * @param {?} changeDetectorRef\n */\nconstructor(public _intl: MdDatepickerIntl, changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-toggle, mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['for', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/** @type {?} */\nMdDatepickerToggle.prototype._intlChanges;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._disabled;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdFormField} from '../form-field/index';\nimport {DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MdDatepickerInputEvent instead.\n */\nexport class MdDatepickerInputEvent<D> {\n/**\n * The new value for the target datepicker input.\n */\nvalue: D | null;\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nconstructor(public target: MdDatepickerInput<D>,\npublic targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\nfunction MdDatepickerInputEvent_tsickle_Closure_declarations() {\n/**\n * The new value for the target datepicker input.\n * @type {?}\n */\nMdDatepickerInputEvent.prototype.value;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.target;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.targetElement;\n}\n\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) { this.mdDatepicker = value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this.mdDatepickerFilter = filter;\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\n    return this._getValidDateOrNull(this._dateAdapter.parse(\n        this._elementRef.nativeElement.value, this._dateFormats.parse.dateInput));\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\n    if (value != null && !this._dateAdapter.isDateInstance(value)) {\n      throw Error('Datepicker: value not recognized as a date object by DateAdapter.');\n    }\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n\n    let /** @type {?} */ oldDate = this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D | null { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D | null) {\n    this._min = value;\n    this._validatorOnChange();\n  }\nprivate _min: D | null;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D | null { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D | null) {\n    this._max = value;\n    this._validatorOnChange();\n  }\nprivate _max: D | null;\n/**\n * Whether the datepicker-input is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\nprivate _disabled: boolean;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n */\ndateChange = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when an `input` event is fired on this `<input>`.\n */\ndateInput = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription: Subscription;\n/**\n * The form control validator for whether the input parses.\n */\nprivate _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'mdDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.min || !control.value ||\n        this._dateAdapter.compareDate(this.min, control.value) <= 0) ?\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': control.value}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.max || !control.value ||\n        this._dateAdapter.compareDate(this.max, control.value) >= 0) ?\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': control.value}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return !this._dateFilter || !control.value || this._dateFilter(control.value) ?\n        null : {'mdDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * Whether the last value set on the input was valid.\n */\nprivate _lastValueValid = false;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdFormField\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdFormField: MdFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._datepickerSubscription) {\n      this._datepickerSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._mdFormField ? this._mdFormField.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @return {?}\n */\n_onChange() {\n    this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @param {?} obj The object to check.\n * @return {?} The given object if it is both a date instance and valid, otherwise null.\n */\nprivate _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdDatepicker], input[matDatepicker]',\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.getISODateString(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.getISODateString(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'mdDatepickerInput',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'disabled': [{ type: Input },],\n'dateChange': [{ type: Output },],\n'dateInput': [{ type: Output },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/** @type {?} */\nMdDatepickerInput.prototype._disabled;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateChange;\n/**\n * Emits when an `input` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateInput;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/**\n * The form control validator for whether the input parses.\n * @type {?}\n */\nMdDatepickerInput.prototype._parseValidator;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/**\n * Whether the last value set on the input was valid.\n * @type {?}\n */\nMdDatepickerInput.prototype._lastValueValid;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdFormField;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {first} from '@angular/cdk/rxjs';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {MdDialog} from '../dialog/dialog';\nimport {MdDialogRef} from '../dialog/dialog-ref';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MdCalendar} from './calendar';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MdCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\n  datepicker: MdDatepicker<D>;\n\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-content, mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D | null) { this._startAt = date; }\nprivate _startAt: D | null;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Whether the datepicker pop-up should be disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this._datepickerInput.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\nprivate _disabled: boolean;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n * @return {?}\n */\nget _selected(): D | null { return this._validSelected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _selected(value: D | null) { this._validSelected = value; }\nprivate _validSelected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The input element this datepicker is associated with.\n */\nprivate _datepickerInput: MdDatepickerInput<D>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription: Subscription;\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n    if (this._inputSubscription) {\n      this._inputSubscription.unsubscribe();\n    }\n  }\n/**\n * Selects the given date\n * @param {?} date\n * @return {?}\n */\n_select(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('An MdDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n\n      this._focusedElementBeforeOpen.focus();\n      this._focusedElementBeforeOpen = null;\n    }\n\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MdDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      first.call(this._ngZone.onStable).subscribe(() => this._popupRef.updatePosition());\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._createPopupPositionStrategy();\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'md-overlay-transparent-backdrop';\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._scrollStrategy();\n\n    this._popupRef = this._overlay.create(overlayState);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker, mat-datepicker',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DATEPICKER_SCROLL_STRATEGY, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/** @type {?} */\nMdDatepicker.prototype._disabled;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/** @type {?} */\nMdDatepicker.prototype._validSelected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMdDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._scrollStrategy;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n/** @type {?} */\nMdDatepicker.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\nimport {first} from '../core/rxjs/index';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit, OnDestroy {\nprivate _intlChanges: Subscription;\n/**\n * A date representing the period (month or year) to start the calendar in.\n */\nstartAt: D;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n */\nselected: D | null;\n/**\n * The minimum selectable date.\n */\nminDate: D | null;\n/**\n * The maximum selectable date.\n */\nmaxDate: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _isCompatibilityMode\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} changeDetectorRef\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\npublic _isCompatibilityMode: boolean,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * @return {?}\n */\n_userSelected(): void {\n    this.userSelection.emit();\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => first.call(this._ngZone.onStable).subscribe(() => {\n      this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n    }));\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-calendar, mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/** @type {?} */\nMdCalendar.prototype._intlChanges;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @type {?}\n */\nMdCalendar.prototype.startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdCalendar.prototype.selected;\n/**\n * The minimum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.minDate;\n/**\n * The maximum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdCalendar.prototype.userSelection;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._isCompatibilityMode;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdDatepickerIntl.prototype.changes;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MdCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-year-view, mat-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const /** @type {?} */ selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const /** @type {?} */ selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const /** @type {?} */ selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this.userSelection.emit();\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D): number | null {\n    return this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D, d2: D): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdMonthView.prototype.userSelection;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MdDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MdNativeDateModule, or provide a custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n */\ncellAspectRatio = 1;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-calendar-body], [mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'cellAspectRatio': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n * @type {?}\n */\nMdCalendarBody.prototype.cellAspectRatio;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdOptionModule, MdCommonModule} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {\n  MdAutocompleteTrigger,\n  MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n  providers: [MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {filter, first, map, RxChain, switchMap} from '@angular/cdk/rxjs';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {MdFormField} from '../form-field/index';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {MdOption, MdOptionSelectionChange} from '../core/option/option';\nimport {MdAutocomplete} from './autocomplete';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal<any>;\nprivate _panelOpen: boolean = false;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n * @param {?} _formField\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality,\nprivate _formField: MdFormField,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    this._attachOverlay();\n    this._floatPlaceholder();\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    this._resetPlaceholder();\n\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the placeholder is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return RxChain.from(merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n      const /** @type {?} */ formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n             clickTarget !== this._element.nativeElement &&\n             (!formField || !formField.contains(clickTarget)) &&\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }).result();\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this.closePanel();\n      event.stopPropagation();\n    } else if (this.activeOption && event.keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      if (this.panelOpen) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * @return {?}\n */\n_handleFocus(): void {\n    this._attachOverlay();\n    this._floatPlaceholder(true);\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @param {?=} shouldAnimate Whether the placeholder should be animated when it is floated.\n * @return {?}\n */\nprivate _floatPlaceholder(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatPlaceholder === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockPlaceholder();\n      } else {\n        this._formField.floatPlaceholder = 'always';\n      }\n\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._formField.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n * the panel height + the option height, so the active option will be just visible at the\n * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n * will become the offset. If that offset is visible within the panel already, the scrollTop is\n * not adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const /** @type {?} */ labelCount = MdOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const /** @type {?} */ optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const /** @type {?} */ newScrollTop =\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollTop);\n    }\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\n    const /** @type {?} */ firstStable = first.call(this._zone.onStable);\n    const /** @type {?} */ optionChanges = map.call(this.autocomplete.options.changes, () =>\n      this._positionStrategy.recalculateLastPosition());\n\n    // When the zone is stable initially, and when the option list changes...\n    return RxChain.from(merge(firstStable, optionChanges))\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      .call(switchMap, () => {\n        this._resetActiveItem();\n        this.autocomplete._setVisibility();\n        return this.panelClosingActions;\n      })\n      // when the first closing event occurs...\n      .call(first)\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MdFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._panelOpen = true;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._scrollStrategy();\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n/**\n * @return {?}\n */\nprivate _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdAutocomplete], input[matAutocomplete],\n             textarea[mdAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_AUTOCOMPLETE_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._formField;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdOption, MdOptgroup} from '../core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager<MdOption>;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * \\@docs-private\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MdOption>(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\n * above or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on whether it is visible.\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'mdAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.optionGroups;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MdCommonModule} from '../core';\nimport {MdDialog, MD_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MdCommonModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n    MD_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\nexport {MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog} from './dialog';\nexport {throwMdDialogContentAlreadyAttachedError,MdDialogContainer} from './dialog-container';\nexport {MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions} from './dialog-content-directives';\nexport {DialogRole,DialogPosition,MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n\n   _matDialogClose: any;\n   _mdDialogClose: any;\n   _matDialogCloseResult: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._mdDialogClose ||\n        changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `button[md-dialog-close], button[mat-dialog-close],\n             button[mdDialogClose], button[matDialogClose]`,\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n'_mdDialogClose': [{ type: Input, args: ['mdDialogClose', ] },],\n'_matDialogCloseResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._mdDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._matDialogCloseResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,\n             [mdDialogContent], [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,\n             [mdDialogActions], [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {PortalInjector} from '../core/portal/portal-injector';\nimport {extendObject} from '../core/util/object-extend';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MD_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n */\nexport const MD_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\n    const /** @type {?} */ parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _scrollStrategy\n * @param {?} _location\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _scrollStrategy,\nprivate _location: Location,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && _location) {\n      _location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\n\n    // If there's a dialog that is in the process of being opened, return it instead.\n    if (inProgressDialog) {\n      return inProgressDialog;\n    }\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this.openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n/**\n * Finds an open dialog by its id.\n * @param {?} id ID to use when looking up the dialog.\n * @return {?}\n */\ngetDialogById(id: string): MdDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    const /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.panelClass = dialogConfig.panelClass;\n    overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n    overlayState.scrollStrategy = this._scrollStrategy();\n    overlayState.direction = dialogConfig.direction;\n    if (dialogConfig.backdropClass) {\n      overlayState.backdropClass = dialogConfig.backdropClass;\n    }\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, /** @type {?} */(( null)), /** @type {?} */((\n          <any>{ $implicit: config.data, dialogRef }))));\n    } else {\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MdDialogConfig,\n      dialogRef: MdDialogRef<T>,\n      dialogContainer: MdDialogContainer): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdDialogRef, dialogRef);\n    injectionTokens.set(MdDialogContainer, dialogContainer);\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this.openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._scrollStrategy;\n/** @type {?} */\nMdDialog.prototype._location;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  NgZone,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MdDialogConfig} from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @template C\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If we didn't find any focusable elements inside the dialog, focus the\n      // container so the user can't tab into other elements behind it.\n      if (!hasMovedFocus) {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n    this._isAnimating = false;\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n    this._animationStateChanged.emit(event);\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMdDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMdDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMdDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMdDialogContainer.prototype._ngZone;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdDialogContainer.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {filter, first, RxChain} from '@angular/cdk/rxjs';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n// TODO(jelbourn): afterOpen\n\n// Counter for unique dialog ids.\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Subject for notifying the user that the dialog has started closing.\n */\nprivate _beforeClose: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer,\npublic readonly id: string = `md-dialog-${uniqueId++}`) {\n\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\n      .call(first)\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    RxChain.from(this._containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'start')\n      .call(first)\n      .subscribe(() => {\n        this._beforeClose.next(dialogResult);\n        this._beforeClose.complete();\n        this._overlayRef.detachBackdrop();\n      });\n\n    this._containerInstance._startExitAnimation();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog has started closing.\n * @return {?}\n */\nbeforeClose(): Observable<any> {\n    return this._beforeClose.asObservable();\n  }\n/**\n * Gets an observable that emits when the overlay's backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\n    return this._containerInstance._isAnimating;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the dialog has started closing.\n * @type {?}\n */\nMdDialogRef.prototype._beforeClose;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n/** @type {?} */\nMdDialogRef.prototype.id;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\n\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMdDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.ariaDescribedBy;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdMenu, MD_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger, MD_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MdRippleModule} from '../core/ripple/index';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n  providers: [\n    MD_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MD_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\n\nexport {MdMenu,MdMenuDefaultOptions,MD_MENU_DEFAULT_OPTIONS,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu';\nexport {fadeInItems, transformMenu} from './menu-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  RepositionScrollStrategy,\n  VerticalConnectionPos,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {filter, RxChain} from '@angular/cdk/rxjs';\nimport {MdMenu} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuMissingError} from './menu-errors';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Injection token that determines the scroll handling while the menu is open.\n */\nexport const MD_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n */\nexport const MENU_PANEL_TOP_PADDING = 8;\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal<any>;\nprivate _overlayRef: OverlayRef | null = null;\nprivate _menuOpen: boolean = false;\nprivate _closeSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _hoverSubscription: Subscription;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _parentMenu\n * @param {?} _menuItemInstance\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _parentMenu: MdMenu,\nprivate _menuItemInstance: MdMenuItem,\nprivate _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this.closeMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.close.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = filter\n          .call(this._parentMenu.hover(), active => active === this._menuItemInstance)\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean {\n    return this._menuOpen;\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the menu triggers a sub-menu or a top-level one.\n * @return {?}\n */\ntriggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.menu.close.emit());\n      this._initMenu();\n\n      if (this.menu instanceof MdMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._overlayRef.detach();\n      this._closeSubscription.unsubscribe();\n      this.menu.close.emit();\n\n      if (this.menu instanceof MdMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * Updates the menu elevation based on the amount of parent menus that it has.\n * @return {?}\n */\nprivate _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let /** @type {?} */ depth = 0;\n      let /** @type {?} */ parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n/**\n * This method checks that a valid instance of MdMenu has been passed into\n * mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMdMenuMissingError();\n    }\n  }\n/**\n * This method creates the overlay from the provided menu's template and saves its\n * OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayState\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getPosition();\n    overlayState.hasBackdrop = !this.triggersSubmenu();\n    overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n    overlayState.direction = this.dir;\n    overlayState.scrollStrategy = this._scrollStrategy();\n    return overlayState;\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const /** @type {?} */ posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let /** @type {?} */ offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n\n      // TODO(crisbeto): this should be a function, once the overlay supports it.\n      // Right now it will be wrong for the fallback positions.\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY})\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY});\n  }\n/**\n * Cleans up the active subscriptions.\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    [\n      this._closeSubscription,\n      this._positionSubscription,\n      this._hoverSubscription\n    ]\n        .filter(subscription => !!subscription)\n        .forEach(subscription => subscription.unsubscribe());\n  }\n/**\n * Returns a stream that emits whenever an action that should close the menu occurs.\n * @return {?}\n */\nprivate _menuClosingActions() {\n    const /** @type {?} */ backdrop = /** @type {?} */(( this._overlayRef)).backdropClick();\n    const /** @type {?} */ parentClose = this._parentMenu ? this._parentMenu.close : observableOf(null);\n    const /** @type {?} */ hover = this._parentMenu ? RxChain.from(this._parentMenu.hover())\n        .call(filter, active => active !== this._menuItemInstance)\n        .call(filter, () => this._menuOpen)\n        .result() : observableOf(null);\n\n    return merge(backdrop, parentClose, hover);\n  }\n/**\n * Handles mouse presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n    }\n  }\n/**\n * Handles key presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n/**\n * Handles click events on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'mdMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_SCROLL_STRATEGY, ] }, ]},\n{type: MdMenu, decorators: [{ type: Optional }, ]},\n{type: MdMenuItem, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._closeSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._hoverSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdMenuTrigger.prototype._parentMenu;\n/** @type {?} */\nMdMenuTrigger.prototype._menuItemInstance;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n  ChangeDetectionStrategy,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '../core/keyboard/keycodes';\nimport {merge} from 'rxjs/observable/merge';\nimport {Observable} from 'rxjs/Observable';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Default `md-menu` options that can be overridden. */\nexport interface MdMenuDefaultOptions {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n}\n/**\n * Injection token to be used to override the default options for `md-menu`.\n */\nexport const MD_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MdMenuDefaultOptions>('md-menu-default-options');\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n */\nconst MD_MENU_BASE_ELEVATION = 2;\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager<MdMenuItem>;\nprivate _xPosition: MenuPositionX = this._defaultOptions.xPosition;\nprivate _yPosition: MenuPositionY = this._defaultOptions.yPosition;\nprivate _previousElevation: string;\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription: Subscription;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Current state of the panel animation.\n */\n_panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n/**\n * Parent menu of the current menu panel.\n */\nparentMenu: MdMenuPanel | undefined;\n/**\n * Layout direction of the menu.\n */\ndirection: Direction;\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = this._defaultOptions.overlapTrigger;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void | 'click' | 'keydown'>();\n/**\n * @param {?} _elementRef\n * @param {?} _defaultOptions\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _defaultOptions: MdMenuDefaultOptions) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MdMenuItem>(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n\n    this.close.emit();\n    this.close.complete();\n  }\n/**\n * Stream that emits whenever the hovered menu item changes.\n * @return {?}\n */\nhover(): Observable<MdMenuItem> {\n    return merge(...this.items.map(item => item.hover));\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.close.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.close.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.close.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n/**\n * Sets the menu panel elevation.\n * @param {?} depth Number of parent menus that come before the menu.\n * @return {?}\n */\nsetElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const /** @type {?} */ newElevation = `mat-elevation-z${MD_MENU_BASE_ELEVATION + depth}`;\n    const /** @type {?} */ customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n/**\n * Starts the enter animation.\n * @return {?}\n */\n_startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n/**\n * Resets the panel animation to its initial state.\n * @return {?}\n */\n_resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n/**\n * Callback that is invoked when the panel animation completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_DEFAULT_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/** @type {?} */\nMdMenu.prototype._previousElevation;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/**\n * Current state of the panel animation.\n * @type {?}\n */\nMdMenu.prototype._panelAnimationState;\n/**\n * Parent menu of the current menu panel.\n * @type {?}\n */\nMdMenu.prototype.parentMenu;\n/**\n * Layout direction of the menu.\n * @type {?}\n */\nMdMenu.prototype.direction;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n/** @type {?} */\nMdMenu.prototype._defaultOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('void', style({\n    opacity: 0,\n    // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n    // as of 4.2, which causes the animation to be skipped if it starts from 0.\n    transform: 'scale(0.01, 0.01)'\n  })),\n  state('enter-start', style({\n    opacity: 1,\n    transform: 'scale(1, 0.5)'\n  })),\n  state('enter', style({\n    transform: 'scale(1, 1)'\n  })),\n  transition('void => enter-start', animate('100ms linear')),\n  transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FocusableOption} from '../core/a11y/focus-key-manager';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MdMenuItemBase {}\nexport const /** @type {?} */ _MdMenuItemMixinBase = mixinDisabled(MdMenuItemBase);\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem extends _MdMenuItemMixinBase implements FocusableOption, CanDisable,\n  OnDestroy {\n/**\n * Stream that emits when the menu item is hovered.\n */\nhover: Subject<MdMenuItem> = new Subject();\n/**\n * Whether the menu item is highlighted.\n */\n_highlighted: boolean = false;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n */\n_triggersSubmenu: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.hover.complete();\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n/**\n * Emits to the hover stream.\n * @return {?}\n */\n_emitHoverEvent() {\n    if (!this.disabled) {\n      this.hover.next(this);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  inputs: ['disabled'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/**\n * Stream that emits when the menu item is hovered.\n * @type {?}\n */\nMdMenuItem.prototype.hover;\n/**\n * Whether the menu item is highlighted.\n * @type {?}\n */\nMdMenuItem.prototype._highlighted;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n * @type {?}\n */\nMdMenuItem.prototype._triggersSubmenu;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\n  throw Error(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MdCommonModule} from '../core';\nimport {MdTooltip, TooltipComponent, MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdCommonModule,\n    PlatformModule\n  ],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,TOOLTIP_PANEL_CLASS,getMdTooltipInvalidPositionError,MD_TOOLTIP_SCROLL_STRATEGY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {first} from '@angular/cdk/rxjs';\nimport {\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  OverlayState,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function getMdTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/**\n * \\@docs-private\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    this._setTooltipMessage(this._message);\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @return {?}\n */\nget _matClass() { return this.tooltipClass; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matClass(v) { this.tooltipClass = v; }\nprivate _enterListener: Function;\nprivate _leaveListener: Function;\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _scrollStrategy\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\nprivate _scrollStrategy,\nprivate _dir: Directionality) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._enterListener =\n        _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      this._leaveListener =\n        _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._enterListener();\n      this._leaveListener();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._setTooltipMessage(this._message); /** @type {?} */((\n    this._tooltipInstance)).show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance; /** @type {?} */((\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance)).afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    let /** @type {?} */ config = new OverlayState();\n\n    config.direction = this._dir ? this._dir.value : 'ltr';\n    config.positionStrategy = strategy;\n    config.panelClass = TOOLTIP_PANEL_CLASS;\n    config.scrollStrategy = this._scrollStrategy();\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = message;\n      this._tooltipInstance._markForCheck();\n\n      first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => {\n        if (this._tooltipInstance) { /** @type {?} */((\n          this._overlayRef)).updatePosition();\n        }\n      });\n    }\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_TOOLTIP_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['mdTooltipClass', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'_matClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/** @type {?} */\nMdTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._enterListener;\n/** @type {?} */\nMdTooltip.prototype._leaveListener;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._scrollStrategy;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\n_closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throw getMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\n\nexport {MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar} from './toolbar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {'class': 'mat-toolbar-row'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {MdCommonModule, MdRippleModule} from '../core';\nimport {MdTab} from './tab';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabLink, MdTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabBody} from './tab-body';\nimport {MdTabHeader} from './tab-header';\nexport class MdTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdCommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdCommonModule,\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNav,\n    MdTabLink,\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNav,\n    MdTabLink,\n    MdTabBody,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\n\nexport {MdTabChangeEvent,MdTabHeaderPosition,MdTabGroupBase,_MdTabGroupMixinBase,MdTabGroup} from './tab-group';\nexport {MdInkBar} from './ink-bar';\nexport {MdTabBody, MdTabBodyOriginState, MdTabBodyPositionState} from './tab-body';\nexport {MdTabHeader, ScrollDirection} from './tab-header';\nexport {MdTabLabelWrapper} from './tab-label-wrapper';\nexport {MdTab} from './tab';\nexport {MdTabLabel} from './tab-label';\nexport {MdTabNav, MdTabLink} from './tab-nav-bar/index';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  QueryList,\n  ElementRef,\n  ViewEncapsulation,\n  ContentChildren,\n  Output,\n  EventEmitter,\n  Optional,\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  Renderer2,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {RIGHT_ARROW, LEFT_ARROW, ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {auditTime, startWith} from '@angular/cdk/rxjs';\nimport {Subscription} from 'rxjs/Subscription';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdInkBar} from './ink-bar';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * \\@docs-private\n */\nexport class MdTabHeaderBase {}\nexport const /** @type {?} */ _MdTabHeaderMixinBase = mixinDisableRipple(MdTabHeaderBase);\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader extends _MdTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar: Subscription | null = null;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    const /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n    const /** @type {?} */ resize = typeof window !== 'undefined' ?\n        auditTime.call(fromEvent(window, 'resize'), 150) :\n        observableOf(null);\n\n    this._realignInkBar = startWith.call(merge(dirChange, resize), null).subscribe(() => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._realignInkBar) {\n      this._realignInkBar.unsubscribe();\n      this._realignInkBar = null;\n    }\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    const /** @type {?} */ scrollDistance = this.scrollDistance;\n    const /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._renderer.setStyle(this._tabList.nativeElement, 'transform',\n        `translate3d(${translateX}px, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance; }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    const /** @type {?} */ isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._renderer;\n/** @type {?} */\nMdTabHeader.prototype._changeDetectorRef;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal<any>;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _dir: Directionality) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('void', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n/** @type {?} */\nMdTabBody.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n  ContentChildren,\n  QueryList,\n  forwardRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from '@angular/cdk/rxjs';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {merge} from 'rxjs/observable/merge';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {CanDisableRipple, mixinDisableRipple} from '../../core/common-behaviors/disable-ripple';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '../../core/common-behaviors/disabled';\nimport {MD_RIPPLE_GLOBAL_OPTIONS, MdRipple, RippleGlobalOptions} from '../../core';\nimport {CanColor, mixinColor, ThemePalette} from '../../core/common-behaviors/color';\nimport {MdInkBar} from '../ink-bar';\n/**\n * \\@docs-private\n */\nexport class MdTabNavBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdTabNavBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNavBase.prototype._renderer;\n/** @type {?} */\nMdTabNavBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdTabNavMixinBase = mixinDisableRipple(mixinColor(MdTabNavBase, 'primary'));\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNav extends _MdTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * Query list of all tab links of the tab navigation.\n */\n_tabLinks: QueryList<MdTabLink>;\n/**\n * Subscription for window.resize event *\n */\nprivate _resizeSubscription: Subscription;\n/**\n * Background color of the tab nav.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Whether ripples should be disabled for all links or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._resizeSubscription = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          auditTime.call(fromEvent(window, 'resize'), 10) :\n          observableOf(null);\n\n      return takeUntil.call(merge(dirChange, resize), this._onDestroy)\n          .subscribe(() => this._alignInkBar());\n    });\n    this._setLinkDisableRipple();\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n\n    if (this._resizeSubscription) {\n      this._resizeSubscription.unsubscribe();\n    }\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\n_alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n/**\n * Sets the `disableRipple` property on each link of the navigation bar.\n * @return {?}\n */\nprivate _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabLinks': [{ type: ContentChildren, args: [forwardRef(() => MdTabLink), {descendants: true}, ] },],\n'backgroundColor': [{ type: Input },],\n};\n}\n\nfunction MdTabNav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNav.ctorParameters;\n/** @type {?} */\nMdTabNav.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nMdTabNav.prototype._onDestroy;\n/** @type {?} */\nMdTabNav.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNav.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNav.prototype._inkBar;\n/**\n * Query list of all tab links of the tab navigation.\n * @type {?}\n */\nMdTabNav.prototype._tabLinks;\n/**\n * Subscription for window.resize event *\n * @type {?}\n */\nMdTabNav.prototype._resizeSubscription;\n/** @type {?} */\nMdTabNav.prototype._backgroundColor;\n/** @type {?} */\nMdTabNav.prototype._disableRipple;\n/** @type {?} */\nMdTabNav.prototype._dir;\n/** @type {?} */\nMdTabNav.prototype._ngZone;\n/** @type {?} */\nMdTabNav.prototype._changeDetectorRef;\n}\n\nexport class MdTabLinkBase {}\nexport const /** @type {?} */ _MdTabLinkMixinBase = mixinDisabled(MdTabLinkBase);\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink extends _MdTabLinkMixinBase implements OnDestroy, CanDisable {\n/**\n * Whether the tab link is active or not.\n */\nprivate _isActive: boolean = false;\n/**\n * Whether the ripples for this tab should be disabled or not.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the instance of the ripple for the tab link.\n */\nprivate _tabLinkRipple: MdRipple;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * Whether ripples should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._tabLinkRipple.disabled = this.disableRipple;\n    this._tabLinkRipple._updateRippleRenderer();\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(private _mdTabNavBar: MdTabNav,\nprivate _elementRef: ElementRef,\n              ngZone: NgZone,\n              ruler: ViewportRuler,\n              platform: Platform,\n                globalOptions: RippleGlobalOptions) {\n    super();\n\n    // Manually create a ripple instance that uses the tab link element as trigger element.\n    // Notice that the lifecycle hooks for the ripple config won't be called anymore.\n    this._tabLinkRipple = new MdRipple(_elementRef, ngZone, ruler, platform, globalOptions);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\n    // called automatically since its instance is not created by Angular.\n    this._tabLinkRipple.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNav, },\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/**\n * Whether the tab link is active or not.\n * @type {?}\n */\nMdTabLink.prototype._isActive;\n/**\n * Whether the ripples for this tab should be disabled or not.\n * @type {?}\n */\nMdTabLink.prototype._disableRipple;\n/**\n * Reference to the instance of the ripple for the tab link.\n * @type {?}\n */\nMdTabLink.prototype._tabLinkRipple;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Sets the proper styles to the ink bar element.\n * @param {?} element\n * @return {?}\n */\nprivate _setStyles(element: HTMLElement) {\n    const /** @type {?} */ left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    const /** @type {?} */ width = element ? (element.offsetWidth || 0) + 'px' : '0';\n\n    this._renderer.setStyle(this._elementRef.nativeElement, 'left', left);\n    this._renderer.setStyle(this._elementRef.nativeElement, 'width', width);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdTabLabelWrapperBase {}\nexport const /** @type {?} */ _MdTabLabelWrapperMixinBase = mixinDisabled(MdTabLabelWrapperBase);\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper extends _MdTabLabelWrapperMixinBase implements CanDisable {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    super();\n  }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdTabLabelWrapper], [matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer2,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  AfterViewChecked,\n  AfterContentInit,\n  AfterContentChecked,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {map} from '@angular/cdk/rxjs';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdTab} from './tab';\nimport {merge} from 'rxjs/observable/merge';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\nimport {CanColor, mixinColor, ThemePalette} from '../core/common-behaviors/color';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * \\@docs-private\n */\nexport class MdTabGroupBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdTabGroupBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroupBase.prototype._renderer;\n/** @type {?} */\nMdTabGroupBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdTabGroupMixinBase = mixinColor(mixinDisableRipple(MdTabGroupBase), 'primary');\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup extends _MdTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, AfterViewChecked, OnDestroy, CanColor, CanDisableRipple {\n\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect: number | null = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = 0;\n/**\n * Subscription to tabs being added/removed.\n */\nprivate _tabsSubscription: Subscription;\n/**\n * Subscription to changes in the tab labels.\n */\nprivate _tabLabelSubscription: Subscription;\n/**\n * Whether the tab group should grow to the size of the active tab.\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\nprivate _dynamicHeight: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number | null) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number | null { return this._selectedIndex; }\nprivate _selectedIndex: number | null = null;\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Background color of the tab group.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @return {?}\n */\nget selectedIndexChange(): Observable<number> {\n    return map.call(this.selectChange, event => event.index);\n  }\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(_renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(_renderer, elementRef);\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n    // ensures that values like NaN can't get through and which would otherwise throw the\n    // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n    let /** @type {?} */ indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabsSubscription) {\n      this._tabsSubscription.unsubscribe();\n    }\n\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\n * on the MdTab component, whereas the data binding is inside the MdTabGroup. In order for the\n * binding to be updated, we need to subscribe to changes in it and trigger change detection\n * manually.\n * @return {?}\n */\nprivate _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'backgroundColor': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Subscription to tabs being added/removed.\n * @type {?}\n */\nMdTabGroup.prototype._tabsSubscription;\n/**\n * Subscription to changes in the tab labels.\n * @type {?}\n */\nMdTabGroup.prototype._tabLabelSubscription;\n/** @type {?} */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/** @type {?} */\nMdTabGroup.prototype._backgroundColor;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {TemplatePortal} from '../core/portal/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {MdTabLabel} from './tab-label';\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MdTabBase {}\nexport const /** @type {?} */ _MdTabMixinBase = mixinDisabled(MdTabBase);\nexport class MdTab extends _MdTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal<any> | null = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal<any> | null { return this._contentPortal; }\n/**\n * Emits whenever the label changes.\n */\n_labelChange = new Subject<void>();\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number | null = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number | null = null;\n/**\n * Whether the tab is currently active.\n */\nisActive = false;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._labelChange.complete();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdTab',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * Emits whenever the label changes.\n * @type {?}\n */\nMdTab.prototype._labelChange;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/**\n * Whether the tab is currently active.\n * @type {?}\n */\nMdTab.prototype.isActive;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '@angular/cdk/portal';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTabLabelBaseClass = TemplatePortalDirective;\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends _MdTabLabelBaseClass {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label], [mdTabLabel], [matTabLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {MdCommonModule} from '../core';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MdCommonModule,\n  ],\n  exports: [MdSnackBarContainer, MdCommonModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\n\nexport {MdSnackBar} from './snack-bar';\nexport {SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer} from './snack-bar-container';\nexport {MD_SNACK_BAR_DATA,MdSnackBarConfig} from './snack-bar-config';\nexport {MdSnackBarRef} from './snack-bar-ref';\nexport {SimpleSnackBar} from './simple-snack-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf } from '@angular/core';\nimport {Overlay, OverlayRef, OverlayState} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {PortalInjector} from '../core/portal/portal-injector';\nimport {extendObject} from '../core/util/object-extend';\nimport {MD_SNACK_BAR_DATA, MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> | null {\n    const /** @type {?} */ parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _injector\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _injector: Injector,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n    const /** @type {?} */ snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((_config)).duration))));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config?: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    const /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    const /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate _attach<T>(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\n    const /** @type {?} */ snackBarRef = new MdSnackBarRef<T>(container, overlayRef);\n    const /** @type {?} */ injector = this._createInjector(config, snackBarRef);\n    const /** @type {?} */ portal = new ComponentPortal(component, undefined, injector);\n    const /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    return snackBarRef;\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    const /** @type {?} */ state = new OverlayState();\n    state.direction = config.direction;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');\n    return this._overlay.create(state);\n  }\n/**\n * Creates an injector to be used inside of a snack bar component.\n * @template T\n * @param {?} config Config that was used to create the snack bar.\n * @param {?} snackBarRef Reference to the snack bar.\n * @return {?}\n */\nprivate _createInjector<T>(\n      config: MdSnackBarConfig,\n      snackBarRef: MdSnackBarRef<T>): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdSnackBarRef, snackBarRef);\n    injectionTokens.set(MD_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: Injector, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._injector;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MD_SNACK_BAR_DATA} from './snack-bar-config';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * Data that was injected into the snack bar.\n */\ndata: { message: string, action: string };\n/**\n * @param {?} snackBarRef\n * @param {?} data\n */\nconstructor(\npublic snackBarRef: MdSnackBarRef<SimpleSnackBar>,\n     data: any) {\n    this.data = data;\n  }\n/**\n * Performs the action on the snack bar.\n * @return {?}\n */\naction(): void {\n    this.snackBarRef.closeWithAction();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.data.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBarRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_SNACK_BAR_DATA, ] }, ]},\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * Data that was injected into the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.data;\n/** @type {?} */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarConfig} from './snack-bar-config';\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\nprivate onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\nprivate onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nanimationState: SnackBarState = 'initial';\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this.onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    // Note: we shouldn't use `this` inside the zone callback,\n    // because it can cause a memory leak.\n    const /** @type {?} */ onExit = this.onExit;\n\n    first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => {\n      onExit.next();\n      onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'translateY(100%)'})),\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\n/**\n * The instance of the component making up the content of the snack bar.\n */\ninstance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction = new Subject<void>();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\ncloseWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nMdSnackBarRef.prototype.instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n * @type {?}\n */\nMdSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const /** @type {?} */ MD_SNACK_BAR_DATA = new InjectionToken<any>('MdSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: Direction = 'ltr';\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdSnackBarConfig.prototype.data;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '@angular/core';\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nexport class PortalInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _customTokens\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _customTokens: WeakMap<any, any>) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    const /** @type {?} */ value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction PortalInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalInjector.prototype._parentInjector;\n/** @type {?} */\nPortalInjector.prototype._customTokens;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdInput} from './input';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '../core/platform/index';\nimport {MdFormFieldModule} from '../form-field/index';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdInput,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MdFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MdFormFieldModule` since `MdInput` will almost always be used together with\n    // `MdFormField`.\n    MdFormFieldModule,\n    MdInput,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\n\nexport {MdTextareaAutosize} from './autosize';\nexport {MdInput} from './input';\nexport {getMdInputUnsupportedTypeError} from './input-errors';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit, Optional, Self} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} _platform\n * @param {?} formControl\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _platform: Platform,\n      formControl: NgControl) {\n\n    if (formControl && formControl.valueChanges) {\n      formControl.valueChanges.subscribe(() => this.resizeToFitContent());\n    }\n  }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._cacheTextareaLineHeight();\n      this.resizeToFitContent();\n    }\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden'; /** @type {?} */((\n\n    textarea.parentNode)).appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\n    textarea.parentNode)).removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    if (textarea.value === this._previousValue) {\n      return;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n\n    this._previousValue = textarea.value;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `textarea[md-autosize], textarea[mdTextareaAutosize],\n             textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMinRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMdTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n/** @type {?} */\nMdTextareaAutosize.prototype._platform;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Platform, getSupportedInputTypes} from '@angular/cdk/platform';\nimport {getMdInputUnsupportedTypeError} from './input-errors';\nimport {\n  defaultErrorStateMatcher,\n  ErrorOptions,\n  ErrorStateMatcher,\n  MD_ERROR_GLOBAL_OPTIONS\n} from '../core/error/error-options';\nimport {Subject} from 'rxjs/Subject';\nimport {MdFormFieldControl} from '../form-field/index';\n\n// Invalid input type. Using one of these will throw an MdInputUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Directive that allows a native input to work inside a `MdFormField`.\n */\nexport class MdInput implements MdFormFieldControl<any>, OnChanges, OnDestroy, DoCheck {\n/**\n * Variables used as cache for getters and setters.\n */\nprivate _type = 'text';\nprivate _disabled = false;\nprivate _required = false;\nprivate _id: string;\nprivate _uid = `md-input-${nextUniqueId++}`;\nprivate _errorOptions: ErrorOptions;\nprivate _previousNativeValue = this.value;\n/**\n * Whether the input is focused.\n */\nfocused = false;\n/**\n * Whether the input is in an error state.\n */\nerrorState = false;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) { this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n */\nplaceholder: string = '';\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * A function used to control when error messages are shown.\n */\nerrorStateMatcher: ErrorStateMatcher;\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) {\n    if (value !== this.value) {\n      this._elementRef.nativeElement.value = value;\n      this.stateChanges.next();\n    }\n  }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} errorOptions\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\npublic ngControl: NgControl,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\n                errorOptions: ErrorOptions) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n    this._errorOptions = errorOptions ? errorOptions : {};\n    this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnChanges() {\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.stateChanges.complete();\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this._updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n/**\n * Callback for the cases where the focused state of the input changes.\n * @param {?} isFocused\n * @return {?}\n */\n_focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Re-evaluates the error state. This is only relevant with \\@angular/forms.\n * @return {?}\n */\nprivate _updateErrorState() {\n    const /** @type {?} */ oldState = this.errorState;\n    const /** @type {?} */ ngControl = this.ngControl;\n    const /** @type {?} */ parent = this._parentFormGroup || this._parentForm;\n    const /** @type {?} */ newState = ngControl && this.errorStateMatcher( /** @type {?} */((ngControl.control as FormControl)), parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Does some manual dirty checking on the native input `value` property.\n * @return {?}\n */\nprivate _dirtyCheckNativeValue() {\n    const /** @type {?} */ newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMdInputUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * Checks whether the input type is one of the types that are never empty.\n * @return {?}\n */\nprivate _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n/**\n * Checks whether the input is invalid based on the native validation.\n * @return {?}\n */\nprivate _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let /** @type {?} */ validity = ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity;\n    return validity && validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n/**\n * @return {?}\n */\nget empty(): boolean {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    'class': 'mat-input-element',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MdFormFieldControl, useExisting: MdInput}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'errorStateMatcher': [{ type: Input },],\n};\n}\n\nfunction MdInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInput.ctorParameters;\n/** @type {?} */\nMdInput.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInput.prototype._type;\n/** @type {?} */\nMdInput.prototype._disabled;\n/** @type {?} */\nMdInput.prototype._required;\n/** @type {?} */\nMdInput.prototype._id;\n/** @type {?} */\nMdInput.prototype._uid;\n/** @type {?} */\nMdInput.prototype._errorOptions;\n/** @type {?} */\nMdInput.prototype._previousNativeValue;\n/**\n * Whether the input is focused.\n * @type {?}\n */\nMdInput.prototype.focused;\n/**\n * Whether the input is in an error state.\n * @type {?}\n */\nMdInput.prototype.errorState;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInput.prototype._ariaDescribedby;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdInput.prototype.stateChanges;\n/**\n * Placeholder attribute of the element.\n * @type {?}\n */\nMdInput.prototype.placeholder;\n/**\n * A function used to control when error messages are shown.\n * @type {?}\n */\nMdInput.prototype.errorStateMatcher;\n/** @type {?} */\nMdInput.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInput.prototype._elementRef;\n/** @type {?} */\nMdInput.prototype._renderer;\n/** @type {?} */\nMdInput.prototype._platform;\n/** @type {?} */\nMdInput.prototype.ngControl;\n/** @type {?} */\nMdInput.prototype._parentForm;\n/** @type {?} */\nMdInput.prototype._parentFormGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdError} from './error';\nimport {MdFormField} from './form-field';\nimport {MdHint} from './hint';\nimport {MdPlaceholder} from './placeholder';\nimport {MdPrefix} from './prefix';\nimport {MdSuffix} from './suffix';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdError,\n    MdHint,\n    MdFormField,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdError,\n    MdHint,\n    MdFormField,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormFieldModule.ctorParameters;\n}\n\n\n\nexport {MdError} from './error';\nexport {MdFormField} from './form-field';\nexport {MdFormFieldControl} from './form-field-control';\nexport {getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError} from './form-field-errors';\nexport {MdHint} from './hint';\nexport {MdPlaceholder} from './placeholder';\nexport {MdPrefix} from './prefix';\nexport {MdSuffix} from './suffix';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '../core';\nimport {\n  getMdFormFieldDuplicatedHintError,\n  getMdFormFieldMissingControlError,\n  getMdFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {\n  FloatPlaceholderType,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  PlaceholderOptions\n} from '../core/placeholder/placeholder-options';\nimport {startWith, first} from '@angular/cdk/rxjs';\nimport {MdError} from './error';\nimport {MdFormFieldControl} from './form-field-control';\nimport {MdHint} from './hint';\nimport {MdPlaceholder} from './placeholder';\nimport {MdPrefix} from './prefix';\nimport {MdSuffix} from './suffix';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MdFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n */\nprivate _showAlwaysAnimate = false;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() {\n    return this._floatPlaceholder === 'always' && !this._showAlwaysAnimate;\n  }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    if (value !== this._floatPlaceholder) {\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\n   _connectionContainerRef: ElementRef;\nprivate _placeholder: ElementRef;\n   _control: MdFormFieldControl<any>;\n   _placeholderChild: MdPlaceholder;\n   _errorChildren: QueryList<MdError>;\n   _hintChildren: QueryList<MdHint>;\n   _prefixChildren: QueryList<MdPrefix>;\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\n        placeholderOptions: PlaceholderOptions) {\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateControlChild();\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let /** @type {?} */ ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateControlChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n/**\n * Animates the placeholder up and locks it in position.\n * @return {?}\n */\n_animateAndLockPlaceholder(): void {\n    if (this._placeholder && this._canPlaceholderFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatPlaceholder = 'always';\n\n      first.call(fromEvent(this._placeholder.nativeElement, 'transitionend')).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n * or child element with the `md-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMdFormFieldPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint;\n      let /** @type {?} */ endHint: MdHint;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\n * its `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\n    if (this._control) {\n      let /** @type {?} */ ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let /** @type {?} */ startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let /** @type {?} */ endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(mdError => mdError.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\n    if (!this._control) {\n      throw getMdFormFieldMissingControlError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'md-input-container, mat-input-container, md-form-field, mat-form-field',\n  templateUrl: 'form-field.html',\n  // MdInput is a directive and can't have styles, so we need to include its styles here.\n  // The MdInput styles are fairly minimal so it shouldn't be a big deal for people who aren't using\n  // MdInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n      ]),\n    ]),\n  ],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_control.focus()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_placeholder': [{ type: ViewChild, args: ['placeholder', ] },],\n'_control': [{ type: ContentChild, args: [MdFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormField.ctorParameters;\n/** @type {?} */\nMdFormField.propDecorators;\n/** @type {?} */\nMdFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMdFormField.prototype.color;\n/** @type {?} */\nMdFormField.prototype._hideRequiredMarker;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n * @type {?}\n */\nMdFormField.prototype._showAlwaysAnimate;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMdFormField.prototype._hintLabel;\n/** @type {?} */\nMdFormField.prototype._hintLabelId;\n/** @type {?} */\nMdFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMdFormField.prototype.underlineRef;\n/** @type {?} */\nMdFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMdFormField.prototype._placeholder;\n/** @type {?} */\nMdFormField.prototype._control;\n/** @type {?} */\nMdFormField.prototype._placeholderChild;\n/** @type {?} */\nMdFormField.prototype._errorChildren;\n/** @type {?} */\nMdFormField.prototype._hintChildren;\n/** @type {?} */\nMdFormField.prototype._prefixChildren;\n/** @type {?} */\nMdFormField.prototype._suffixChildren;\n/** @type {?} */\nMdFormField.prototype._elementRef;\n/** @type {?} */\nMdFormField.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MdFormField`.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MdFormField`.\n * @abstract\n */\nexport abstract class MdFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\n * needs to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Focuses this control.\n * @abstract\n * @return {?}\n */\nfocus() {}\n}\n\nfunction MdFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMdFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMdFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMdFormFieldControl.prototype.empty;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMdFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMdFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMdFormFieldControl.prototype.errorState;\n}\n\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldMissingControlError(): Error {\n  return Error('md-form-field must contain a MdFormFieldControl. ' +\n      'Did you forget to add mdInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MdError {\n   id: string = `mat-error-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdError_tsickle_Closure_declarations() {\n/** @type {?} */\nMdError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdError.ctorParameters;\n/** @type {?} */\nMdError.propDecorators;\n/** @type {?} */\nMdError.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by mdInput.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule],\n  exports: [MdProgressBar, MdCommonModule],\n  declarations: [MdProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\n\n\nexport {MdProgressBar} from './progress-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nclass MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdCommonModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\nexport {MdProgressSpinnerModule};\nexport {PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner} from './progress-spinner';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {'class': 'mat-progress-spinner'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number | null;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number | null) {\n    if (this._interdeterminateInterval) {\n      clearInterval(this._interdeterminateInterval);\n    }\n\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n\n    return 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\n    super(renderer, elementRef);\n  }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(renderer, elementRef, ngZone);\n    this.mode = 'indeterminate';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number): string {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MdIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdIcon, MdCommonModule],\n  declarations: [MdIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\n\n\nexport {MdIconBase,_MdIconMixinBase,MdIcon} from './icon';\nexport {getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon-registry';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {MdIconRegistry} from './icon-registry';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {first} from '../core/rxjs/index';\n/**\n * \\@docs-private\n */\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return /** @type {?} */(( <[string, string]>parts));\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        first.call(this._mdIconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._renderer.appendChild(this._elementRef.nativeElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _clearSvgElement() {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, SecurityContext, Optional, SkipSelf} from '@angular/core';\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\nimport {Http} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {RxChain, map, doOperator, catchOperator, finallyOperator, share} from '../core/rxjs/index';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<md-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMdIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MdIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMdIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMdIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdBasicChip, MdChip, MdChipRemove} from './chip';\nimport {MdChipInput} from './chip-input';\n\nexport {MdChipList} from './chip-list';\nexport {MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove} from './chip';\nexport {MdChipInputEvent,MdChipInput} from './chip-input';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdChipInput, MdChipRemove, MdChipRemove, MdBasicChip],\n  declarations: [MdChipList, MdChip, MdChipInput, MdChipRemove,  MdChipRemove, MdBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Output, EventEmitter, ElementRef, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '../core/keyboard/keycodes';\nimport {MdChipList} from './chip-list';\n\nexport interface MdChipInputEvent {\n  input: HTMLInputElement;\n  value: string;\n}\nexport class MdChipInput {\n\n  _chipList: MdChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MdChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this._inputElement);\n    }\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MdChipInputEvent>();\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MdChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdChipInputFor], input[matChipInputFor]',\n  host: {\n    'class': 'mat-chip-input',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['mdChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['mdChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['mdChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['mdChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/** @type {?} */\nMdChipInput.prototype._chipList;\n/** @type {?} */\nMdChipInput.prototype._addOnBlur;\n/** @type {?} */\nMdChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipEnd;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  OnDestroy,\n  Optional,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {BACKSPACE, DELETE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW} from '../core/keyboard/keycodes';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n * \n * Example:\n * \n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nexport class MdChipList implements AfterContentInit, OnDestroy {\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _lastDestroyedIndex: number|null = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _chipSet: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription: Subscription;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n\n  protected _inputElement: HTMLInputElement;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n */\n_userTabIndex: number | null = null;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdChip>;\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(protected _renderer: Renderer2, protected _elementRef: ElementRef,\nprivate _dir: Directionality) {\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MdChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // Make sure we set our tab index at the start\n    this._updateTabIndex();\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n\n      // If we have 0 chips, attempt to focus an input (if available)\n      if (chips.length === 0) {\n        this._focusInput();\n      }\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._tabOutSubscription) {\n      this._tabOutSubscription.unsubscribe();\n    }\n  }\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * it's selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n/**\n * Associates an HTML input element with this chip list.\n * @param {?} inputElement\n * @return {?}\n */\nregisterInput(inputElement: HTMLInputElement) {\n    this._inputElement = inputElement;\n  }\n/**\n * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n * are no eligible chips.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._focusInput();\n    }\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\n_focusInput() {\n    if (this._inputElement) {\n      this._inputElement.focus();\n    }\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ code = event.keyCode;\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n    let /** @type {?} */ isInputEmpty = this._isInputEmpty(target);\n    let /** @type {?} */ isRtl = this._dir && this._dir.value == 'rtl';\n\n    let /** @type {?} */ isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let /** @type {?} */ isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let /** @type {?} */ isBackKey = (code === BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._chipSet.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip._onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and setup our destroyed focus check\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n      if (this._isValidIndex(chipIndex)) {\n        if (chip._hasFocus) {\n          // Check whether the chip is the last item\n          if (chipIndex < this.chips.length - 1) {\n            this._keyManager.setActiveItem(chipIndex);\n          } else if (chipIndex - 1 >= 0) {\n            this._keyManager.setActiveItem(chipIndex - 1);\n          }\n        }\n        if (this._keyManager.activeItemIndex === chipIndex) {\n          this._lastDestroyedIndex = chipIndex;\n        }\n\n      }\n\n      this._chipSet.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._chipSet.set(chip, true);\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n * one.\n * @return {?}\n */\nprotected _updateFocusForDestroyedChips() {\n    let /** @type {?} */ chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let /** @type {?} */ focusChip = this._keyManager.activeItem;\n\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\n\n      return !input.value;\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'mdChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    'role': 'listbox',\n    'class': 'mat-chip-list',\n\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectable': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMdChipList.prototype._lastDestroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._chipSet;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/** @type {?} */\nMdChipList.prototype._inputElement;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n * @type {?}\n */\nMdChipList.prototype._userTabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._renderer;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n/** @type {?} */\nMdChipList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  forwardRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {FocusableOption} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {SPACE, BACKSPACE, DELETE} from '../core/keyboard/keycodes';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n  CanDisable {\n\n   _chipRemove: MdChipRemove;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    (this.selected ? this.select : this.deselect).emit({chip: this});\n  }\n  protected _selected: boolean = false;\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\n * changes to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean {\n    return this._removable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Emits when the chip is focused.\n */\n_onFocus = new Subject<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * @return {?}\n */\nget ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n/**\n * Emitted when a chip is to be removed.\n */\nonRemove = new EventEmitter<MdChipEvent>();\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?}\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\n * BACKSPACE keys are pressed.\n * \n * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\n    if (this.removable) {\n      this.onRemove.emit({chip: this});\n    }\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected();\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'mdChip',\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_hasFocus = false',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_chipRemove': [{ type: ContentChild, args: [forwardRef(() => MdChipRemove), ] },],\n'selected': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._chipRemove;\n/** @type {?} */\nMdChip.prototype._selected;\n/** @type {?} */\nMdChip.prototype._selectable;\n/** @type {?} */\nMdChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emits when the chip is focused.\n * @type {?}\n */\nMdChip.prototype._onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n * \n * Example:\n * \n *     <md-chip>\n *       <md-icon mdChipRemove>cancel</md-icon>\n *     </md-chip>\n * \n * You *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\n * to properly center the icon within the chip.\n */\nexport class MdChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MdChip) {}\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick() {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdChipRemove], [matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {'class': 'mat-card-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-card-title, mat-card-title, [md-card-title], [mat-card-title],\n             [mdCardTitle], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle],\n             [mdCardSubtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {\n/**\n * Position of the actions inside the card.\n */\nalign: 'start' | 'end' = 'start';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n};\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n/** @type {?} */\nMdCardActions.propDecorators;\n/**\n * Position of the actions inside the card.\n * @type {?}\n */\nMdCardActions.prototype.align;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image], [mdCardImage], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image], [mdCardImageSmall], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image], [mdCardImageMedium], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image], [mdCardImageLarge], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image], [mdCardImageXLarge], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar], [mdCardAvatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdCommonModule} from '../core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdCommonModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    MdCommonModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\n\nexport {MdGridList} from './grid-list';\nexport {MdGridTile} from './grid-tile';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Directionality) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`md-grid-list: must pass in number of columns. ` +\n                      `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string] | null): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] | null { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: string): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar], [mdGridAvatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule, MdLineModule, MdPseudoCheckboxModule, MdRippleModule} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {\n  MdDividerCssMatStyler,\n  MdList,\n  MdListAvatarCssMatStyler,\n  MdListCssMatStyler,\n  MdListDivider,\n  MdListIconCssMatStyler,\n  MdListItem,\n  MdListSubheaderCssMatStyler,\n  MdNavListCssMatStyler\n} from './list';\nimport {MdListOption, MdSelectionList} from './selection-list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, MdCommonModule, MdPseudoCheckboxModule, CommonModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    MdCommonModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n    MdPseudoCheckboxModule,\n    MdSelectionList,\n    MdListOption\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n    MdSelectionList,\n    MdListOption\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\n\nexport {MdListBase,_MdListMixinBase,MdListItemBase,_MdListItemMixinBase,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list';\nexport {MdSelectionListBase,_MdSelectionListMixinBase,MdSelectionListOptionEvent,MdListOption,MdSelectionList} from './selection-list';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  Optional,\n  Renderer2,\n  EventEmitter,\n  Output,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  forwardRef,\n  Inject,\n} from '@angular/core';\nimport {coerceBooleanProperty, SelectionModel, MdLine, MdLineSetter} from '../core';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Subscription} from 'rxjs/Subscription';\nimport {SPACE} from '../core/keyboard/keycodes';\nimport {FocusableOption} from '../core/a11y/focus-key-manager';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {RxChain, switchMap, startWith} from '../core/rxjs/index';\nimport {merge} from 'rxjs/observable/merge';\nexport class MdSelectionListBase {}\nexport const /** @type {?} */ _MdSelectionListMixinBase = mixinDisabled(MdSelectionListBase);\n\n\nexport interface MdSelectionListOptionEvent {\n  option: MdListOption;\n}\n\nconst /** @type {?} */ FOCUSED_STYLE: string = 'mat-list-item-focus';\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is checked.\n */\nexport class MdListOption implements AfterContentInit, OnDestroy, FocusableOption {\nprivate _lineSetter: MdLineSetter;\nprivate _disableRipple: boolean = false;\nprivate _selected: boolean = false;\n/**\n * Whether the checkbox is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _value: any;\n/**\n * Whether the option has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Whether the ripple effect on click should be disabled. This applies only to list items that are\n * part of a selection list. The value of `disableRipple` on the `md-selection-list` overrides\n * this flag\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\n\n   _lines: QueryList<MdLine>;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n */\ncheckboxPosition: 'before' | 'after' = 'after';\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} val\n * @return {?}\n */\nset value( val: any) { this._value = coerceBooleanProperty(val); }\n/**\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} val\n * @return {?}\n */\nset selected( val: boolean) { this._selected = coerceBooleanProperty(val); }\n/**\n * Emitted when the option is focused.\n */\nonFocus = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is selected.\n */\nselectChange = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is deselected.\n */\ndeselected = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is destroyed.\n */\ndestroyed = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _changeDetector\n * @param {?} selectionList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _changeDetector: ChangeDetectorRef,\npublic selectionList: MdSelectionList) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n\n    if (this.selectionList.disabled) {\n      this.disabled = true;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroyed.emit({option: this});\n  }\n/**\n * @return {?}\n */\ntoggle(): void {\n    this.selected = !this.selected;\n    this.selectionList.selectedOptions.toggle(this);\n    this._changeDetector.markForCheck();\n  }\n/**\n * Allows for programmatic focusing of the option.\n * @return {?}\n */\nfocus(): void {\n    this._element.nativeElement.focus();\n    this.onFocus.emit({option: this});\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && !this.selectionList.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n    }\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._hasFocus = true;\n    this._renderer.addClass(this._element.nativeElement, FOCUSED_STYLE);\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, FOCUSED_STYLE);\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-option, mat-list-option',\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdSelectionList, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => MdSelectionList), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'checkboxPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'selectChange': [{ type: Output },],\n'deselected': [{ type: Output },],\n'destroyed': [{ type: Output },],\n};\n}\n\nfunction MdListOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListOption.ctorParameters;\n/** @type {?} */\nMdListOption.propDecorators;\n/** @type {?} */\nMdListOption.prototype._lineSetter;\n/** @type {?} */\nMdListOption.prototype._disableRipple;\n/** @type {?} */\nMdListOption.prototype._selected;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdListOption.prototype._disabled;\n/** @type {?} */\nMdListOption.prototype._value;\n/**\n * Whether the option has focus.\n * @type {?}\n */\nMdListOption.prototype._hasFocus;\n/** @type {?} */\nMdListOption.prototype._lines;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdListOption.prototype.checkboxPosition;\n/**\n * Emitted when the option is focused.\n * @type {?}\n */\nMdListOption.prototype.onFocus;\n/**\n * Emitted when the option is selected.\n * @type {?}\n */\nMdListOption.prototype.selectChange;\n/**\n * Emitted when the option is deselected.\n * @type {?}\n */\nMdListOption.prototype.deselected;\n/**\n * Emitted when the option is destroyed.\n * @type {?}\n */\nMdListOption.prototype.destroyed;\n/** @type {?} */\nMdListOption.prototype._renderer;\n/** @type {?} */\nMdListOption.prototype._element;\n/** @type {?} */\nMdListOption.prototype._changeDetector;\n/** @type {?} */\nMdListOption.prototype.selectionList;\n}\n\nexport class MdSelectionList extends _MdSelectionListMixinBase\n  implements FocusableOption, CanDisable, AfterContentInit, OnDestroy {\nprivate _disableRipple: boolean = false;\n/**\n * Tab index for the selection-list.\n */\n_tabIndex = 0;\n/**\n * Subscription to all list options' onFocus events\n */\nprivate _optionFocusSubscription: Subscription;\n/**\n * Subscription to all list options' destroy events\n */\nprivate _optionDestroyStream: Subscription;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdListOption>;\n/**\n * The option components contained within this selection-list.\n */\noptions: QueryList<MdListOption>;\n/**\n * options which are selected.\n */\nselectedOptions: SelectionModel<MdListOption> = new SelectionModel<MdListOption>(true);\n/**\n * Whether the ripple effect should be disabled on the list-items or not.\n * This flag only has an effect for `mat-selection-list` components.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {?} _element\n */\nconstructor(private _element: ElementRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MdListOption>(this.options).withWrap();\n\n    if (this.disabled) {\n      this._tabIndex = -1;\n    }\n\n    this._optionFocusSubscription = this._onFocusSubscription();\n    this._optionDestroyStream = this._onDestroySubscription();\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._optionDestroyStream) {\n      this._optionDestroyStream.unsubscribe();\n    }\n\n    if (this._optionFocusSubscription) {\n      this._optionFocusSubscription.unsubscribe();\n    }\n  }\n/**\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * Map all the options' destroy event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onDestroySubscription(): Subscription {\n    return RxChain.from(this.options.changes)\n      .call(startWith, this.options)\n      .call(switchMap, (options: MdListOption[]) => {\n        return merge(...options.map(option => option.destroyed));\n      }).subscribe((e: MdSelectionListOptionEvent) => {\n        let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\n        if (e.option._hasFocus) {\n          // Check whether the option is the last item\n          if (optionIndex < this.options.length - 1) {\n            this._keyManager.setActiveItem(optionIndex);\n          } else if (optionIndex - 1 >= 0) {\n            this._keyManager.setActiveItem(optionIndex - 1);\n          }\n        }\n        e.option.destroyed.unsubscribe();\n      });\n  }\n/**\n * Map all the options' onFocus event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onFocusSubscription(): Subscription {\n    return RxChain.from(this.options.changes)\n      .call(startWith, this.options)\n      .call(switchMap, (options: MdListOption[]) => {\n        return merge(...options.map(option => option.onFocus));\n      }).subscribe((e: MdSelectionListOptionEvent) => {\n      let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\n      this._keyManager.updateActiveItemIndex(optionIndex);\n    });\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Toggles the selected state of the currently focused option.\n * @return {?}\n */\nprivate _toggleSelectOnFocusedOption(): void {\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedOption: MdListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n      }\n    }\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of options.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-selection-list, mat-selection-list',\n  inputs: ['disabled'],\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': '_tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: ContentChildren, args: [MdListOption, ] },],\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdSelectionList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionList.ctorParameters;\n/** @type {?} */\nMdSelectionList.propDecorators;\n/** @type {?} */\nMdSelectionList.prototype._disableRipple;\n/**\n * Tab index for the selection-list.\n * @type {?}\n */\nMdSelectionList.prototype._tabIndex;\n/**\n * Subscription to all list options' onFocus events\n * @type {?}\n */\nMdSelectionList.prototype._optionFocusSubscription;\n/**\n * Subscription to all list options' destroy events\n * @type {?}\n */\nMdSelectionList.prototype._optionDestroyStream;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdSelectionList.prototype._keyManager;\n/**\n * The option components contained within this selection-list.\n * @type {?}\n */\nMdSelectionList.prototype.options;\n/**\n * options which are selected.\n * @type {?}\n */\nMdSelectionList.prototype.selectedOptions;\n/** @type {?} */\nMdSelectionList.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n/**\n * \\@docs-private\n */\nexport class MdListBase {}\nexport const /** @type {?} */ _MdListMixinBase = mixinDisableRipple(MdListBase);\n/**\n * \\@docs-private\n */\nexport class MdListItemBase {}\nexport const /** @type {?} */ _MdListItemMixinBase = mixinDisableRipple(MdListItemBase);\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\nexport class MdList extends _MdListMixinBase implements CanDisableRipple {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {'class': 'mat-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {'class': 'mat-nav-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {'class': 'mat-divider'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar], [mdListAvatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon], [mdListIcon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader], [mdSubheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\nexport class MdListItem extends _MdListItemMixinBase implements AfterContentInit, CanDisableRipple {\nprivate _lineSetter: MdLineSetter;\nprivate _isNavList: boolean = false;\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    super();\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && this._isNavList && !this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdCommonModule} from '../core';\nimport {MdDrawer, MdDrawerContainer} from './drawer';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\n  exports: [MdDrawerContainer, MdDrawer, MdSidenavContainer, MdSidenav, MdCommonModule],\n  declarations: [MdDrawerContainer, MdDrawer, MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\n\nexport {throwMdDuplicatedDrawerError,MdDrawerToggleResult,MdDrawer,MdDrawerContainer} from './drawer';\nexport {MdSidenav,MdSidenavContainer} from './sidenav';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdDrawer, MdDrawerContainer} from './drawer';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nexport class MdSidenav extends MdDrawer {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  templateUrl: 'drawer.html',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n}\n\nexport class MdSidenavContainer extends MdDrawerContainer {\n   _drawers;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  templateUrl: 'drawer-container.html',\n  styleUrls: [\n    'drawer.css',\n    'drawer-transitions.css',\n  ],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdSidenav, ] },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._drawers;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer2,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  Inject,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {animate, state, style, transition, trigger, AnimationEvent} from '@angular/animations';\nimport {Directionality, coerceBooleanProperty} from '../core';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {first, takeUntil, startWith} from '../core/rxjs/index';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {merge} from 'rxjs/observable/merge';\n/**\n * Throws an exception when two MdDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MdDrawerToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdDrawerToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerToggleResult.prototype.type;\n/** @type {?} */\nMdDrawerToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-drawer> component.\n * \n * This component corresponds to a drawer that can be opened on the drawer container.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdDrawer implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n */\nprivate _enableAnimations = false;\n/**\n * The side that the drawer is attached to.\n * @return {?}\n */\nget position() { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\nprivate _position: 'start' | 'end' = 'start';\n/**\n * @deprecated\n * @return {?}\n */\nget align() { return this.position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) { this.position = value; }\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the drawer can be closed with the escape key or not.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the drawer is opened.\n */\nprivate _opened: boolean = false;\n/**\n * Emits whenever the drawer has started animating.\n */\n_animationStarted = new EventEmitter<void>();\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n */\n_isAnimating = false;\n/**\n * Current state of the sidenav animation.\n */\n_animationState: 'open-instant' | 'open' | 'void' = 'void';\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do drawer breaking changes.\n * @deprecated\n */\nprivate _currentTogglePromise: Promise<MdDrawerToggleResult> | null;\n/**\n * Event emitted when the drawer is fully opened.\n */\nonOpen = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer is fully closed.\n */\nonClose = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer's position changes.\n */\nonPositionChanged = new EventEmitter<void>();\n/**\n * @deprecated\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\n    this.onOpen.subscribe(() => {\n      if (this._doc) {\n        this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n      }\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => this._restoreFocus());\n  }\n/**\n * If focus is currently inside the drawer, restores it to where it was before the drawer\n * opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeDrawerWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n    this._enableAnimations = true;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the drawer is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open the drawer.\n * @return {?}\n */\nopen(): Promise<MdDrawerToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close the drawer.\n * @return {?}\n */\nclose(): Promise<MdDrawerToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this drawer.\n * @param {?=} isOpen Whether the drawer should be open.\n * @return {?}\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdDrawerToggleResult> {\n    if (!this._isAnimating) {\n      this._opened = isOpen;\n\n      if (isOpen) {\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      } else {\n        this._animationState = 'void';\n      }\n\n      this._currentTogglePromise = new Promise(resolve => {\n        first.call(isOpen ? this.onOpen : this.onClose).subscribe(resolve);\n      });\n\n      if (this._focusTrap) {\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\n      }\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return /** @type {?} */(( this._currentTogglePromise));\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * @return {?}\n */\n_onAnimationStart() {\n    this._isAnimating = true;\n    this._animationStarted.emit();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if (toState === 'open' && fromState === 'void') {\n      this.onOpen.emit(new MdDrawerToggleResult('open', true));\n    } else if (toState === 'void' && fromState === 'open') {\n      this.onClose.emit(new MdDrawerToggleResult('close', true));\n    }\n\n    // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n    // the end if animations are disabled. Make this call async to ensure that it still fires\n    // at the appropriate time.\n    Promise.resolve().then(() => {\n      this._isAnimating = false;\n      this._currentTogglePromise = null;\n    });\n  }\n/**\n * @return {?}\n */\nget _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-drawer, mat-drawer',\n  templateUrl: 'drawer.html',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n          animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input },],\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onPositionChanged': [{ type: Output, args: ['positionChanged', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdDrawer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawer.ctorParameters;\n/** @type {?} */\nMdDrawer.propDecorators;\n/** @type {?} */\nMdDrawer.prototype._focusTrap;\n/** @type {?} */\nMdDrawer.prototype._elementFocusedBeforeDrawerWasOpened;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n * @type {?}\n */\nMdDrawer.prototype._enableAnimations;\n/** @type {?} */\nMdDrawer.prototype._position;\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdDrawer.prototype.mode;\n/** @type {?} */\nMdDrawer.prototype._disableClose;\n/**\n * Whether the drawer is opened.\n * @type {?}\n */\nMdDrawer.prototype._opened;\n/**\n * Emits whenever the drawer has started animating.\n * @type {?}\n */\nMdDrawer.prototype._animationStarted;\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n * @type {?}\n */\nMdDrawer.prototype._isAnimating;\n/**\n * Current state of the sidenav animation.\n * @type {?}\n */\nMdDrawer.prototype._animationState;\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do drawer breaking changes.\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype._currentTogglePromise;\n/**\n * Event emitted when the drawer is fully opened.\n * @type {?}\n */\nMdDrawer.prototype.onOpen;\n/**\n * Event emitted when the drawer is fully closed.\n * @type {?}\n */\nMdDrawer.prototype.onClose;\n/**\n * Event emitted when the drawer's position changes.\n * @type {?}\n */\nMdDrawer.prototype.onPositionChanged;\n/**\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype.onAlignChanged;\n/** @type {?} */\nMdDrawer.prototype._elementRef;\n/** @type {?} */\nMdDrawer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDrawer.prototype._doc;\n}\n\n/**\n * <md-drawer-container> component.\n * \n * This is the parent component to one or two <md-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdDrawerContainer implements AfterContentInit {\n   _drawers: QueryList<MdDrawer>;\n/**\n * The drawer child with the `start` position.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The drawer child with the `end` position.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the drawer backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The drawer at the start/end position, independent of direction.\n */\nprivate _start: MdDrawer | null;\nprivate _end: MdDrawer | null;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdDrawer | null;\nprivate _right: MdDrawer | null;\n/**\n * Inline styles to be applied to the container.\n */\n_styles: { marginLeft: string; marginRight: string; transform: string; };\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.change.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    startWith.call(this._drawers.changes, null).subscribe(() => {\n      this._validateDrawers();\n      this._drawers.forEach((drawer: MdDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n      });\n    });\n  }\n/**\n * Calls `open` of both start and end drawers\n * @return {?}\n */\nopen(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n/**\n * Calls `close` of both start and end drawers\n * @return {?}\n */\nclose(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n/**\n * Subscribes to drawer events in order to set a class on the main container element when the\n * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerToggle(drawer: MdDrawer): void {\n    takeUntil.call(drawer._animationStarted, this._drawers.changes).subscribe(() => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-transition');\n      this._updateStyles();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      takeUntil.call(merge(drawer.onOpen, drawer.onClose), this._drawers.changes).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n/**\n * Subscribes to drawer onPositionChanged event in order to re-validate drawers when the position\n * changes.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerPosition(drawer: MdDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    takeUntil.call(drawer.onPositionChanged, this._drawers.changes).subscribe(() =>\n        first.call(this._ngZone.onMicrotaskEmpty).subscribe(() => this._validateDrawers()));\n  }\n/**\n * Toggles the 'mat-drawer-opened' class on the main 'md-drawer-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-drawer-opened');\n    }\n  }\n/**\n * Validate the state of the drawer children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMdDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMdDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n/**\n * @return {?}\n */\n_closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => /** @type {?} */(( drawer)).close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\n        || (this._isDrawerOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\n  }\n/**\n * @param {?} drawer\n * @return {?}\n */\nprivate _isDrawerOpen(drawer: MdDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n/**\n * Return the width of the drawer, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} drawer\n * @param {?} mode\n * @return {?}\n */\nprivate _getDrawerEffectiveWidth(drawer: MdDrawer, mode: string): number {\n    return (this._isDrawerOpen(drawer) && drawer.mode == mode) ? drawer._width : 0;\n  }\n/**\n * Recalculates and updates the inline styles. Note that this\n * should be used sparingly, because it causes a reflow.\n * @return {?}\n */\nprivate _updateStyles() {\n    const /** @type {?} */ marginLeft = this._left ? this._getDrawerEffectiveWidth(this._left, 'side') : 0;\n    const /** @type {?} */ marginRight = this._right ? this._getDrawerEffectiveWidth(this._right, 'side') : 0;\n    const /** @type {?} */ leftWidth = this._left ? this._getDrawerEffectiveWidth(this._left, 'push') : 0;\n    const /** @type {?} */ rightWidth = this._right ? this._getDrawerEffectiveWidth(this._right, 'push') : 0;\n\n    this._styles = {\n      marginLeft: `${marginLeft}px`,\n      marginRight: `${marginRight}px`,\n      transform: `translate3d(${leftWidth - rightWidth}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-drawer-container, mat-drawer-container',\n  templateUrl: 'drawer-container.html',\n  styleUrls: [\n    'drawer.css',\n    'drawer-transitions.css',\n  ],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdDrawer, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdDrawerContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawerContainer.ctorParameters;\n/** @type {?} */\nMdDrawerContainer.propDecorators;\n/** @type {?} */\nMdDrawerContainer.prototype._drawers;\n/**\n * Event emitted when the drawer backdrop is clicked.\n * @type {?}\n */\nMdDrawerContainer.prototype.backdropClick;\n/**\n * The drawer at the start/end position, independent of direction.\n * @type {?}\n */\nMdDrawerContainer.prototype._start;\n/** @type {?} */\nMdDrawerContainer.prototype._end;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdDrawerContainer.prototype._left;\n/** @type {?} */\nMdDrawerContainer.prototype._right;\n/**\n * Inline styles to be applied to the container.\n * @type {?}\n */\nMdDrawerContainer.prototype._styles;\n/** @type {?} */\nMdDrawerContainer.prototype._dir;\n/** @type {?} */\nMdDrawerContainer.prototype._element;\n/** @type {?} */\nMdDrawerContainer.prototype._renderer;\n/** @type {?} */\nMdDrawerContainer.prototype._ngZone;\n/** @type {?} */\nMdDrawerContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {BidiModule} from '../core/bidi/index';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, StyleModule, BidiModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {HammerInput} from '../core';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase { }\nexport const /** @type {?} */ _MdSliderMixinBase = mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() { return this._max; }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() { return this._min; }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * The value of the slider when the slide start event fires.\n */\nprivate _valueOnSlideStart: number | null;\n/**\n * Reference to the inner slider wrapper element.\n */\nprivate _sliderWrapper: ElementRef;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super();\n    this._focusOriginMonitor\n        .monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let /** @type {?} */ oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let /** @type {?} */ oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput | null) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let /** @type {?} */ oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\nprivate _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\nprivate _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n'_sliderWrapper': [{ type: ViewChild, args: ['sliderWrapper', ] },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/**\n * The value of the slider when the slide start event fires.\n * @type {?}\n */\nMdSlider.prototype._valueOnSlideStart;\n/**\n * Reference to the inner slider wrapper element.\n * @type {?}\n */\nMdSlider.prototype._sliderWrapper;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._changeDetectorRef;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MdSlideToggle} from './slide-toggle';\nimport {\n  FOCUS_ORIGIN_MONITOR_PROVIDER,\n  GestureConfig,\n  MdCommonModule,\n  MdRippleModule,\n} from '../core';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, MdCommonModule, PlatformModule],\n  exports: [MdSlideToggle, MdCommonModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    FOCUS_ORIGIN_MONITOR_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle} from './slide-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  applyCssTransform,\n  FocusOrigin,\n  FocusOriginMonitor,\n  HammerInput,\n  MdRipple,\n  RippleRef,\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextUniqueId = 0;\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\n/**\n * Change event object emitted by a MdSlideToggle.\n */\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSlideToggleMixinBase =\n  mixinColor(mixinDisableRipple(mixinDisabled(MdSlideToggleBase)), 'accent');\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, CanDisableRipple {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId: string = `md-slide-toggle-${++nextUniqueId}`;\nprivate _slideRenderer: SlideToggleRenderer;\nprivate _required: boolean = false;\nprivate _checked: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string | null = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string | null = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle element is checked or not\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    this._checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * This function will called if the underlying input changed its value through user interaction.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Sync the value from the underlying input element with the slide-toggle component.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event if the native input emitted one.\n    // It is important to only emit it, if the native input triggered one, because we don't want\n    // to trigger a change event, when the `checked` variable changes programmatically.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // In some situations the user will release the mouse on the label element. The label element\n    // redirects the click to the underlying input element and will result in a value change.\n    // Prevent the default behavior if dragging, because the value will be set after drag.\n    if (this._slideRenderer.dragging) {\n      event.preventDefault();\n    }\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = !!value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n    this.onChange(this.checked);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'checked': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} _elementRef\n * @param {?} platform\n */\nconstructor(private _elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect, MdSelectTrigger, MD_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MdCommonModule, MdOptionModule} from '../core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdSelectTrigger, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect, MdSelectTrigger],\n  providers: [MD_SELECT_SCROLL_STRATEGY_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\n\nexport {SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect} from './select';\nexport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n  Directive,\n  isDevMode,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {filter, startWith} from '@angular/cdk/rxjs';\nimport {\n  ConnectedOverlayDirective,\n  Overlay,\n  RepositionScrollStrategy,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ScrollStrategy,\n  ViewportRuler\n} from '@angular/cdk/overlay';\nimport {merge} from 'rxjs/observable/merge';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  getMdSelectDynamicMultipleError,\n  getMdSelectNonArrayValueError,\n  getMdSelectNonFunctionValueError\n} from './select-errors';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\nimport {MdOptgroup, MdOption, MdOptionSelectionChange} from '../core/option/index';\nimport {\n  FloatPlaceholderType,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  PlaceholderOptions\n} from '../core/placeholder/placeholder-options';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Default minimum width of the trigger based on the CSS.\n * Used as a fallback for server-side rendering.\n * \\@docs-private\n */\nconst SELECT_TRIGGER_MIN_WIDTH = 112;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MD_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase = mixinColor(mixinDisabled(MdSelectBase), 'primary');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport class MdSelectTrigger {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-select-trigger, mat-select-trigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectTrigger.ctorParameters;\n}\n\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor, CanDisable {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription | null;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager<MdOption>;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * User-supplied override of the trigger element.\n */\ncustomTrigger: MdSelectTrigger;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\n * is a value from an option. The second is a value from the selection. A boolean\n * should be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMdSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setOptionDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _overlay\n * @param {?} _platform\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _overlay: Overlay,\nprivate _platform: Platform,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions,\nprivate _scrollStrategyFactory) {\n\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (!this._selectionModel || this._selectionModel.isEmpty()) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._platform.isBrowser ? this._getTriggerRect().width :\n        SELECT_TRIGGER_MIN_WIDTH;\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\n_hasValue(): boolean {\n    return this._selectionModel && this._selectionModel.hasValue();\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ isInvalid = this._control && this._control.invalid;\n    const /** @type {?} */ isTouched = this._control && this._control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this._control ? this._control.value : this._value);\n    });\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\n    const /** @type {?} */ correspondingOption = this.options.find((option: MdOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch ( /** @type {?} */error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MdOption>(this.options).withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n    this._setOptionDisableRipple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\n    if (this.options) {\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth = this._triggerWidth - 13;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n      selectedOptionOffset += MdOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n          this.options, this.optionGroups);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      let /** @type {?} */ groupLabels = MdOption.countGroupLabelsBeforeOption(0, this.options, this.optionGroups);\n\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1 -\n          (groupLabels * SELECT_ITEM_HEIGHT);\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ? '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': '_isErrorState()',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Overlay, },\n{type: Platform, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'customTrigger': [{ type: ContentChild, args: [MdSelectTrigger, ] },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdSelect.prototype._compareWith;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMdSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/**\n * User-supplied override of the trigger element.\n * @type {?}\n */\nMdSelect.prototype.customTrigger;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/** @type {?} */\nMdSelect.prototype._value;\n/** @type {?} */\nMdSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMdSelect.prototype.valueChange;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._overlay;\n/** @type {?} */\nMdSelect.prototype._platform;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._parentForm;\n/** @type {?} */\nMdSelect.prototype._parentFormGroup;\n/** @type {?} */\nMdSelect.prototype._control;\n/** @type {?} */\nMdSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nexport function getMdSelectNonFunctionValueError(): Error {\n  return Error('Cannot assign a non-function value to `compareWith`.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: 'scale(0.75)'\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: 'scale(0.75)'\n  })),\n  transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '@angular/cdk/overlay';\nimport {\n  MdRippleModule,\n  MdCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  FocusOriginMonitor,\n} from '../core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule],\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\n\nexport {MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton} from './radio';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n\n// Increasing integer for generating unique ids for radio components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton | null;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${nextUniqueId++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the radio group is required.\n */\nprivate _required: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is disabled\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * Whether the radio group is required\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * Whether the radio group is required.\n * @type {?}\n */\nMdRadioGroup.prototype._required;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(mixinDisableRipple(MdRadioButtonBase), 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\nprivate _uniqueId: string = `md-radio-${++nextUniqueId}`;\n/**\n * The unique ID for the radio button.\n */\nid: string = this._uniqueId;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the radio button is required.\n * @return {?}\n */\nget required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Whether this radio is required.\n */\nprivate _required: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    const /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/** @type {?} */\nMdRadioButton.prototype._uniqueId;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Whether this radio is required.\n * @type {?}\n */\nMdRadioButton.prototype._required;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMdRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MdRippleModule, MdCommonModule, FocusOriginMonitor} from '../core';\nimport {MdCheckbox} from './checkbox';\nimport {MdCheckboxRequiredValidator} from './checkbox-required-validator';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserversModule],\n  exports: [MdCheckbox, MdCheckboxRequiredValidator, MdCommonModule],\n  declarations: [MdCheckbox, MdCheckboxRequiredValidator],\n  providers: [FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox} from './checkbox';\nexport {_MdCheckboxRequiredValidator,MD_CHECKBOX_REQUIRED_VALIDATOR,MdCheckboxRequiredValidator} from './checkbox-required-validator';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const /** @type {?} */ _MdCheckboxRequiredValidator = CheckboxRequiredValidator;\n\nexport const /** @type {?} */ MD_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdCheckboxRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `md-checkbox`.\n */\nexport class MdCheckboxRequiredValidator extends _MdCheckboxRequiredValidator {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-checkbox[required][formControlName],\n             mat-checkbox[required][formControlName],\n             md-checkbox[required][formControl], md-checkbox[required][ngModel],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MD_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxRequiredValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin, FocusOriginMonitor, MdRipple, RippleRef} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n\n// Increasing integer for generating unique ids for checkbox components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdCheckboxMixinBase =\n  mixinColor(mixinDisableRipple(mixinDisabled(MdCheckboxBase)), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase implements ControlValueAccessor, AfterViewInit,\n    OnDestroy, CanColor, CanDisable, CanDisableRipple {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\nprivate _uniqueId: string = `md-checkbox-${++nextUniqueId}`;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/** @type {?} */\nMdCheckbox.prototype._uniqueId;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, MdRippleModule, StyleModule} from '../core';\nimport {\n  MdAnchor,\n  MdButton,\n  MdMiniFab,\n  MdButtonCssMatStyler,\n  MdFab,\n  MdIconButtonCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\n\n\nexport {MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n    StyleModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdCommonModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {FocusOriginMonitor} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisableRipple, mixinDisableRipple} from '../core/common-behaviors/disable-ripple';\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MdMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonBase.prototype._renderer;\n/** @type {?} */\nMdButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MdButtonBase)));\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `button[md-button], button[md-raised-button], button[md-icon-button],\n             button[md-fab], button[md-mini-fab],\n             button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n];\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusOriginMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} platform\n * @param {?} focusOriginMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusOriginMonitor: FocusOriginMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusOriginMonitor);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  MdCommonModule,\n  StyleModule,\n} from '../core';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, StyleModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    MdCommonModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\n\nexport {ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher, FocusOriginMonitor} from '../core';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MdButtonToggleGroupBase {}\nexport const /** @type {?} */ _MdButtonToggleGroupMixinBase = mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle | null;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup extends _MdButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle | null = null;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle>;\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n/** @type {?} */\nMdButtonToggleGroup.prototype._changeDetector;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple extends _MdButtonToggleGroupMixinBase\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit, OnDestroy {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _changeDetectorRef\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let /** @type {?} */ groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabelledby;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMdButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._changeDetectorRef;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MdLineModule} from './line/line';\nimport {MdOptionModule} from './option/index';\nimport {MdPseudoCheckboxModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n// Re-exports of the CDK to avoid breaking changes.\nexport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n} from '@angular/cdk/coercion';\n\nexport {\n  ObserversModule,\n  ObserveContent,\n} from '@angular/cdk/observers';\n\nexport {\n  SelectionModel\n} from '@angular/cdk/collections';\n\n// RTL\nexport {Dir, Direction, Directionality, BidiModule} from './bidi/index';\n\nexport {MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './option/index';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from '@angular/cdk/platform';\n\n// Overlay\nexport {OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,ComponentType,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,VIEWPORT_RULER_PROVIDER,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollingVisibility,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy} from '@angular/cdk/overlay';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n  InteractivityChecker,\n  FocusTrap,\n  FocusTrapFactory,\n  FocusTrapDeprecatedDirective,\n  FocusTrapDirective,\n  isFakeMousedownFromScreenReader,\n  A11yModule,\n} from '@angular/cdk/a11y';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,A,Z} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdPseudoCheckboxModule,MdPseudoCheckboxState,MdPseudoCheckbox} from './selection/index';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\n\n// Common material module\nexport {MdCommonModule, MATERIAL_SANITY_CHECKS} from './common-behaviors/common-module';\n\n// Datetime\nexport {NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './datetime/index';\n\n// Placeholder\nexport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from './placeholder/placeholder-options';\n\n// Error\nexport {\n  ErrorStateMatcher,\n  ErrorOptions,\n  MD_ERROR_GLOBAL_OPTIONS,\n  defaultErrorStateMatcher,\n  showOnDirtyErrorStateMatcher\n} from './error/error-options';\nexport class MdCoreModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    BidiModule,\n    MdRippleModule,\n    ObserversModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdPseudoCheckboxModule,\n  ],\n  exports: [\n    MdLineModule,\n    BidiModule,\n    MdRippleModule,\n    ObserversModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdPseudoCheckboxModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport { InjectionToken } from '@angular/core';\n/**\n * InjectionToken that can be used to specify the global placeholder options.\n */\nexport const MD_PLACEHOLDER_GLOBAL_OPTIONS =\n  new InjectionToken<PlaceholderOptions>('md-placeholder-global-options');\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nexport interface PlaceholderOptions {\n  float?: FloatPlaceholderType;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\n\nexport {DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MdDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const /** @type {?} */ MD_DATE_FORMATS = new InjectionToken<MdDateFormats>('md-date-formats');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional, LOCALE_ID} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} localeId\n */\nconstructor(  localeId: any) {\n    super();\n    super.setLocale(localeId);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n}\n\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nimport {PlatformModule} from '../platform/index';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Platform} from '../platform/platform';\nimport {of as observableOf} from 'rxjs/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget | null;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return observableOf(null);\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ cachedInfo = this._elementInfo.get(element); /** @type {?} */((\n      cachedInfo)).checkChildren = checkChildren;\n      return /** @type {?} */(( cachedInfo)).subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?=} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      const /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n        shouldSet ? elementInfo.renderer.addClass(element, className) :\n                    elementInfo.renderer.removeClass(element, className);\n      };\n\n      toggleClass('cdk-focused', !!origin);\n      toggleClass('cdk-touch-focused', origin === 'touch');\n      toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n      toggleClass('cdk-mouse-focused', origin === 'mouse');\n      toggleClass('cdk-program-focused', origin === 'program');\n    }\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    elementInfo.subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\n_onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    elementInfo.subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n/** @type {?} */\nFocusOriginMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\nprivate _monitorSubscription: Subscription;\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer2) {\n    this._monitorSubscription = this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._monitorSubscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype._monitorSubscription;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusOriginMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\n}\n/**\n * \\@docs-private\n */\nexport const FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdPseudoCheckboxModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdPseudoCheckboxModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  QueryList,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\n    return this.viewValue;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MdOption>,\n    optionGroups: QueryList<MdOptgroup>): number {\n\n    if (optionGroups.length) {\n      let /** @type {?} */ optionsArray = options.toArray();\n      let /** @type {?} */ groups = optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {MdRipple} from './ripple';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * @return {?}\n */\nget _matRippleTrigger() { return this.trigger; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleTrigger(v) { this.trigger = v; }\n/**\n * @return {?}\n */\nget _matRippleCentered() { return this.centered; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleCentered(v) { this.centered = v; }\n/**\n * @return {?}\n */\nget _matRippleDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matRippleRadius() { return this.radius; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleRadius(v) { this.radius = v; }\n/**\n * @return {?}\n */\nget _matRippleSpeedFactor() { return this.speedFactor; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleSpeedFactor(v) { this.speedFactor = v; }\n/**\n * @return {?}\n */\nget _matRippleColor() { return this.color; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleColor(v) { this.color = v; }\n/**\n * @return {?}\n */\nget _matRippleUnbounded() { return this.unbounded; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleUnbounded(v) { this.unbounded = v; }\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n'_matRippleTrigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'_matRippleCentered': [{ type: Input, args: ['matRippleCentered', ] },],\n'_matRippleDisabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'_matRippleRadius': [{ type: Input, args: ['matRippleRadius', ] },],\n'_matRippleSpeedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'_matRippleColor': [{ type: Input, args: ['matRippleColor', ] },],\n'_matRippleUnbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matCellDef],\n  [matColumnDef],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matHeaderCellDef],\n  [matHeaderRowDef],\n  [matLine],\n  [matRowDef],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  [matInput],\n  [matPrefix],\n  [matSuffix],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-header-row,\n  mat-hint,\n  mat-icon,\n  mat-input-container,\n  mat-form-field,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdCellDef],\n  [mdColumnDef],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdHeaderCellDef],\n  [mdHeaderRowDef],\n  [mdLine],\n  [mdRowDef],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  [mdInput],\n  [mdPrefix],\n  [mdSuffix],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-header-row,\n  md-hint,\n  md-icon,\n  md-input-container,\n  md-form-field,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * Current version of Angular Material.\n */\nexport const VERSION = new Version('2.0.0-beta.8-0f6a2ec');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["Subject","tslib_1.__extends","Output","ChangeDetectorRef","Optional","Injectable","EventEmitter","Input","ChangeDetectionStrategy","ViewEncapsulation","Component","coerceBooleanProperty","Inject","Directive","DOWN_ARROW","Validators","NG_VALIDATORS","Directionality","ViewContainerRef","NgZone","Overlay","OverlayState","ComponentPortal","ESCAPE","InjectionToken","ElementRef","ENTER","PAGE_UP","RIGHT_ARROW","PAGE_DOWN","END","UP_ARROW","LEFT_ARROW","first","switchMap","RxChain","merge","map","of","ViewChild","ActiveDescendantKeyManager","OverlayModule","CommonModule","NgModule","SkipSelf","Location","TemplatePortal","TemplateRef","PortalHostDirective","DOCUMENT","FocusTrapFactory","transition","animate","state","style","trigger","BasePortalHost","Self","filter","ContentChildren","PlatformModule","observableOf","Platform","Renderer2","ScrollDispatchModule","ObserversModule","PortalModule","auditTime","fromEvent","ViewportRuler$1","takeUntil","ContentChild","TemplatePortalDirective","LIVE_ANNOUNCER_PROVIDER","Injector","LiveAnnouncer","NgControl","FormGroupDirective","getSupportedInputTypes","startWith","nextUniqueId","Attribute","Http","DomSanitizer","share","finallyOperator","forkJoin","Observable","doOperator","_throw","forwardRef","DELETE","FocusKeyManager","HAMMER_GESTURE_CONFIG","BidiModule","coerceNumberProperty","NG_VALUE_ACCESSOR","NgForm","ViewportRuler","isDevMode","HOME","SPACE","VIEWPORT_RULER_PROVIDER","A11yModule","VIEWPORT_RULER_PROVIDER$1","Version"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}