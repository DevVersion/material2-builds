{"version":3,"file":"material.umd.js","sources":["../../src/lib/index.ts","../../src/lib/public_api.ts","../../src/lib/module.ts","../../src/lib/expansion/index.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/accordion-item.ts","../../src/lib/expansion/accordion.ts","../../src/lib/core/data-table/index.ts","../../src/lib/core/data-table/data-source.ts","../../src/lib/core/data-table/data-table.ts","../../src/lib/core/data-table/cell.ts","../../src/lib/core/data-table/row.ts","../../src/lib/datepicker/index.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/autocomplete/index.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/core/a11y/activedescendant-key-manager.ts","../../src/lib/dialog/index.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-injector.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/menu/index.ts","../../src/lib/menu/menu.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/tooltip/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/toolbar/index.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/tabs/index.ts","../../src/lib/tabs/tab-nav-bar/index.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/snack-bar/index.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/input/index.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-container.ts","../../src/lib/input/input-container-errors.ts","../../src/lib/progress-bar/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/icon/index.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/chips/index.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip.ts","../../src/lib/card/index.ts","../../src/lib/card/card.ts","../../src/lib/grid-list/index.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/list/index.ts","../../src/lib/list/list.ts","../../src/lib/sidenav/index.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/slider/index.ts","../../src/lib/slider/slider.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/select/index.ts","../../src/lib/select/select.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/select-animations.ts","../../src/lib/core/a11y/focus-key-manager.ts","../../src/lib/core/a11y/list-key-manager.ts","../../src/lib/radio/index.ts","../../src/lib/radio/radio.ts","../../src/lib/checkbox/index.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/button/index.ts","../../src/lib/button/button.ts","../../src/lib/button-toggle/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/core.ts","../../src/lib/core/index.ts","../../src/lib/core/core.ts","../../src/lib/core/placeholder/placeholder-options.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/coercion/number-property.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/style/index.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/a11y/fake-mousedown.ts","../../src/lib/core/selection/selection.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/overlay/index.ts","../../src/lib/core/overlay/fullscreen-overlay-container.ts","../../src/lib/core/a11y/index.ts","../../src/lib/core/a11y/live-announcer.ts","../../src/lib/core/a11y/focus-trap.ts","../../src/lib/core/a11y/interactivity-checker.ts","../../src/lib/core/overlay/overlay-directives.ts","../../src/lib/core/overlay/overlay.ts","../../src/lib/core/overlay/overlay-container.ts","../../src/lib/core/overlay/position/overlay-position-builder.ts","../../src/lib/core/overlay/position/global-position-strategy.ts","../../src/lib/core/overlay/position/connected-position-strategy.ts","../../src/lib/core/overlay/position/connected-position.ts","../../src/lib/core/overlay/overlay-ref.ts","../../src/lib/core/portal/dom-portal-host.ts","../../src/lib/core/overlay/overlay-state.ts","../../src/lib/core/portal/portal-directives.ts","../../src/lib/core/portal/portal.ts","../../src/lib/core/portal/portal-errors.ts","../../src/lib/core/option/index.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/coercion/boolean-property.ts","../../src/lib/core/keyboard/keycodes.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/overlay/scroll/index.ts","../../src/lib/core/overlay/scroll/scroll-strategy-options.ts","../../src/lib/core/overlay/scroll/reposition-scroll-strategy.ts","../../src/lib/core/overlay/scroll/block-scroll-strategy.ts","../../src/lib/core/overlay/scroll/noop-scroll-strategy.ts","../../src/lib/core/overlay/scroll/close-scroll-strategy.ts","../../src/lib/core/overlay/scroll/scroll-strategy.ts","../../src/lib/core/overlay/scroll/scrollable.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/overlay/position/viewport-ruler.ts","../../src/lib/core/overlay/scroll/scroll-dispatcher.ts","../../src/lib/core/platform/index.ts","../../src/lib/core/platform/features.ts","../../src/lib/core/platform/platform.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/observe-content/observe-content.ts","../../src/lib/core/rtl/dir.ts","../../src/lib/core/line/line.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/compatibility/compatibility.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MATERIAL_SANITY_CHECKS,FloatPlaceholderType,PlaceholderOptions,MD_PLACEHOLDER_GLOBAL_OPTIONS,MdCoreModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,PlatformModule,Platform,getSupportedInputTypes,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS,MaterialModule,MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MdButtonToggleModule,ToggleType,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdChipsModule,MdChipList,MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,CdkDataTableModule,CollectionViewer,DataSource,RowPlaceholder,HeaderRowPlaceholder,CdkTable,MdDatepickerModule,MdCalendar,MdCalendarCell,MdCalendarBody,MdDatepickerContent,MdDatepicker,MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInput,MdDatepickerIntl,MdDatepickerToggle,MdMonthView,MdYearView,MdDialogModule,MD_DIALOG_DATA,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MdExpansionModule,CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdGridListModule,MdGridTile,MdGridList,MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MdInputModule,MdTextareaAutosize,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError,MdListModule,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MdProgressBarModule,MdProgressBar,MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelect,MdSidenavModule,throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer,MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer,MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle,MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabNav,MdTabLink,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup,MdTabLinkRipple,MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar,MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,throwMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './public_api';\n\nexport {LIVE_ANNOUNCER_PROVIDER_FACTORY as ɵi} from './core/a11y/live-announcer';\nexport {mixinColor as ɵq} from './core/common-behaviors/color';\nexport {mixinDisabled as ɵr} from './core/common-behaviors/disabled';\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵj} from './core/coordination/unique-selection-dispatcher';\nexport {CdkCell as ɵx,CdkCellDef as ɵt,CdkColumnDef as ɵv,CdkHeaderCell as ɵw,CdkHeaderCellDef as ɵu} from './core/data-table/cell';\nexport {BaseRowDef as ɵy,CdkCellOutlet as ɵbb,CdkHeaderRow as ɵbc,CdkHeaderRowDef as ɵz,CdkRow as ɵbd,CdkRowDef as ɵba} from './core/data-table/row';\nexport {MdDateFormats as ɵs} from './core/datetime/date-formats';\nexport {MdMutationObserverFactory as ɵa} from './core/observe-content/observe-content';\nexport {OVERLAY_CONTAINER_PROVIDER as ɵc,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵb} from './core/overlay/overlay-container';\nexport {OverlayPositionBuilder as ɵp} from './core/overlay/position/overlay-position-builder';\nexport {VIEWPORT_RULER_PROVIDER as ɵe,VIEWPORT_RULER_PROVIDER_FACTORY as ɵd} from './core/overlay/position/viewport-ruler';\nexport {SCROLL_DISPATCHER_PROVIDER as ɵg,SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵf} from './core/overlay/scroll/scroll-dispatcher';\nexport {RippleRenderer as ɵh} from './core/ripple/ripple-renderer';\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵk} from './expansion/expansion-panel';\nexport {MdGridAvatarCssMatStyler as ɵm,MdGridTileFooterCssMatStyler as ɵo,MdGridTileHeaderCssMatStyler as ɵn,MdGridTileText as ɵl} from './grid-list/grid-tile';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of Angular Material.\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MATERIAL_SANITY_CHECKS,FloatPlaceholderType,PlaceholderOptions,MD_PLACEHOLDER_GLOBAL_OPTIONS,MdCoreModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,PlatformModule,Platform,getSupportedInputTypes,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './core';\nexport {MaterialModule} from './module';\n\nexport {MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger} from './autocomplete/index';\nexport {MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor} from './button/index';\nexport {MdButtonToggleModule,ToggleType,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle/index';\nexport {MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card/index';\nexport {MdChipsModule,MdChipList,MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip} from './chips/index';\nexport {MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox} from './checkbox/index';\nexport {CdkDataTableModule,CollectionViewer,DataSource,RowPlaceholder,HeaderRowPlaceholder,CdkTable} from './core/data-table/index';\nexport {MdDatepickerModule,MdCalendar,MdCalendarCell,MdCalendarBody,MdDatepickerContent,MdDatepicker,MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInput,MdDatepickerIntl,MdDatepickerToggle,MdMonthView,MdYearView} from './datepicker/index';\nexport {MdDialogModule,MD_DIALOG_DATA,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef} from './dialog/index';\nexport {MdExpansionModule,CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle} from './expansion/index';\nexport {MdGridListModule,MdGridTile,MdGridList} from './grid-list/index';\nexport {MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon/index';\nexport {MdInputModule,MdTextareaAutosize,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError} from './input/index';\nexport {MdListModule,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list/index';\nexport {MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu/index';\nexport {MdProgressBarModule,MdProgressBar} from './progress-bar/index';\nexport {MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner} from './progress-spinner/index';\nexport {MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton} from './radio/index';\nexport {MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelect} from './select/index';\nexport {MdSidenavModule,throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav/index';\nexport {MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer} from './slider/index';\nexport {MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle} from './slide-toggle/index';\nexport {MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar} from './snack-bar/index';\nexport {MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabNav,MdTabLink,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup} from './tabs/index';\nexport {MdTabLinkRipple} from './tabs/tab-nav-bar/index';\nexport {MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar} from './toolbar/index';\nexport {MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,throwMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip/index';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {\n  A11yModule,\n  MdCommonModule,\n  MdRippleModule,\n  ObserveContentModule,\n  OverlayModule,\n  PortalModule,\n  RtlModule\n} from './core/index';\n\nimport {MdButtonToggleModule} from './button-toggle/index';\nimport {MdButtonModule} from './button/index';\nimport {MdCheckboxModule} from './checkbox/index';\nimport {MdRadioModule} from './radio/index';\nimport {MdSelectModule} from './select/index';\nimport {MdSlideToggleModule} from './slide-toggle/index';\nimport {MdSliderModule} from './slider/index';\nimport {MdSidenavModule} from './sidenav/index';\nimport {MdListModule} from './list/index';\nimport {MdGridListModule} from './grid-list/index';\nimport {MdCardModule} from './card/index';\nimport {MdChipsModule} from './chips/index';\nimport {MdIconModule} from './icon/index';\nimport {MdProgressSpinnerModule} from './progress-spinner/index';\nimport {MdProgressBarModule} from './progress-bar/index';\nimport {MdInputModule} from './input/index';\nimport {MdSnackBarModule} from './snack-bar/index';\nimport {MdTabsModule} from './tabs/index';\nimport {MdToolbarModule} from './toolbar/index';\nimport {MdTooltipModule} from './tooltip/index';\nimport {MdMenuModule} from './menu/index';\nimport {MdDialogModule} from './dialog/index';\nimport {PlatformModule} from './core/platform/index';\nimport {MdAutocompleteModule} from './autocomplete/index';\nimport {StyleModule} from './core/style/index';\nimport {MdDatepickerModule} from './datepicker/index';\nimport {CdkDataTableModule} from './core/data-table/index';\nimport {MdExpansionModule} from './expansion/index';\n\nconst /** @type {?} */ MATERIAL_MODULES = [\n  MdAutocompleteModule,\n  MdButtonModule,\n  MdButtonToggleModule,\n  MdCardModule,\n  MdChipsModule,\n  MdCheckboxModule,\n  MdDatepickerModule,\n  MdDialogModule,\n  MdExpansionModule,\n  MdGridListModule,\n  MdIconModule,\n  MdInputModule,\n  MdListModule,\n  MdMenuModule,\n  MdProgressBarModule,\n  MdProgressSpinnerModule,\n  MdRadioModule,\n  MdRippleModule,\n  MdSelectModule,\n  MdSidenavModule,\n  MdSliderModule,\n  MdSlideToggleModule,\n  MdSnackBarModule,\n  MdTabsModule,\n  MdToolbarModule,\n  MdTooltipModule,\n  OverlayModule,\n  PortalModule,\n  RtlModule,\n  StyleModule,\n  A11yModule,\n  PlatformModule,\n  MdCommonModule,\n  ObserveContentModule,\n  CdkDataTableModule\n];\n/**\n * @deprecated\n */\nexport class MaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: MATERIAL_MODULES,\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '../core';\nimport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\nimport {\n  MdExpansionPanel,\n  MdExpansionPanelActionRow,\n} from './expansion-panel';\nimport {\n  CdkAccordion,\n  MdAccordion,\n} from './accordion';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, CommonModule],\n  exports: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  declarations: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\n\nexport {\n  CdkAccordion,\n  MdAccordion,\n  MdAccordionDisplayMode\n} from './accordion';\nexport {AccordionItem} from './accordion-item';\nexport {\n  MdExpansionPanel,\n  MdExpansionPanelState,\n  MdExpansionPanelActionRow\n} from './expansion-panel';\nexport {\n  MdExpansionPanelHeader,\n  MdExpansionPanelDescription,\n  MdExpansionPanelTitle\n} from './expansion-panel-header';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {SPACE, ENTER} from '../core/keyboard/keycodes';\nimport {MdExpansionPanel, EXPANSION_PANEL_ANIMATION_TIMING} from './expansion-panel';\n/**\n * <md-expansion-panel-header> component.\n * \n * This component corresponds to the header element of an <md-expansion-panel>.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader {\n/**\n * @param {?} panel\n */\nconstructor(\npublic panel: MdExpansionPanel) {}\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\n    this.panel.toggle();\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\n    return this.panel.id;\n  }\n/**\n * Gets whether the expand indicator is hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    return this.panel.hideToggle;\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    'tabindex': '0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': '_getExpandedState()',\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({height: '48px', 'line-height': '48px'})),\n      state('expanded', style({height: '64px', 'line-height': '68px'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n}\n\n/**\n * <md-panel-description> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-description, mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-title, mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  Input,\n  ViewEncapsulation,\n  Optional,\n  forwardRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {MdAccordion, MdAccordionDisplayMode} from './accordion';\nimport {AccordionItem} from './accordion-item';\nimport {UniqueSelectionDispatcher} from '../core';\n\n\n/** MdExpansionPanel's states. */\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends AccordionItem {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * @param {?} accordion\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Gets the panel's display mode.\n * @return {?}\n */\n_getDisplayMode(): MdAccordionDisplayMode | MdExpansionPanelState {\n    if (!this.expanded) {\n      return this._getExpandedState();\n    }\n    if (this.accordion) {\n      return this.accordion.displayMode;\n    }\n    return this._getExpandedState();\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'md-expansion-panel, mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[@displayMode]': '_getDisplayMode()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('displayMode', [\n      state('collapsed', style({margin: '0'})),\n      state('default', style({margin: '16px 0'})),\n      state('flat', style({margin: '0'})),\n      transition('flat <=> collapsed, default <=> collapsed, flat <=> default',\n                 animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row, md-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Output, EventEmitter, Input, Injectable, OnDestroy, Optional} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '../core';\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the MdAccordianChild is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the MdAccordianChild is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the MdAccordianChild is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique MdAccordianChild id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the MdAccordianChild is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordonItem,\n * the name value is the id of the accordion.\n */\nlet accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n    }\n  }\nprivate _expanded: boolean;\n/**\n * @param {?} accordion\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n     _expansionDispatcher.listen((id: string, accordionId: string) => {\n       if (this.accordion && !this.accordion.multi &&\n           this.accordion.id === accordionId && this.id !== id) {\n         this.expanded = false;\n       }\n     });\n    }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the MdAccordianChild is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the MdAccordianChild is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the MdAccordianChild is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique MdAccordianChild id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\n/** MdAccordion's display modes. */\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion, md-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HeaderRowPlaceholder, RowPlaceholder, CdkTable} from './data-table';\nimport {CdkCellOutlet, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef} from './row';\nimport {CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef} from './cell';\n\nexport {CollectionViewer,DataSource} from './data-source';\nexport {RowPlaceholder,HeaderRowPlaceholder,CdkTable} from './data-table';\nexport class CdkDataTableModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [\n    CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef,\n    CdkColumnDef, CdkCell, CdkRow,\n    CdkHeaderCell, CdkHeaderRow, CdkHeaderRowDef],\n  declarations: [\n    CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef,\n    CdkColumnDef, CdkCell, CdkRow,\n    CdkHeaderCell, CdkHeaderRow, CdkHeaderRowDef,\n    RowPlaceholder, HeaderRowPlaceholder,\n  ]\n\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkDataTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkDataTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkDataTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\n\nexport interface CollectionViewer {\n  viewChange: Observable<{start: number, end: number}>;\n}\n/**\n * @abstract\n */\nexport abstract class DataSource<T> {\n/**\n * @abstract\n * @param {?} collectionViewer\n * @return {?}\n */\nconnect(collectionViewer: CollectionViewer) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CollectionViewer, DataSource} from './data-source';\nimport {BaseRowDef, CdkCellOutlet, CdkHeaderRowDef, CdkRowDef} from './row';\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\nimport {Observable} from 'rxjs/Observable';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport'rxjs/add/operator/let';\nimport'rxjs/add/operator/debounceTime';\nimport'rxjs/add/observable/combineLatest';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nexport class RowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[rowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowPlaceholder.ctorParameters;\n/** @type {?} */\nRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nexport class HeaderRowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[headerRowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction HeaderRowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nHeaderRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHeaderRowPlaceholder.ctorParameters;\n/** @type {?} */\nHeaderRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * A data table that connects with a data source to retrieve data of type T and renders\n * a header row and data rows. Updates the rows when new data is provided by the data source.\n */\nexport class CdkTable<T> implements CollectionViewer {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n/**\n * Flag set to true after the component has been initialized.\n */\nprivate _isViewInitialized = false;\n/**\n * Latest data provided by the data source through the connect interface.\n */\nprivate _data: NgIterable<T> = [];\n/**\n * Subscription that listens for the data provided by the data source.\n */\nprivate _renderChangeSubscription: Subscription;\n/**\n * Map of all the user's defined columns identified by name.\n * Contains the header and data-cell templates.\n */\nprivate _columnDefinitionsByName = new Map<string,  CdkColumnDef>();\n/**\n * Differ used to find the changes in the data provided by the data source.\n */\nprivate _dataDiffer: IterableDiffer<T> = null;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n */\nviewChange =\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n/**\n * Provides a stream containing the latest data array to render. Influenced by the table's\n * stream of view window (what rows are currently on screen).\n * @return {?}\n */\nget dataSource(): DataSource<T> { return this._dataSource; }\n/**\n * @param {?} dataSource\n * @return {?}\n */\nset dataSource(dataSource: DataSource<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\nprivate _dataSource: DataSource<T>;\n\n  // Placeholders within the table's template where the header and data rows will be inserted.\n   _rowPlaceholder: RowPlaceholder;\n   _headerRowPlaceholder: HeaderRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n */\n_columnDefinitions: QueryList<CdkColumnDef>;\n/**\n * Template used as the header container.\n */\n_headerDefinition: CdkHeaderRowDef;\n/**\n * Set of templates that used as the data row containers.\n */\n_rowDefinitions: QueryList<CdkRowDef>;\n/**\n * @param {?} _differs\n * @param {?} _changeDetectorRef\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} role\n */\nconstructor(private readonly _differs: IterableDiffers,\nprivate readonly _changeDetectorRef: ChangeDetectorRef,\n              elementRef: ElementRef,\n              renderer: Renderer2,\n               role: string) {\n    // Show the stability warning of the data-table only if it doesn't run inside of jasmine.\n    // This is just temporary and should reduce warnings when running the tests.\n    if (!(typeof window !== 'undefined' && window['jasmine'])) {\n      console.warn('The data table is still in active development ' +\n          'and should be considered unstable.');\n    }\n\n    if (!role) {\n      renderer.setAttribute(elementRef.nativeElement, 'role', 'grid');\n    }\n\n    // TODO(andrewseguin): Add trackby function input.\n    // Find and construct an iterable differ that can be used to find the diff in an array.\n    this._dataDiffer = this._differs.find(this._data).create();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // TODO(andrewseguin): Setup a listener for scroll events\n    //   and emit the calculated view to this.viewChange\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // TODO(andrewseguin): Throw an error if two columns share the same name\n    this._columnDefinitions.forEach(columnDef => {\n      this._columnDefinitionsByName.set(columnDef.name, columnDef);\n    });\n\n    // Re-render the rows if any of their columns change.\n    // TODO(andrewseguin): Determine how to only re-render the rows that have their columns changed.\n    Observable.merge(...this._rowDefinitions.map(rowDef => rowDef.columnsChange))\n        .takeUntil(this._onDestroy)\n        .subscribe(() => {\n          // Reset the data to an empty array so that renderRowChanges will re-render all new rows.\n          this._rowPlaceholder.viewContainer.clear();\n          this._dataDiffer.diff([]);\n          this._renderRowChanges();\n        });\n\n    // Re-render the header row if the columns change\n    this._headerDefinition.columnsChange\n        .takeUntil(this._onDestroy)\n        .subscribe(() => {\n          this._headerRowPlaceholder.viewContainer.clear();\n          this._renderHeaderRow();\n        });\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._renderHeaderRow();\n\n    if (this.dataSource) {\n      this._observeRenderChanges();\n    }\n\n    this._isViewInitialized = true;\n  }\n/**\n * Switch to the provided data source by resetting the data and unsubscribing from the current\n * render change subscription if one exists. If the data source is null, interpret this by\n * clearing the row placeholder. Otherwise start listening for new data.\n * @param {?} dataSource\n * @return {?}\n */\nprivate _switchDataSource(dataSource: DataSource<T>) {\n    this._data = [];\n    this._dataSource = dataSource;\n\n    if (this._isViewInitialized) {\n      if (this._renderChangeSubscription) {\n        this._renderChangeSubscription.unsubscribe();\n      }\n\n      if (this._dataSource) {\n        this._observeRenderChanges();\n      } else {\n        this._rowPlaceholder.viewContainer.clear();\n      }\n    }\n  }\n/**\n * Set up a subscription for the data provided by the data source.\n * @return {?}\n */\nprivate _observeRenderChanges() {\n    this._renderChangeSubscription = this.dataSource.connect(this)\n        .takeUntil(this._onDestroy)\n        .subscribe(data => {\n          this._data = data;\n          this._renderRowChanges();\n        });\n  }\n/**\n * Create the embedded view for the header template and place it in the header row view container.\n * @return {?}\n */\nprivate _renderHeaderRow() {\n    const /** @type {?} */ cells = this._getHeaderCellTemplatesForRow(this._headerDefinition);\n    if (!cells.length) { return; }\n\n    // TODO(andrewseguin): add some code to enforce that exactly\n    //   one CdkCellOutlet was instantiated as a result\n    //   of `createEmbeddedView`.\n    this._headerRowPlaceholder.viewContainer\n        .createEmbeddedView(this._headerDefinition.template, {cells});\n    CdkCellOutlet.mostRecentCellOutlet.cells = cells;\n    CdkCellOutlet.mostRecentCellOutlet.context = {};\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Check for changes made in the data and render each change (row added/removed/moved).\n * @return {?}\n */\nprivate _renderRowChanges() {\n    const /** @type {?} */ changes = this._dataDiffer.diff(this._data);\n    if (!changes) { return; }\n\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            this._insertRow(this._data[currentIndex], currentIndex);\n          } else if (currentIndex == null) {\n            this._rowPlaceholder.viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = this._rowPlaceholder.viewContainer.get(adjustedPreviousIndex);\n            this._rowPlaceholder.viewContainer.move(view, currentIndex);\n          }\n        });\n  }\n/**\n * Create the embedded view for the data row template and place it in the correct index location\n * within the data row view container.\n * @param {?} rowData\n * @param {?} index\n * @return {?}\n */\nprivate _insertRow(rowData: T, index: number) {\n    // TODO(andrewseguin): Add when predicates to the row definitions\n    //   to find the right template to used based on\n    //   the data rather than choosing the first row definition.\n    const /** @type {?} */ row = this._rowDefinitions.first;\n\n    // TODO(andrewseguin): Add more context, such as first/last/isEven/etc\n    const /** @type {?} */ context = {$implicit: rowData};\n\n    // TODO(andrewseguin): add some code to enforce that exactly one\n    //   CdkCellOutlet was instantiated as a result  of `createEmbeddedView`.\n    this._rowPlaceholder.viewContainer.createEmbeddedView(row.template, context, index);\n\n    // Insert empty cells if there is no data to improve rendering time.\n    CdkCellOutlet.mostRecentCellOutlet.cells = rowData ? this._getCellTemplatesForRow(row) : [];\n    CdkCellOutlet.mostRecentCellOutlet.context = context;\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Returns the cell template definitions to insert into the header\n * as defined by its list of columns to display.\n * @param {?} headerDef\n * @return {?}\n */\nprivate _getHeaderCellTemplatesForRow(headerDef: CdkHeaderRowDef): CdkHeaderCellDef[] {\n    return headerDef.columns.map(columnId => {\n      // TODO(andrewseguin): Throw an error if there is no column with this columnId\n      return this._columnDefinitionsByName.get(columnId).headerCell;\n    });\n  }\n/**\n * Returns the cell template definitions to insert in the provided row\n * as defined by its list of columns to display.\n * @param {?} rowDef\n * @return {?}\n */\nprivate _getCellTemplatesForRow(rowDef: CdkRowDef): CdkCellDef[] {\n    return rowDef.columns.map(columnId => {\n      // TODO(andrewseguin): Throw an error if there is no column with this columnId\n      return this._columnDefinitionsByName.get(columnId).cell;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-table',\n  template: `\n    <ng-container headerRowPlaceholder></ng-container>\n    <ng-container rowPlaceholder></ng-container>\n  `,\n  host: {\n    'class': 'cdk-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: Renderer2, },\n{type: undefined, decorators: [{ type: Attribute, args: ['role', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dataSource': [{ type: Input },],\n'_rowPlaceholder': [{ type: ViewChild, args: [RowPlaceholder, ] },],\n'_headerRowPlaceholder': [{ type: ViewChild, args: [HeaderRowPlaceholder, ] },],\n'_columnDefinitions': [{ type: ContentChildren, args: [CdkColumnDef, ] },],\n'_headerDefinition': [{ type: ContentChild, args: [CdkHeaderRowDef, ] },],\n'_rowDefinitions': [{ type: ContentChildren, args: [CdkRowDef, ] },],\n};\n}\n\nfunction CdkTable_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTable.ctorParameters;\n/** @type {?} */\nCdkTable.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nCdkTable.prototype._onDestroy;\n/**\n * Flag set to true after the component has been initialized.\n * @type {?}\n */\nCdkTable.prototype._isViewInitialized;\n/**\n * Latest data provided by the data source through the connect interface.\n * @type {?}\n */\nCdkTable.prototype._data;\n/**\n * Subscription that listens for the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._renderChangeSubscription;\n/**\n * Map of all the user's defined columns identified by name.\n * Contains the header and data-cell templates.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitionsByName;\n/**\n * Differ used to find the changes in the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._dataDiffer;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n * @type {?}\n */\nCdkTable.prototype.viewChange;\n/** @type {?} */\nCdkTable.prototype._dataSource;\n/** @type {?} */\nCdkTable.prototype._rowPlaceholder;\n/** @type {?} */\nCdkTable.prototype._headerRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitions;\n/**\n * Template used as the header container.\n * @type {?}\n */\nCdkTable.prototype._headerDefinition;\n/**\n * Set of templates that used as the data row containers.\n * @type {?}\n */\nCdkTable.prototype._rowDefinitions;\n/** @type {?} */\nCdkTable.prototype._differs;\n/** @type {?} */\nCdkTable.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ContentChild, Directive, ElementRef, Input, Renderer2, TemplateRef} from '@angular/core';\n/**\n * Cell definition for a CDK data-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class CdkCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellDef.ctorParameters;\n/** @type {?} */\nCdkCellDef.prototype.template;\n}\n\n/**\n * Header cell definition for a CDK data-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class CdkHeaderCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkHeaderCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCellDef.ctorParameters;\n/** @type {?} */\nCdkHeaderCellDef.prototype.template;\n}\n\n/**\n * Column definition for the CDK data-table.\n * Defines a set of cells available for a table column.\n */\nexport class CdkColumnDef {\n   name: string;\n\n   cell: CdkCellDef;\n   headerCell: CdkHeaderCellDef;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkColumnDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['cdkColumnDef', ] },],\n'cell': [{ type: ContentChild, args: [CdkCellDef, ] },],\n'headerCell': [{ type: ContentChild, args: [CdkHeaderCellDef, ] },],\n};\n}\n\nfunction CdkColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkColumnDef.ctorParameters;\n/** @type {?} */\nCdkColumnDef.propDecorators;\n/** @type {?} */\nCdkColumnDef.prototype.name;\n/** @type {?} */\nCdkColumnDef.prototype.cell;\n/** @type {?} */\nCdkColumnDef.prototype.headerCell;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class CdkHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(private columnDef: CdkColumnDef,\nprivate elementRef: ElementRef,\nprivate renderer: Renderer2) {\n    this.renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.name}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-header-cell',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCell.ctorParameters;\n/** @type {?} */\nCdkHeaderCell.prototype.columnDef;\n/** @type {?} */\nCdkHeaderCell.prototype.elementRef;\n/** @type {?} */\nCdkHeaderCell.prototype.renderer;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class CdkCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(private columnDef: CdkColumnDef,\nprivate elementRef: ElementRef,\nprivate renderer: Renderer2) {\n    this.renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.name}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-cell',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCell.ctorParameters;\n/** @type {?} */\nCdkCell.prototype.columnDef;\n/** @type {?} */\nCdkCell.prototype.elementRef;\n/** @type {?} */\nCdkCell.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffer,\n  IterableDiffers,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\nimport {CdkCellDef} from './cell';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nexport abstract class BaseRowDef {\n/**\n * The columns to be displayed on this row.\n */\ncolumns: string[];\n/**\n * Event stream that emits when changes are made to the columns.\n */\ncolumnsChange: Subject<void> = new Subject<void>();\n/**\n * Differ used to check if any changes were made to the columns.\n */\nprotected _columnsDiffer: IterableDiffer<any>;\nprivate viewInitialized = false;\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(public template: TemplateRef<any>,\n              protected _differs: IterableDiffers) { }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this.viewInitialized = true;\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property.\n    if (!this._columnsDiffer) {\n      this._columnsDiffer = this._differs.find(changes['columns'].currentValue).create();\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (!this.viewInitialized || !this._columnsDiffer || !this.columns) { return; }\n\n    // Notify the table if there are any changes to the columns.\n    const /** @type {?} */ changes = this._columnsDiffer.diff(this.columns);\n    if (changes) { this.columnsChange.next(); }\n  }\n}\n\nfunction BaseRowDef_tsickle_Closure_declarations() {\n/**\n * The columns to be displayed on this row.\n * @type {?}\n */\nBaseRowDef.prototype.columns;\n/**\n * Event stream that emits when changes are made to the columns.\n * @type {?}\n */\nBaseRowDef.prototype.columnsChange;\n/**\n * Differ used to check if any changes were made to the columns.\n * @type {?}\n */\nBaseRowDef.prototype._columnsDiffer;\n/** @type {?} */\nBaseRowDef.prototype.viewInitialized;\n/** @type {?} */\nBaseRowDef.prototype.template;\n/** @type {?} */\nBaseRowDef.prototype._differs;\n}\n\n/**\n * Header row definition for the CDK data-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class CdkHeaderRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkHeaderRowDef]',\n  inputs: ['columns: cdkHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the CDK data-table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class CdkRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkRowDef]',\n  inputs: ['columns: cdkRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRowDef.ctorParameters;\n}\n\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nexport class CdkCellOutlet {\n/**\n * The ordered list of cells to render within this outlet's view container\n */\ncells: CdkCellDef[];\n/**\n * The data context to be provided to each cell\n */\ncontext: any;\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK data-table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nstatic mostRecentCellOutlet: CdkCellOutlet = null;\n/**\n * @param {?} _viewContainer\n */\nconstructor(private _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.cells.forEach(cell => {\n      this._viewContainer.createEmbeddedView(cell.template, this.context);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CdkCellOutlet_tsickle_Closure_declarations() {\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK data-table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n * @type {?}\n */\nCdkCellOutlet.mostRecentCellOutlet;\n/** @type {?} */\nCdkCellOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellOutlet.ctorParameters;\n/**\n * The ordered list of cells to render within this outlet's view container\n * @type {?}\n */\nCdkCellOutlet.prototype.cells;\n/**\n * The data context to be provided to each cell\n * @type {?}\n */\nCdkCellOutlet.prototype.context;\n/** @type {?} */\nCdkCellOutlet.prototype._viewContainer;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-header-row',\n  template: '<ng-container cdkCellOutlet></ng-container>',\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-row',\n  template: '<ng-container cdkCellOutlet></ng-container>',\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdMonthView} from './month-view';\nimport {CommonModule} from '@angular/common';\nimport {StyleModule, OverlayModule, A11yModule} from '../core';\nimport {MdCalendarBody} from './calendar-body';\nimport {MdYearView} from './year-view';\nimport {MdDatepicker, MdDatepickerContent} from './datepicker';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {MdDialogModule} from '../dialog/index';\nimport {MdCalendar} from './calendar';\nimport {MdDatepickerToggle} from './datepicker-toggle';\nimport {MdButtonModule} from '../button/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\n\n\nexport {MdCalendar} from './calendar';\nexport {MdCalendarCell,MdCalendarBody} from './calendar-body';\nexport {MdDatepickerContent,MdDatepicker} from './datepicker';\nexport {MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInput} from './datepicker-input';\nexport {MdDatepickerIntl} from './datepicker-intl';\nexport {MdDatepickerToggle} from './datepicker-toggle';\nexport {MdMonthView} from './month-view';\nexport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdDialogModule,\n    OverlayModule,\n    StyleModule,\n    A11yModule,\n  ],\n  exports: [\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n  ],\n  declarations: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  providers: [\n    MdDatepickerIntl,\n  ],\n  entryComponents: [\n    MdDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {MdDatepickerIntl} from './datepicker-intl';\nexport class MdDatepickerToggle<D> {\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * @return {?}\n */\nget _datepicker() { return this.datepicker; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _datepicker(v: MdDatepicker<D>) { this.datepicker = v; }\n/**\n * @param {?} _intl\n */\nconstructor(public _intl: MdDatepickerIntl) {}\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[mdDatepickerToggle], button[matDatepickerToggle]',\n  template: '',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'type': 'button',\n    'class': 'mat-datepicker-toggle',\n    '[attr.aria-label]': '_intl.openCalendarLabel',\n    '(click)': '_open($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['mdDatepickerToggle', ] },],\n'_datepicker': [{ type: Input, args: ['matDatepickerToggle', ] },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Renderer2\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdInputContainer} from '../input/input-container';\nimport {DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) { this.mdDatepicker = value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this.mdDatepickerFilter = filter;\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D {\n    return this._dateAdapter.parse(this._elementRef.nativeElement.value,\n        this._dateFormats.parse.dateInput);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    let /** @type {?} */ oldDate = this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        date ? this._dateAdapter.format(date, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, date)) {\n      this._valueChange.emit(date);\n    }\n  }\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D) {\n    this._min = value;\n    this._validatorOnChange();\n  }\nprivate _min: D;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D) {\n    this._max = value;\n    this._validatorOnChange();\n  }\nprivate _max: D;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription: Subscription;\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.min || !control.value ||\n        this._dateAdapter.compareDate(this.min, control.value) <= 0) ?\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': control.value}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.max || !control.value ||\n        this._dateAdapter.compareDate(this.max, control.value) >= 0) ?\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': control.value}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return !this._dateFilter || !control.value || this._dateFilter(control.value) ?\n        null : {'mdDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn =\n      Validators.compose([this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdInputContainer\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdInputContainer: MdInputContainer) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._datepickerSubscription) {\n      this._datepickerSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._mdInputContainer ? this._mdInputContainer.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdDatepicker], input[matDatepicker]',\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-expanded]': '_datepicker?.opened || \"false\"',\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '_datepicker?.id',\n    '[attr.min]': 'min ? _dateAdapter.getISODateString(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.getISODateString(max) : null',\n    '(input)': '_onInput($event.target.value)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdInputContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdInputContainer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Overlay} from '../core/overlay/overlay';\nimport {OverlayRef} from '../core/overlay/overlay-ref';\nimport {ComponentPortal} from '../core/portal/portal';\nimport {OverlayState} from '../core/overlay/overlay-state';\nimport {Dir} from '../core/rtl/dir';\nimport {MdDialog} from '../dialog/dialog';\nimport {MdDialogRef} from '../dialog/dialog-ref';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdDialogConfig} from '../dialog/dialog-config';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {MdCalendar} from './calendar';\nimport'rxjs/add/operator/first';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MdCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\n  datepicker: MdDatepicker<D>;\n\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.datepicker.close();\n        break;\n      default:\n        // Return so that we don't preventDefault on keys that are not explicitly handled.\n        return;\n    }\n\n    event.preventDefault();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D) { this._startAt = date; }\nprivate _startAt: D;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Emits new selected date when selected date changes.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n */\n_selected: D = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any>;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The input element this datepicker is associated with.\n */\nprivate _datepickerInput: MdDatepickerInput<D>;\nprivate _inputSubscription: Subscription;\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _dateAdapter\n * @param {?} _dir\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Dir) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n    if (this._inputSubscription) {\n      this._inputSubscription.unsubscribe();\n    }\n  }\n/**\n * Selects the given date and closes the currently open popup or dialog.\n * @param {?} date\n * @return {?}\n */\n_selectAndClose(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n    this.close();\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('An MdDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    let /** @type {?} */ config = new MdDialogConfig();\n    config.viewContainerRef = this._viewContainerRef;\n\n    this._dialogRef = this._dialog.open(MdDatepickerContent, config);\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.first().subscribe(() => this._popupRef.updatePosition());\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._createPopupPositionStrategy();\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'md-overlay-transparent-backdrop';\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n\n    this._popupRef = this._overlay.create(overlayState);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker, mat-datepicker',\n  template: '',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/**\n * Emits new selected date when selected date changes.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdDatepicker.prototype._selected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit {\n/**\n * A date representing the period (month or year) to start the calendar in.\n */\nstartAt: D;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n */\nselected: D;\n/**\n * The minimum selectable date.\n */\nminDate: D;\n/**\n * The maximum selectable date.\n */\nmaxDate: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _isCompatibilityMode\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\npublic _isCompatibilityMode: boolean,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => this._ngZone.onStable.first().subscribe(() => {\n      let /** @type {?} */ activeEl = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n      activeEl.focus();\n    }));\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @type {?}\n */\nMdCalendar.prototype.startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdCalendar.prototype.selected;\n/**\n * The minimum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.minDate;\n/**\n * The maximum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._isCompatibilityMode;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        this._dateAdapter.getDate(this.activeDate)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MdCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate == date) {\n      return;\n    }\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate),\n        date));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D): number {\n    return this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D, d2: D): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MdDatepicker: No provider found for ${provider}. You must import one of the following` +\n      `modules at your application root: MdNativeDateModule, or provide a custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdOptionModule, OverlayModule, MdCommonModule} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdAutocomplete} from './autocomplete';\nimport {MdAutocompleteTrigger} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {AutocompletePositionY,MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Input,\n  NgZone,\n  Optional,\n  OnDestroy,\n  ViewContainerRef,\n  Inject,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW, ESCAPE} from '../core/keyboard/keycodes';\nimport {Dir} from '../core/rtl/dir';\nimport {MdInputContainer} from '../input/input-container';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/switchMap';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n                   'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n                   'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n */\nprivate _panelPositionSubscription: Subscription;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _zone\n * @param {?} _inputContainer\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Dir,\nprivate _zone: NgZone,\nprivate _inputContainer: MdInputContainer,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._panelOpen = false;\n    this._resetPlaceholder();\n\n    // We need to trigger change detection manually, because\n    // `fromEvent` doesn't seem to do it at the proper time.\n    // This ensures that the placeholder is reset when the\n    // user clicks outside.\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (this._document) {\n      return Observable.fromEvent(this._document, 'click').filter((event: MouseEvent) => {\n        const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n        const /** @type {?} */ inputContainer = this._inputContainer ?\n            this._inputContainer._elementRef.nativeElement : null;\n\n        return this._panelOpen &&\n               clickTarget !== this._element.nativeElement &&\n               (!inputContainer || !inputContainer.contains(clickTarget)) &&\n               !this._overlayRef.overlayElement.contains(clickTarget);\n      });\n    }\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this.closePanel();\n    } else if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      this.autocomplete._keyManager.onKeydown(event);\n\n      if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. The new scrollTop will be that offset - the panel height + the option\n * height, so the active option will be just visible at the bottom of the panel.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset =\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ newScrollTop =\n        Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n    this.autocomplete._setScrollTop(newScrollTop);\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): void {\n    // When the zone is stable initially, and when the option list changes...\n    Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        .switchMap(() => {\n          this._resetPanel();\n          return this.panelClosingActions;\n        })\n        // when the first closing event occurs...\n        .first()\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    this._element.nativeElement.value = toDisplay || '';\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to null so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(null);\n  }\n/**\n * Resets the active item and re-calculates alignment of the panel in case its size\n * has changed due to fewer or greater number of options.\n * @return {?}\n */\nprivate _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete],' +\n  'textarea[mdAutocomplete], textarea[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    '(focus)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: ChangeDetectorRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n */\npositionY: AutocompletePositionY = 'below';\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n\n   template: TemplateRef<any>;\n   panel: ElementRef;\n   options: QueryList<MdOption>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: (value: any) => string;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display\n * options below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on its position (used to set y-offset).\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-panel-below': this.positionY === 'below',\n      'mat-autocomplete-panel-above': this.positionY === 'above',\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.positionY;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/** @type {?} */\nMdAutocomplete.prototype.template;\n/** @type {?} */\nMdAutocomplete.prototype.panel;\n/** @type {?} */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends CanDisable {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  OverlayModule,\n  PortalModule,\n  A11yModule,\n  MdCommonModule,\n} from '../core';\nimport {MdDialog} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MdCommonModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\nexport {MdDialog} from './dialog';\nexport {throwMdDialogContentAlreadyAttachedError,MdDialogContainer} from './dialog-container';\nexport {MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions} from './dialog-content-directives';\nexport {DialogRole,DialogPosition,MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\nexport {MD_DIALOG_DATA} from './dialog-injector';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n/**\n * Dialog close input for compatibility mode.\n * @param {?} value\n * @return {?}\n */\nset _matDialogClose(value: any) { this.dialogResult = value; }\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close],' +\n            'button[mdDialogClose], button[matDialogClose]',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\n  host: {'class': 'mat-dialog-title'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,' +\n            '[mdDialogContent], [matDialogContent]',\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,' +\n            '[mdDialogActions], [matDialogActions]',\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector, ComponentRef, Injectable, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  Overlay,\n  OverlayRef,\n  ComponentType,\n  OverlayState,\n  ComponentPortal,\n} from '../core';\nimport {extendObject} from '../core/util/object-extend';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {DialogInjector} from './dialog-injector';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\nimport {TemplatePortal} from '../core/portal/portal';\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget _openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Subject for notifying the user that a dialog has opened.\n * @return {?}\n */\nget _afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * Subject for notifying the user that all open dialogs have finished closing.\n * @return {?}\n */\nget _afterAllClosed(): Subject<void> {\n    return this._parentDialog ?\n      this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Gets an observable that is notified when a dialog has been opened.\n */\nafterOpen: Observable<MdDialogRef<any>> = this._afterOpen.asObservable();\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n */\nafterAllClosed: Observable<void> = this._afterAllClosed.asObservable();\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _location\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _location: Location,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && _location) {\n      _location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n    config = _applyConfigDefaults(config);\n\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    let /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this._openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this._openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this._afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this._openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this._openDialogs[i].close();\n    }\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    let /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let /** @type {?} */ overlayState = new OverlayState();\n    overlayState.panelClass = dialogConfig.panelClass;\n    overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.block();\n    overlayState.direction = dialogConfig.direction;\n    if (dialogConfig.backdropClass) {\n      overlayState.backdropClass = dialogConfig.backdropClass;\n    }\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ viewContainer = config ? config.viewContainerRef : null;\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);\n\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    let /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    // We create an injector specifically for the component we're instantiating so that it can\n    // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself\n    // and, optionally, to return a value.\n    let /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    let /** @type {?} */ dialogInjector = new DialogInjector(userInjector || this._injector, dialogRef, config.data);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null));\n    } else {\n      let /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, null, dialogInjector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    let /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this._openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this._openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    let /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n    let /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Gets an observable that is notified when a dialog has been opened.\n * @type {?}\n */\nMdDialog.prototype.afterOpen;\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._location;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  animate,\n  trigger,\n  state,\n  style,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement = null;\n/**\n * Reference to the global document object.\n */\nprivate _document: Document;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits the current animation state whenever it changes.\n */\n_onAnimationStateChange = new EventEmitter<AnimationEvent>();\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _document\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\n      _document: any) {\n\n    super();\n    this._document = _document;\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && 'focus' in toFocus) {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    this._onAnimationStateChange.emit(event);\n\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n      this._onAnimationStateChange.complete();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    '[attr.role]': '_config?.role',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * Reference to the global document object.\n * @type {?}\n */\nMdDialogContainer.prototype._document;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits the current animation state whenever it changes.\n * @type {?}\n */\nMdDialogContainer.prototype._onAnimationStateChange;\n/** @type {?} */\nMdDialogContainer.prototype._ngZone;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {LayoutDirection} from '../core';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: LayoutDirection = 'ltr';\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector, InjectionToken} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Custom injector type specifically for instantiating components with a dialog.\n */\nexport class DialogInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _dialogRef\n * @param {?} _data\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _dialogRef: MdDialogRef<any>,\nprivate _data: any) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    if (token === MdDialogRef) {\n      return this._dialogRef;\n    }\n\n    if (token === MD_DIALOG_DATA) {\n      return this._data;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction DialogInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogInjector.prototype._parentInjector;\n/** @type {?} */\nDialogInjector.prototype._dialogRef;\n/** @type {?} */\nDialogInjector.prototype._data;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '../core';\nimport {AnimationEvent} from '@angular/animations';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\nimport'rxjs/add/operator/filter';\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose: boolean = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n */\nconstructor(private _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer) {\n    _containerInstance._onAnimationStateChange\n      .filter((event: AnimationEvent) => event.toState === 'exit')\n      .subscribe(() => this._overlayRef.dispose(), null, () => {\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n    this._containerInstance._state = 'exit';\n    this._overlayRef.detachBackdrop(); // Transition the backdrop in parallel with the dialog.\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {MdMenu} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger} from './menu-trigger';\nimport {MdRippleModule} from '../core/ripple/index';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\n\nexport {MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu';\nexport {fadeInItems, transformMenu} from './menu-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {MdMenu} from './menu-directive';\nexport {MdMenuItem} from './menu-item';\nexport {MdMenuTrigger} from './menu-trigger';\nexport {MdMenuPanel} from './menu-panel';\nexport {MenuPositionX, MenuPositionY} from './menu-positions';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewContainerRef,\n} from '@angular/core';\nimport {MdMenuPanel} from './menu-panel';\nimport {throwMdMenuMissingError} from './menu-errors';\nimport {\n    isFakeMousedownFromScreenReader,\n    Dir,\n    LayoutDirection,\n    Overlay,\n    OverlayState,\n    OverlayRef,\n    TemplatePortal,\n    ConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    VerticalConnectionPos,\n} from '../core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal;\nprivate _overlayRef: OverlayRef;\nprivate _menuOpen: boolean = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dir: Dir) { }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n    this.menu.close.subscribe(() => this.closeMenu());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() { this.destroyMenu(); }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean { return this._menuOpen; }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay();\n      this._overlayRef.attach(this._portal);\n      this._subscribeToBackdrop();\n      this._initMenu();\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this._backdropSubscription.unsubscribe();\n      this._resetMenu();\n    }\n  }\n/**\n * Removes the menu from the DOM.\n * @return {?}\n */\ndestroyMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n\n      this._cleanUpSubscriptions();\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * This method ensures that the menu closes when the overlay backdrop is clicked.\n * We do not use first() here because doing so would not catch clicks from within\n * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe\n * explicitly when the menu is closed or destroyed.\n * @return {?}\n */\nprivate _subscribeToBackdrop(): void {\n    this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n      this.menu._emitCloseEvent();\n    });\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n  }\n/**\n *  This method checks that a valid instance of MdMenu has been passed into\n *  mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMdMenuMissingError();\n    }\n  }\n/**\n *  This method creates the overlay from the provided menu's template and saves its\n *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): void {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayState\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getPosition()\n                                        .withDirection(this.dir);\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n    overlayState.direction = this.dir;\n    overlayState.scrollStrategy = this._overlay.scrollStrategies.reposition();\n    return overlayState;\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe((change) => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.originX === 'start' ? 'after' : 'before';\n      let /** @type {?} */ posY: MenuPositionY = change.connectionPair.originY === 'top' ? 'below' : 'above';\n\n      if (!this.menu.overlapTrigger) {\n        posY = posY === 'below' ? 'above' : 'below';\n      }\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy  {\n    const [posX, fallbackX]: HorizontalConnectionPos[] =\n      this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    const [overlayY, fallbackOverlayY]: VerticalConnectionPos[] =\n      this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let /** @type {?} */ originY = overlayY;\n    let /** @type {?} */ fallbackOriginY = fallbackOverlayY;\n\n    if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n      .connectedTo(this._element,\n          {originX: posX, originY: originY}, {overlayX: posX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: originY},\n          {overlayX: fallbackX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: posX, originY: fallbackOriginY},\n          {overlayX: posX, overlayY: fallbackOverlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: fallbackOriginY},\n          {overlayX: fallbackX, overlayY: fallbackOverlayY});\n  }\n/**\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(click)': 'toggleMenu()',\n  },\n  exportAs: 'mdMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._backdropSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager;\nprivate _xPosition: MenuPositionX = 'after';\nprivate _yPosition: MenuPositionY = 'below';\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription: Subscription;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = true;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void>();\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this._emitCloseEvent());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this._emitCloseEvent();\n        return;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * This emits a close event to which the trigger is subscribed. When emitted, the\n * trigger will close the menu.\n * @return {?}\n */\n_emitCloseEvent(): void {\n    this.close.emit();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  host: {'role': 'menu'},\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on AngularJS Material.\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('showing', style({\n    opacity: 1,\n    transform: `scale(1)`\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      transform: `scale(0)`\n    }),\n    animate(`200ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\n  ]),\n  transition('* => void', [\n    animate('50ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate(`200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ElementRef, Input} from '@angular/core';\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem implements Focusable {\n/**\n * Whether the menu item is disabled\n */\nprivate _disabled: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {}\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * Whether the menu item is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this._disabled ? '-1' : '0';\n  }\n/**\n * Used to set the HTML `disabled` attribute. Necessary for links to be disabled properly.\n * @return {?}\n */\n_getDisabledAttr(): boolean {\n    return this._disabled ? true : null;\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': '_getDisabledAttr()',\n    '(click)': '_checkDisabled($event)',\n  },\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/** @type {?} */\nMdMenuItem.propDecorators;\n/**\n * Whether the menu item is disabled\n * @type {?}\n */\nMdMenuItem.prototype._disabled;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\n  throw Error(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {PlatformModule} from '../core/platform/index';\nimport {MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdCommonModule,\n    PlatformModule\n  ],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,throwMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  NgZone,\n  Optional,\n  OnDestroy,\n  Renderer2,\n  ChangeDetectorRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  style,\n  trigger,\n  state,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  ComponentPortal,\n  OverlayConnectionPosition,\n  OriginConnectionPosition,\n} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Dir} from '../core/rtl/dir';\nimport {Platform} from '../core/platform/index';\nimport'rxjs/add/operator/first';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * Throws an error if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdTooltipInvalidPositionError(position: string) {\n  throw Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef;\n  _tooltipInstance: TooltipComponent;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    if (this._tooltipInstance) {\n      this._setTooltipMessage(this._message);\n    }\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @return {?}\n */\nget _matClass() { return this.tooltipClass; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matClass(v) { this.tooltipClass = v; }\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\nprivate _dir: Dir) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._setTooltipMessage(this._message);\n    this._tooltipInstance.show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = this._overlayRef.attach(portal).instance;\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance.afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): void {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    let /** @type {?} */ config = new OverlayState();\n\n    config.direction = this._dir ? this._dir.value : 'ltr';\n    config.positionStrategy = strategy;\n    config.scrollStrategy = this._overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n\n    this._overlayRef = this._overlay.create(config);\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    this._overlayRef.dispose();\n    this._overlayRef = null;\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throwMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throwMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    this._tooltipInstance.message = message;\n    this._tooltipInstance._markForCheck();\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      if (this._tooltipInstance) {\n        this._overlayRef.updatePosition();\n      }\n    });\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipInstance.tooltipClass = tooltipClass;\n    this._tooltipInstance._markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Platform, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['mdTooltipClass', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'_matClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/** @type {?} */\nMdTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\n_closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throwMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\n\nexport {MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar} from './toolbar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {'class': 'mat-toolbar-row'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PortalModule} from '../core';\nimport {MdRippleModule} from '../core/ripple/index';\nimport {ObserveContentModule} from '../core/observe-content/observe-content';\nimport {MdTab} from './tab';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabNav, MdTabLink, MdTabLinkRipple} from './tab-nav-bar/tab-nav-bar';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabBody} from './tab-body';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {MdTabHeader} from './tab-header';\nimport {ScrollDispatchModule} from '../core/overlay/scroll/index';\nexport class MdTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserveContentModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNav,\n    MdTabLink,\n    MdTabLinkRipple\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNav,\n    MdTabLink,\n    MdTabBody,\n    MdTabLinkRipple,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\n\nexport {MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup} from './tab-group';\nexport {MdInkBar} from './ink-bar';\nexport {MdTabBody, MdTabBodyOriginState, MdTabBodyPositionState} from './tab-body';\nexport {MdTabHeader, ScrollDirection} from './tab-header';\nexport {MdTabLabelWrapper} from './tab-label-wrapper';\nexport {MdTab} from './tab';\nexport {MdTabLabel} from './tab-label';\nexport {MdTabNav, MdTabLink} from './tab-nav-bar/index';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {MdTabNav,MdTabLink,MdTabLinkRipple} from './tab-nav-bar';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  QueryList,\n  ElementRef,\n  ViewEncapsulation,\n  ContentChildren,\n  Output,\n  EventEmitter,\n  Optional,\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {RIGHT_ARROW, LEFT_ARROW, ENTER, Dir, LayoutDirection, coerceBooleanProperty} from '../core';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdInkBar} from './ink-bar';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Observable} from 'rxjs/Observable';\nimport {applyCssTransform} from '../core/style/apply-transform';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/auditTime';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader implements AfterContentChecked, AfterContentInit, OnDestroy {\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar: Subscription = null;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Whether ripples for the tab-header labels should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _disableRipple: boolean = false;\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _ngZone\n * @param {?} _dir\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _dir: Dir) { }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    this._realignInkBar = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.dirChange : Observable.of(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          Observable.fromEvent(window, 'resize').auditTime(10) :\n          Observable.of(null);\n\n      return Observable.merge(dirChange, resize).startWith(null).subscribe(() => {\n        this._updatePagination();\n        this._alignInkBarToSelectedTab();\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._realignInkBar) {\n      this._realignInkBar.unsubscribe();\n      this._realignInkBar = null;\n    }\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    let /** @type {?} */ translateX = this.scrollDistance + 'px';\n    if (this._getLayoutDirection() == 'ltr') {\n      translateX = '-' + translateX;\n    }\n\n    applyCssTransform(this._tabList.nativeElement, `translate3d(${translateX}, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance;  }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers\n        ? this._labelWrappers.toArray()[labelIndex]\n        :  null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    this._showPaginationControls =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!this._showPaginationControls) {\n      this.scrollDistance = 0;\n    }\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n        ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n        : null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/** @type {?} */\nMdTabHeader.prototype._disableRipple;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._ngZone;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective, Dir, LayoutDirection} from '../core';\nimport'rxjs/add/operator/map';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _dir\n * @param {?} _elementRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _elementRef: ElementRef) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('void', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._dir;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdInkBar} from '../ink-bar';\nimport {MdRipple} from '../../core/ripple/index';\nimport {ViewportRuler} from '../../core/overlay/position/viewport-ruler';\nimport {Dir, MD_RIPPLE_GLOBAL_OPTIONS, Platform, RippleGlobalOptions} from '../../core';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/auditTime';\nimport'rxjs/add/operator/takeUntil';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/merge';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNav implements AfterContentInit, OnDestroy {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * @param {?} _dir\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Dir,\nprivate _ngZone: NgZone) { }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.dirChange : Observable.of(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          Observable.fromEvent(window, 'resize').auditTime(10) :\n          Observable.of(null);\n\n      return Observable.merge(dirChange, resize)\n          .takeUntil(this._onDestroy)\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\n_alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n};\n}\n\nfunction MdTabNav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNav.ctorParameters;\n/** @type {?} */\nMdTabNav.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nMdTabNav.prototype._onDestroy;\n/** @type {?} */\nMdTabNav.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNav.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNav.prototype._inkBar;\n/** @type {?} */\nMdTabNav.prototype._dir;\n/** @type {?} */\nMdTabNav.prototype._ngZone;\n}\n\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink {\nprivate _isActive: boolean = false;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n */\nconstructor(private _mdTabNavBar: MdTabNav,\nprivate _elementRef: ElementRef) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\n  host: {'class': 'mat-tab-link'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNav, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/** @type {?} */\nMdTabLink.prototype._isActive;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n/**\n * Simple directive that extends the ripple and matches the selector of the MdTabLink. This\n * adds the ripple behavior to nav bar labels.\n */\nexport class MdTabLinkRipple extends MdRipple {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n      elementRef: ElementRef,\n      ngZone: NgZone,\n      ruler: ViewportRuler,\n      platform: Platform,\n        globalOptions: RippleGlobalOptions) {\n    super(elementRef, ngZone, ruler, platform, globalOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\n}\n\nfunction MdTabLinkRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLinkRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLinkRipple.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    this._ngZone.runOutsideAngular(() => {\n      requestAnimationFrame(() => {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'left',\n            this._getLeftPosition(element));\n        this._renderer.setStyle(this._elementRef.nativeElement, 'width',\n            this._getElementWidth(element));\n      });\n    });\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Generates the pixel distance from the left based on the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getLeftPosition(element: HTMLElement): string {\n    return element ? element.offsetLeft + 'px' : '0';\n  }\n/**\n * Generates the pixel width from the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementWidth(element: HTMLElement): string {\n    return element ? element.offsetWidth + 'px' : '0';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {}\n/**\n * Whether the tab label is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.propDecorators;\n/**\n * Whether the tab label is disabled.\n * @type {?}\n */\nMdTabLabelWrapper.prototype._disabled;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {MdTab} from './tab';\nimport'rxjs/add/operator/map';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup {\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = null;\n/**\n * Whether the tab group should grow to the size of the active tab\n */\nprivate _dynamicHeight: boolean = false;\n/**\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * Whether ripples for the tab-group should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _disableRipple: boolean = false;\nprivate _selectedIndex: number = null;\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @return {?}\n */\nget selectedIndexChange(): Observable<number> {\n    return this.selectChange.map(event => event.index);\n  }\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n */\nconstructor(private _renderer: Renderer2) {\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n    // ensures that values like NaN can't get through and which would otherwise throw the\n    // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n    this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != this._indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(this._indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - this._indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = this._indexToSelect - this._selectedIndex;\n      }\n    });\n\n    this._selectedIndex = this._indexToSelect;\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'disableRipple': [{ type: Input },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Whether the tab group should grow to the size of the active tab\n * @type {?}\n */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._disableRipple;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {TemplatePortal} from '../core/portal/portal';\nimport {\n  ViewContainerRef, Input, TemplateRef, ViewChild, OnInit, ContentChild,\n  Component\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nimport {MdTabLabel} from './tab-label';\nexport class MdTab implements OnInit {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal { return this._contentPortal; }\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number = null;\nprivate _disabled = false;\n/**\n * Whether the tab is disabled\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/** @type {?} */\nMdTab.prototype._disabled;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '../core';\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends TemplatePortalDirective {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label], [mdTabLabel], [matTabLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {OverlayModule, PortalModule, MdCommonModule, LIVE_ANNOUNCER_PROVIDER} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MdCommonModule,\n  ],\n  exports: [MdSnackBarContainer, MdCommonModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\n\nexport {MdSnackBar} from './snack-bar';\nexport {SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer} from './snack-bar-container';\nexport {MdSnackBarConfig} from './snack-bar-config';\nexport {MdSnackBarRef} from './snack-bar-ref';\nexport {SimpleSnackBar} from './simple-snack-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, ComponentRef, Optional, SkipSelf} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {extendObject} from '../core/util/object-extend';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any>;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> {\n    return this._parentSnackBar ?\n        this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any>) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    config = _applyConfigDefaults(config);\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n    let /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n    // animation is complete.\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    // If no snack bar is in view, enter the new snack bar.\n    } else {\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => {\n        setTimeout(() => snackBarRef.dismiss(), config.duration);\n      });\n    }\n\n    this._live.announce(config.announcementMessage, config.politeness);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config: MdSnackBarConfig = {}): MdSnackBarRef<SimpleSnackBar> {\n    config.announcementMessage = message;\n    let /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n    simpleSnackBarRef.instance.message = message;\n    simpleSnackBarRef.instance.action = action;\n    return simpleSnackBarRef;\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n\n    // The snackbar animation needs the content to be resolved in order to transform the bar\n    // out of the view initially (so it can slide in). To make the content resolve, we manually\n    // detect changes.\n    containerRef.changeDetectorRef.detectChanges();\n\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} container\n * @param {?} overlayRef\n * @return {?}\n */\nprivate _attachSnackbarContent<T>(component: ComponentType<T>,\n                                    container: MdSnackBarContainer,\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\n    let /** @type {?} */ portal = new ComponentPortal(component);\n    let /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n    return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    let /** @type {?} */ state = new OverlayState();\n    state.direction = config.direction;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');\n    return this._overlay.create(state);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * The message to be shown in the snack bar.\n */\nmessage: string;\n/**\n * The label for the button in the snack bar.\n */\naction: string;\n/**\n * The instance of the component making up the content of the snack bar.\n */\nsnackBarRef: MdSnackBarRef<SimpleSnackBar>;\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    this.snackBarRef._action();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * The message to be shown in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.message;\n/**\n * The label for the button in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.action;\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\nprivate onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\nprivate onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nanimationState: SnackBarState = 'initial';\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this.onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    // Note: we shouldn't use `this` inside the zone callback,\n    // because it can cause a memory leak.\n    const /** @type {?} */ onExit = this.onExit;\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      onExit.next();\n      onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\nprivate _instance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * @return {?}\n */\nget instance(): T {\n    return this._instance;\n  }\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened: Subject<any>;\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction: Subject<any> = new Subject();\n/**\n * @param {?} instance\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(instance: T,\n              containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    // Sets the readonly instance of the snack bar content component.\n    this._instance = instance;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\n_action(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarRef.prototype._instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {AriaLivePoliteness, LayoutDirection} from '../core';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef = null;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: LayoutDirection = 'ltr';\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {\n  MdErrorDirective,\n  MdHint,\n  MdInputContainer,\n  MdInputDirective,\n  MdPlaceholder,\n  MdPrefix,\n  MdSuffix\n} from './input-container';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\n\nexport {MdTextareaAutosize} from './autosize';\nexport {MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer} from './input-container';\nexport {getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError} from './input-container-errors';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit} from '@angular/core';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    textarea.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n  Inject\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty, Platform} from '../core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  getMdInputContainerDuplicatedHintError,\n  getMdInputContainerMissingMdInputError,\n  getMdInputContainerPlaceholderConflictError,\n  getMdInputContainerUnsupportedTypeError\n} from './input-container-errors';\nimport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from '../core/placeholder/placeholder-options';\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n/**\n * Hint text to be shown underneath the input.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n */\nid: string = `md-input-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n/**\n * Single error message to be shown underneath the input.\n */\nexport class MdErrorDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    'class': 'mat-input-error'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdErrorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdErrorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdErrorDirective.ctorParameters;\n}\n\n/**\n * Prefix to be placed the the front of the input.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix], [md-prefix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n/**\n * Suffix to be placed at the end of the input.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix], [md-suffix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n/**\n * Marker for the input element that `MdInputContainer` is wrapping.\n */\nexport class MdInputDirective {\n/**\n * Variables used as cache for getters and setters.\n */\nprivate _type = 'text';\nprivate _placeholder: string = '';\nprivate _disabled = false;\nprivate _required = false;\nprivate _id: string;\nprivate _cachedUid: string;\n/**\n * Whether the element is focused or not.\n */\nfocused = false;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n */\nariaDescribedby: string;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._ngControl ? this._ngControl.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    if (this._placeholder !== value) {\n      this._placeholder = value;\n      this._placeholderChange.emit(this._placeholder);\n    }\n  }\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) { this._elementRef.nativeElement.value = value; }\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n */\n_placeholderChange = new EventEmitter<string>();\n/**\n * Whether the input is empty.\n * @return {?}\n */\nget empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @return {?}\n */\nprivate get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\npublic _ngControl: NgControl,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n/**\n * Focuses the input element.\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\n/**\n * @return {?}\n */\n_onFocus() { this.focused = true; }\n/**\n * @return {?}\n */\n_onBlur() { this.focused = false; }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Whether the input is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ control = this._ngControl;\n    const /** @type {?} */ isInvalid = control && control.invalid;\n    const /** @type {?} */ isTouched = control && control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n      throw getMdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; }\n/**\n * @return {?}\n */\nprivate _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let /** @type {?} */ validity = ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity;\n    return validity && validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    'class': 'mat-input-element',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '(blur)': '_onBlur()',\n    '(focus)': '_onFocus()',\n    '(input)': '_onInput()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'_placeholderChange': [{ type: Output },],\n};\n}\n\nfunction MdInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputDirective.ctorParameters;\n/** @type {?} */\nMdInputDirective.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInputDirective.prototype._type;\n/** @type {?} */\nMdInputDirective.prototype._placeholder;\n/** @type {?} */\nMdInputDirective.prototype._disabled;\n/** @type {?} */\nMdInputDirective.prototype._required;\n/** @type {?} */\nMdInputDirective.prototype._id;\n/** @type {?} */\nMdInputDirective.prototype._cachedUid;\n/**\n * Whether the element is focused or not.\n * @type {?}\n */\nMdInputDirective.prototype.focused;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInputDirective.prototype.ariaDescribedby;\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n * @type {?}\n */\nMdInputDirective.prototype._placeholderChange;\n/** @type {?} */\nMdInputDirective.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInputDirective.prototype._elementRef;\n/** @type {?} */\nMdInputDirective.prototype._renderer;\n/** @type {?} */\nMdInputDirective.prototype._platform;\n/** @type {?} */\nMdInputDirective.prototype._ngControl;\n/** @type {?} */\nMdInputDirective.prototype._parentForm;\n/** @type {?} */\nMdInputDirective.prototype._parentFormGroup;\n}\n\n/**\n * Container for text inputs that applies Material Design styling and behavior.\n */\nexport class MdInputContainer implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Alignment of the input container's content.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Color of the input divider, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use color instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the input hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the input's underline element.\n */\nunderlineRef: ElementRef;\n\n   _mdInputChild: MdInputDirective;\n\n   _placeholderChild: MdPlaceholder;\n\n   _errorChildren: QueryList<MdErrorDirective>;\n\n   _hintChildren: QueryList<MdHint>;\n\n   _prefixChildren: QueryList<MdPrefix>;\n\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\n      placeholderOptions: PlaceholderOptions) {\n      this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n      this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateInputChild();\n    this._processHints();\n    this._validatePlaceholders();\n\n    // Re-validate when things change.\n    this._hintChildren.changes.subscribe(() => this._processHints());\n    this._mdInputChild._placeholderChange.subscribe(() => this._validatePlaceholders());\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateInputChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && ( /** @type {?} */((control as any)))[prop];\n  }\n/**\n * Whether the input has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\n/**\n * Focuses the underlying input.\n * @return {?}\n */\n_focusInput() { this._mdInputChild.focus(); }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    let /** @type {?} */ input = this._mdInputChild;\n    return (this._errorChildren.length > 0 && input._isErrorState()) ? 'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `input` attribute or child element with the\n * `md-placeholder` attribute.\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw getMdInputContainerPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint = null;\n      let /** @type {?} */ endHint: MdHint = null;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the child input's `aria-describedby` to a space-separated list of the ids\n * of the currently-specified hints, as well as a generated id for the hint label.\n * @return {?}\n */\nprivate _syncAriaDescribedby() {\n    if (this._mdInputChild) {\n      let /** @type {?} */ ids: string[] = [];\n      let /** @type {?} */ startHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'start') : null;\n      let /** @type {?} */ endHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'end') : null;\n\n      if (startHint) {\n        ids.push(startHint.id);\n      } else if (this._hintLabel) {\n        ids.push(this._hintLabelId);\n      }\n\n      if (endHint) {\n        ids.push(endHint.id);\n      }\n\n      this._mdInputChild.ariaDescribedby = ids.join(' ');\n    }\n  }\n/**\n * Throws an error if the container's input child was removed.\n * @return {?}\n */\nprivate _validateInputChild() {\n    if (!this._mdInputChild) {\n      throw getMdInputContainerMissingMdInputError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  animations: [\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n      ])\n    ])\n  ],\n  host: {\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    'class': 'mat-input-container',\n    '[class.mat-input-invalid]': '_mdInputChild._isErrorState()',\n    '[class.mat-focused]': '_mdInputChild.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_mdInputChild': [{ type: ContentChild, args: [MdInputDirective, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdInputContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputContainer.ctorParameters;\n/** @type {?} */\nMdInputContainer.propDecorators;\n/** @type {?} */\nMdInputContainer.prototype._placeholderOptions;\n/**\n * Alignment of the input container's content.\n * @type {?}\n */\nMdInputContainer.prototype.align;\n/**\n * Color of the input divider, based on the theme.\n * @type {?}\n */\nMdInputContainer.prototype.color;\n/** @type {?} */\nMdInputContainer.prototype._hideRequiredMarker;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdInputContainer.prototype._subscriptAnimationState;\n/** @type {?} */\nMdInputContainer.prototype._hintLabel;\n/** @type {?} */\nMdInputContainer.prototype._hintLabelId;\n/** @type {?} */\nMdInputContainer.prototype._floatPlaceholder;\n/**\n * Reference to the input's underline element.\n * @type {?}\n */\nMdInputContainer.prototype.underlineRef;\n/** @type {?} */\nMdInputContainer.prototype._mdInputChild;\n/** @type {?} */\nMdInputContainer.prototype._placeholderChild;\n/** @type {?} */\nMdInputContainer.prototype._errorChildren;\n/** @type {?} */\nMdInputContainer.prototype._hintChildren;\n/** @type {?} */\nMdInputContainer.prototype._prefixChildren;\n/** @type {?} */\nMdInputContainer.prototype._suffixChildren;\n/** @type {?} */\nMdInputContainer.prototype._elementRef;\n/** @type {?} */\nMdInputContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputContainerUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by md-input-container.`);\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdInputContainerDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerMissingMdInputError(): Error {\n  return Error('md-input-container must contain an mdInput directive. ' +\n                   'Did you forget to add mdInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule],\n  exports: [MdProgressBar, MdCommonModule],\n  declarations: [MdProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\n\n\nexport {MdProgressBar} from './progress-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  HostBinding,\n  Input,\n} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },{ type: HostBinding, args: ['attr.mode', ] },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nclass MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdCommonModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\nexport {MdProgressSpinnerModule};\nexport {PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner} from './progress-spinner';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  HostBinding,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {'class': 'mat-progress-spinner'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number) {\n    clearInterval(this._interdeterminateInterval);\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() {\n    return this._mode;\n  }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\n    super(renderer, elementRef);\n  }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax'\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(renderer, elementRef, ngZone);\n    this.mode = 'indeterminate';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number) {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MdIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdIcon, MdCommonModule],\n  declarations: [MdIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\n\n\nexport {MdIconBase,_MdIconMixinBase,MdIcon} from './icon';\nexport {getMdIconNameNotFoundError,getMdIconNoHttpProviderError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon-registry';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChange,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {MdIconRegistry} from './icon-registry';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        // Use default namespace.\n        return ['', parts[0]];\n      case 2:\n        return /** @type {?} */(( <[string, string]>parts));\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: {[propertyName: string]: SimpleChange}) {\n    const /** @type {?} */ changedInputs = Object.keys(changes);\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n        this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      }\n    }\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    // Remove existing child nodes and add the new SVG element.\n    // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n    // but it fails in IE11: https://github.com/angular/angular/issues/6327\n    layoutElement.innerHTML = '';\n    this._renderer.appendChild(layoutElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, SecurityContext, Optional, SkipSelf} from '@angular/core';\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\nimport {Http} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/forkJoin';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/operator/finally';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<md-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n                   'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    if (this._iconSetConfigs.has(namespace)) {\n      this._iconSetConfigs.get(namespace).push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (this._cachedIconsByUrl.has(url)) {\n      return Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));\n    }\n    return this._loadSvgIconFromConfig(new SvgIconConfig(url))\n        .do(svg => this._cachedIconsByUrl.set(url, svg))\n        .map(svg => cloneSvg(svg));\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    if (this._svgIconConfigs.has(key)) {\n      return this._getSvgFromConfig(this._svgIconConfigs.get(key));\n    }\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n    return Observable.throw(getMdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return Observable.of(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config)\n          .do(svg => config.svgElement = svg)\n          .map(svg => cloneSvg(svg));\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return Observable.of(namedIcon);\n    }\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\n        .filter(iconSetConfig => !iconSetConfig.svgElement)\n        .map(iconSetConfig =>\n            this._loadSvgIconSetFromConfig(iconSetConfig)\n                .catch((err: any): Observable<SVGElement> => {\n                  let /** @type {?} */ url =\n                      this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n                  // Swallow errors fetching individual URLs so the combined Observable won't\n                  // necessarily fail.\n                  console.log(`Loading icon set URL: ${url} failed: ${err}`);\n                  return Observable.of(null);\n                })\n                .do(svg => {\n                  // Cache SVG element.\n                  if (svg) {\n                    iconSetConfig.svgElement = svg;\n                  }\n                }));\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return Observable.forkJoin(iconSetFetchRequests)\n        .map(() => {\n          const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n          if (!foundIcon) {\n            throw getMdIconNameNotFoundError(name);\n          }\n          return foundIcon;\n        });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .map(svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url)\n        .map(svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMdIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    if (this._inProgressUrlFetches.has(url)) {\n      return this._inProgressUrlFetches.get(url);\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = /** @type {?} */(( <Observable<string>> this._http.get(url)\n        .map(response => response.text())\n        .finally(() => {\n          this._inProgressUrlFetches.delete(url);\n        })\n        .share()));\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n\nexport const /** @type {?} */ ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdChip, MdBasicChip} from './chip';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdBasicChip],\n  declarations: [MdChipList, MdChip, MdBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\n\nexport {MdChipList} from './chip-list';\nexport {MdChipEvent,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip} from './chip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {SPACE, LEFT_ARROW, RIGHT_ARROW, TAB} from '../core/keyboard/keycodes';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n * \n * Example:\n * \n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nexport class MdChipList implements AfterContentInit, OnDestroy {\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprivate _subscribed: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription: Subscription;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager;\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = 0);\n    });\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._tabOutSubscription) {\n      this._tabOutSubscription.unsubscribe();\n    }\n  }\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * it's selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * Programmatically focus the chip list. This in turn focuses the first\n * non-disabled chip in this chip list.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip.\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager\n    if (target && target.classList.contains('mat-chip')) {\n      switch (event.keyCode) {\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this._toggleSelectOnFocusedChip();\n          }\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n          break;\n        case LEFT_ARROW:\n          this._keyManager.setPreviousItemActive();\n          event.preventDefault();\n          break;\n        case RIGHT_ARROW:\n          this._keyManager.setNextItemActive();\n          event.preventDefault();\n          break;\n        default:\n          this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Toggles the selected state of the currently focused chip.\n * @return {?}\n */\nprotected _toggleSelectOnFocusedChip(): void {\n    // Allow disabling of chip selection\n    if (!this.selectable) {\n      return;\n    }\n\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedChip: MdChip = this.chips.toArray()[focusedIndex];\n\n      if (focusedChip) {\n        focusedChip.toggleSelected();\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._subscribed.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip.onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and check focus\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        // Check whether the chip is the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n\n      this._subscribed.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._subscribed.set(chip, true);\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  host: {\n    // Properties\n    '[attr.tabindex]': '_tabIndex',\n    'role': 'listbox',\n    'class': 'mat-chip-list',\n\n    // Events\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectable': [{ type: Input },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._subscribed;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\n\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable, mixinDisabled} from '../core/common-behaviors/disabled';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements Focusable, OnDestroy, CanColor, CanDisable {\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    (this.selected ? this.select : this.deselect).emit({chip: this});\n  }\n  protected _selected: boolean = false;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Emitted when the chip is focused.\n */\nonFocus = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?} Whether the chip is selected.\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this.onFocus.emit({chip: this});\n  }\n/**\n * The aria-disabled state for the chip\n * @return {?}\n */\n_isAriaDisabled(): string {\n    return String(this.disabled);\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.focus();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': '_isAriaDisabled()',\n    '(click)': '_handleClick($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_hasFocus = false',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._selected;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emitted when the chip is focused.\n * @type {?}\n */\nMdChip.prototype.onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {'class': 'mat-card-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-title, mat-card-title, [md-card-title], [mat-card-title],' +\n  '[mdCardTitle], [matCardTitle]',\n  host: {\n    'class': 'mat-card-title '\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle],' +\n  '[mdCardSubtitle], [matCardSubtitle]',\n  host: {\n    'class': 'mat-card-subtitle '\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {'class': 'mat-card-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image], [mdCardImage], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image], [mdCardImageSmall], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image], [mdCardImageMedium], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image], [mdCardImageLarge], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image], [mdCardImageXLarge], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar], [mdCardAvatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdCommonModule} from '../core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdCommonModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    MdCommonModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\n\nexport {MdGridList} from './grid-list';\nexport {MdGridTile} from './grid-tile';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Dir} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Dir) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`md-grid-list: must pass in number of columns. ` +\n                      `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string]): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'role': 'list',\n    'class': 'mat-grid-list',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use paddingTop and marginTop to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit, Directive\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: string): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar], [mdGridAvatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdRippleModule, MdCommonModule} from '../core';\nimport {\n  MdList,\n  MdListItem,\n  MdListDivider,\n  MdListAvatarCssMatStyler,\n  MdListIconCssMatStyler,\n  MdListCssMatStyler,\n  MdNavListCssMatStyler,\n  MdDividerCssMatStyler,\n  MdListSubheaderCssMatStyler,\n} from './list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, MdCommonModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    MdCommonModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\n\nexport {MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty, MdLine, MdLineSetter} from '../core';\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\nexport class MdList {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect should be disabled on the list-items or not.\n * This flag only has an effect for `md-nav-list` components.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n/** @type {?} */\nMdList.propDecorators;\n/** @type {?} */\nMdList.prototype._disableRipple;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {'class': 'mat-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {'class': 'mat-nav-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {'class': 'mat-divider'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar], [mdListAvatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon], [mdListIcon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader]',\n  host: {'class': 'mat-subheader'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\nexport class MdListItem implements AfterContentInit {\nprivate _lineSetter: MdLineSetter;\nprivate _disableRipple: boolean = false;\nprivate _isNavList: boolean = false;\n/**\n * Whether the ripple effect on click should be disabled. This applies only to list items that are\n * part of a nav list. The value of `disableRipple` on the `md-nav-list` overrides this flag.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && this._isNavList && !this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._disableRipple;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {A11yModule} from '../core/a11y/index';\nimport {OverlayModule} from '../core/overlay/overlay-directives';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\n  exports: [MdSidenavContainer, MdSidenav, MdCommonModule],\n  declarations: [MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\n\nexport {throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer2,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy, Inject,\n} from '@angular/core';\nimport {Dir, coerceBooleanProperty} from '../core';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport'rxjs/add/operator/first';\nimport {DOCUMENT} from '@angular/platform-browser';\n/**\n * Throws an exception when two MdSidenav are matching the same side.\n * @param {?} align\n * @return {?}\n */\nexport function throwMdDuplicatedSidenavError(align: string) {\n  throw Error(`A sidenav was already declared for 'align=\"${align}\"'`);\n}\n/**\n * Sidenav toggle promise result.\n */\nexport class MdSidenavToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdSidenavToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavToggleResult.prototype.type;\n/** @type {?} */\nMdSidenavToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-sidenav> component.\n * \n * This component corresponds to the drawer of the sidenav.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdSidenav implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n */\nprivate _align: 'start' | 'end' = 'start';\n/**\n * Direction which the sidenav is aligned in.\n * @return {?}\n */\nget align() { return this._align; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) {\n    // Make sure we have a valid value.\n    value = (value == 'end') ? 'end' : 'start';\n    if (value != this._align) {\n      this._align = value;\n      this.onAlignChanged.emit();\n    }\n  }\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the sidenav can be closed with the escape key or not.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the sidenav is opened.\n */\n_opened: boolean = false;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n */\nonOpenStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully opened.\n */\nonOpen = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n */\nonCloseStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully closed.\n */\nonClose = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav alignment changes.\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n */\nprivate _toggleAnimationPromise: Promise<MdSidenavToggleResult> = null;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n */\nprivate _resolveToggleAnimationPromise: (animationFinished: boolean) => void = null;\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the sidenav is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n *     If not available we do not hook on transitions.\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\n    this.onOpen.subscribe(() => {\n      if (this._doc) {\n        this._elementFocusedBeforeSidenavWasOpened = this._doc.activeElement as HTMLElement;\n      }\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => this._restoreFocus());\n  }\n/**\n * If focus is currently inside the sidenav, restores it to where it was before the sidenav\n * opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeSidenavWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeSidenavWasOpened = null;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n\n    // This can happen when the sidenav is set to opened in\n    // the template and the transition hasn't ended.\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(true);\n      this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the sidenav is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n * rejected if it didn't).\n * @return {?}\n */\nopen(): Promise<MdSidenavToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n * rejected if it didn't).\n * @return {?}\n */\nclose(): Promise<MdSidenavToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n * close() when it's closed.\n * @param {?=} isOpen Whether the sidenav should be open.\n * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdSidenavToggleResult> {\n    // Shortcut it if we're already opened.\n    if (isOpen === this.opened) {\n      return this._toggleAnimationPromise ||\n          Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n    }\n\n    this._opened = isOpen;\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this.isFocusTrapEnabled;\n    }\n\n    if (isOpen) {\n      this.onOpenStart.emit();\n    } else {\n      this.onCloseStart.emit();\n    }\n\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(false);\n    }\n    this._toggleAnimationPromise = new Promise<MdSidenavToggleResult>(resolve => {\n      this._resolveToggleAnimationPromise = animationFinished =>\n          resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));\n    });\n    return this._toggleAnimationPromise;\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * When transition has finished, set the internal state for classes and emit the proper event.\n * The event passed is actually of type TransitionEvent, but that type is not available in\n * Android so we use any.\n * @param {?} transitionEvent\n * @return {?}\n */\n_onTransitionEnd(transitionEvent: TransitionEvent) {\n    if (transitionEvent.target == this._elementRef.nativeElement\n        // Simpler version to check for prefixes.\n        && transitionEvent.propertyName.endsWith('transform')) {\n      if (this._opened) {\n        this.onOpen.emit();\n      } else {\n        this.onClose.emit();\n      }\n\n      if (this._toggleAnimationPromise) {\n        this._resolveToggleAnimationPromise(true);\n        this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nget _isClosing() {\n    return !this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpening() {\n    return this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isClosed() {\n    return !this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpened() {\n    return this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isEnd() {\n    return this.align == 'end';\n  }\n/**\n * @return {?}\n */\nget _modeSide() {\n    return this.mode == 'side';\n  }\n/**\n * @return {?}\n */\nget _modeOver() {\n    return this.mode == 'over';\n  }\n/**\n * @return {?}\n */\nget _modePush() {\n    return this.mode == 'push';\n  }\n/**\n * @return {?}\n */\nget _width() {\n    if (this._elementRef.nativeElement) {\n      return this._elementRef.nativeElement.offsetWidth;\n    }\n    return 0;\n  }\nprivate _elementFocusedBeforeSidenavWasOpened: HTMLElement = null;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  // TODO(mmalerba): move template to separate file.\n  templateUrl: 'sidenav.html',\n  host: {\n    'class': 'mat-sidenav',\n    '(transitionend)': '_onTransitionEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-sidenav-closed]': '_isClosed',\n    '[class.mat-sidenav-closing]': '_isClosing',\n    '[class.mat-sidenav-end]': '_isEnd',\n    '[class.mat-sidenav-opened]': '_isOpened',\n    '[class.mat-sidenav-opening]': '_isOpening',\n    '[class.mat-sidenav-over]': '_modeOver',\n    '[class.mat-sidenav-push]': '_modePush',\n    '[class.mat-sidenav-side]': '_modeSide',\n    'tabIndex': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpenStart': [{ type: Output, args: ['open-start', ] },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onCloseStart': [{ type: Output, args: ['close-start', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._focusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n * @type {?}\n */\nMdSidenav.prototype._align;\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdSidenav.prototype.mode;\n/** @type {?} */\nMdSidenav.prototype._disableClose;\n/**\n * Whether the sidenav is opened.\n * @type {?}\n */\nMdSidenav.prototype._opened;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onOpenStart;\n/**\n * Event emitted when the sidenav is fully opened.\n * @type {?}\n */\nMdSidenav.prototype.onOpen;\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onCloseStart;\n/**\n * Event emitted when the sidenav is fully closed.\n * @type {?}\n */\nMdSidenav.prototype.onClose;\n/**\n * Event emitted when the sidenav alignment changes.\n * @type {?}\n */\nMdSidenav.prototype.onAlignChanged;\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._toggleAnimationPromise;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._resolveToggleAnimationPromise;\n/** @type {?} */\nMdSidenav.prototype._elementFocusedBeforeSidenavWasOpened;\n/** @type {?} */\nMdSidenav.prototype._elementRef;\n/** @type {?} */\nMdSidenav.prototype._focusTrapFactory;\n/** @type {?} */\nMdSidenav.prototype._doc;\n}\n\n/**\n * <md-sidenav-container> component.\n * \n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdSidenavContainer implements AfterContentInit {\n   _sidenavs: QueryList<MdSidenav>;\n/**\n * The sidenav child with the `start` alignment.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The sidenav child with the `end` alignment.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the sidenav backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The sidenav at the start/end alignment, independent of direction.\n */\nprivate _start: MdSidenav;\nprivate _end: MdSidenav;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdSidenav;\nprivate _right: MdSidenav;\n/**\n * Whether to enable open/close trantions.\n */\n_enableTransitions = false;\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Dir,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.dirChange.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // On changes, assert on consistency.\n    this._sidenavs.changes.subscribe(() => this._validateDrawers());\n    this._sidenavs.forEach((sidenav: MdSidenav) => {\n      this._watchSidenavToggle(sidenav);\n      this._watchSidenavAlign(sidenav);\n    });\n    this._validateDrawers();\n\n    // Give the view a chance to render the initial state, then enable transitions.\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._enableTransitions = true);\n  }\n/**\n * Calls `open` of both start and end sidenavs\n * @return {?}\n */\npublic open() {\n    return Promise.all([this._start, this._end].map(sidenav => sidenav && sidenav.open()));\n  }\n/**\n * Calls `close` of both start and end sidenavs\n * @return {?}\n */\npublic close() {\n    return Promise.all([this._start, this._end].map(sidenav => sidenav && sidenav.close()));\n  }\n/**\n * Subscribes to sidenav events in order to set a class on the main container element when the\n * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavToggle(sidenav: MdSidenav): void {\n    if (!sidenav || sidenav.mode === 'side') { return; }\n    sidenav.onOpen.subscribe(() => this._setContainerClass(true));\n    sidenav.onClose.subscribe(() => this._setContainerClass(false));\n  }\n/**\n * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n * changes.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavAlign(sidenav: MdSidenav): void {\n    if (!sidenav) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping sides at the same time.\n    sidenav.onAlignChanged.subscribe(() =>\n        this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._validateDrawers()));\n  }\n/**\n * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-sidenav-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-sidenav-opened');\n    }\n  }\n/**\n * Validate the state of the sidenav children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end sidenav.\n    // NOTE: We must call toArray on _sidenavs even though it's iterable\n    // (see https://github.com/Microsoft/TypeScript/issues/3164).\n    for (let /** @type {?} */ sidenav of this._sidenavs.toArray()) {\n      if (sidenav.align == 'end') {\n        if (this._end != null) {\n          throwMdDuplicatedSidenavError('end');\n        }\n        this._end = sidenav;\n      } else {\n        if (this._start != null) {\n          throwMdDuplicatedSidenavError('start');\n        }\n        this._start = sidenav;\n      }\n    }\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalSidenav();\n  }\n/**\n * @return {?}\n */\n_closeModalSidenav() {\n    // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(sidenav => sidenav && !sidenav.disableClose && sidenav.mode !== 'side')\n      .forEach(sidenav => sidenav.close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isSidenavOpen(this._start) && this._start.mode != 'side')\n        || (this._isSidenavOpen(this._end) && this._end.mode != 'side');\n  }\n/**\n * @param {?} side\n * @return {?}\n */\nprivate _isSidenavOpen(side: MdSidenav): boolean {\n    return side != null && side.opened;\n  }\n/**\n * Return the width of the sidenav, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} sidenav\n * @param {?} mode\n * @return {?}\n */\nprivate _getSidenavEffectiveWidth(sidenav: MdSidenav, mode: string): number {\n    return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n  }\n/**\n * @return {?}\n */\n_getMarginLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'side');\n  }\n/**\n * @return {?}\n */\n_getMarginRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'side');\n  }\n/**\n * @return {?}\n */\n_getPositionLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'push');\n  }\n/**\n * @return {?}\n */\n_getPositionRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'push');\n  }\n/**\n * Returns the horizontal offset for the content area.  There should never be a value for both\n * left and right, so by subtracting the right value from the left value, we should always get\n * the appropriate offset.\n * @return {?}\n */\n_getPositionOffset() {\n    return this._getPositionLeft() - this._getPositionRight();\n  }\n/**\n * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n * doesn't seem to work right now.\n * @return {?}\n */\n_getStyles() {\n    return {\n      marginLeft: `${this._getMarginLeft()}px`,\n      marginRight: `${this._getMarginRight()}px`,\n      transform: `translate3d(${this._getPositionOffset()}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n  // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n  // changes its state.\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'sidenav.css',\n    'sidenav-transitions.css',\n  ],\n  host: {\n    'class': 'mat-sidenav-container',\n    '[class.mat-sidenav-transition]': '_enableTransitions',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_sidenavs': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._sidenavs;\n/**\n * Event emitted when the sidenav backdrop is clicked.\n * @type {?}\n */\nMdSidenavContainer.prototype.backdropClick;\n/**\n * The sidenav at the start/end alignment, independent of direction.\n * @type {?}\n */\nMdSidenavContainer.prototype._start;\n/** @type {?} */\nMdSidenavContainer.prototype._end;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdSidenavContainer.prototype._left;\n/** @type {?} */\nMdSidenavContainer.prototype._right;\n/**\n * Whether to enable open/close trantions.\n * @type {?}\n */\nMdSidenavContainer.prototype._enableTransitions;\n/** @type {?} */\nMdSidenavContainer.prototype._dir;\n/** @type {?} */\nMdSidenavContainer.prototype._element;\n/** @type {?} */\nMdSidenavContainer.prototype._renderer;\n/** @type {?} */\nMdSidenavContainer.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {MdCommonModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {RtlModule} from '../core/rtl/dir';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, FormsModule, MdCommonModule, StyleModule, RtlModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Dir} from '../core/rtl/dir';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\nexport class MdSliderBase { }\nexport const /** @type {?} */ _MdSliderMixinBase = mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) { this._invert = coerceBooleanProperty(value); }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() {\n    return this._max;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() {\n    return this._min;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop().length;\n    }\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    this._value = coerceNumberProperty(v, this._value);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _value: number = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) { this._vertical = coerceBooleanProperty(value); }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string|number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n */\nprivate _renderer: SliderRenderer = null;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * The last value for which a change event was emitted.\n */\nprivate _lastChangeValue: number = null;\n/**\n * The last value for which an input event was emitted.\n */\nprivate _lastInputValue: number = null;\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _dir: Dir) {\n    super();\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n    this._renderer = new SliderRenderer(this._elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emits a change and input event if the value changed. */\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    this._emitInputEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    event.preventDefault();\n    this._isSliding = true;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitValueIfChanged() {\n    if (this.value != this._lastChangeValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastChangeValue = this.value;\n      this._controlValueAccessorChangeFn(this.value);\n      this.change.emit(event);\n    }\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    if (this.value != this._lastInputValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastInputValue = this.value;\n      this.input.emit(event);\n    }\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number) {\n    return (value - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._renderer;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * The last value for which a change event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastChangeValue;\n/**\n * The last value for which an input event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastInputValue;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nexport class SliderRenderer {\nprivate _sliderElement: HTMLElement;\n/**\n * @param {?} elementRef\n */\nconstructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\ngetSliderDimensions() {\n    let /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n    return wrapperElement.getBoundingClientRect();\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\naddFocus() {\n    this._sliderElement.focus();\n  }\n}\n\nfunction SliderRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderRenderer.prototype._sliderElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MdSlideToggle} from './slide-toggle';\nimport {\n  FOCUS_ORIGIN_MONITOR_PROVIDER,\n  GestureConfig,\n  MdCommonModule,\n  MdRippleModule,\n  PlatformModule,\n} from '../core';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdRippleModule, MdCommonModule, PlatformModule],\n  exports: [MdSlideToggle, MdCommonModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    FOCUS_ORIGIN_MONITOR_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle} from './slide-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  FocusOrigin,\n  FocusOriginMonitor,\n  HammerInput,\n  MdRipple,\n  RippleRef,\n  Platform,\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextId = 0;\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSlideToggleMixinBase = mixinColor(mixinDisabled(MdSlideToggleBase), 'accent');\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase\n    implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable, CanColor {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId = `md-slide-toggle-${++nextId}`;\nprivate _checked: boolean = false;\nprivate _slideRenderer: SlideToggleRenderer = null;\nprivate _required: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * Name value will be applied to the input element if present\n */\nname: string = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the ripple effect for this slide-toggle is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * The onChangeEvent method will be also called on click.\n * This is because everything for the slide-toggle is wrapped inside of a label,\n * which triggers a onChange event on click.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n    if (!this.disabled && !this._slideRenderer.dragging) {\n      this.toggle();\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    this.onTouched();\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Whether the slide-toggle is checked.\n * @return {?}\n */\nget checked() { return !!this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    if (this.checked !== !!value) {\n      this._checked = value;\n      this.onChange(this._checked);\n    }\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * Emits the change event to the `change` output EventEmitter\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._disableRipple;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} _elementRef\n * @param {?} platform\n */\nconstructor(private _elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect} from './select';\nimport {MdCommonModule, OverlayModule, MdOptionModule} from '../core';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\n\nexport {SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelect} from './select';\nexport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n  OnInit,\n  Inject\n} from '@angular/core';\nimport {MdOption, MdOptionSelectionChange, MdOptgroup} from '../core/option/index';\nimport {ENTER, SPACE, UP_ARROW, DOWN_ARROW, HOME, END} from '../core/keyboard/keycodes';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Dir} from '../core/rtl/dir';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {ConnectedOverlayDirective} from '../core/overlay/overlay-directives';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport {SelectionModel} from '../core/selection/selection';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {getMdSelectDynamicMultipleError, getMdSelectNonArrayValueError} from './select-errors';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/filter';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\nimport {CanDisable} from '../core/common-behaviors/disabled';\nimport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS} from '../core/placeholder/placeholder-options';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase = mixinColor(MdSelectBase, 'primary');\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * Whether the select is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this._disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Dir,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions) {\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, null, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = this.options.changes.startWith(null).subscribe(() => {\n      this._resetOptions();\n\n      if (this._control) {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve(null).then(() => this._setSelectionByValue(this._control.value));\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this._focusHost();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._getTriggerRect().width;\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.panelOpen) {\n      this._onTouched();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel');\n    scrollContainer.scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._selectValue(value, isUserInput);\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption {\n    let /** @type {?} */ optionsArray = this.options.toArray();\n    let /** @type {?} */ correspondingOption = optionsArray.find(option => {\n      return option.value != null && option.value === value;\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this._keyManager.setActiveItem(optionsArray.indexOf(correspondingOption));\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = this.optionSelectionChanges\n      .filter(event => event.isUserInput)\n      .subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? null : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth =  this._triggerWidth - 13;\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0]));\n    }\n  }\n/**\n * Focuses the host element when the panel closes.\n * @return {?}\n */\nprivate _focusHost(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._selectionModel.hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = this._getOptionIndex(this._selectionModel.selected[0]);\n\n      selectedOptionOffset += this._getLabelCountBeforeOption(selectedOptionOffset);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n        '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0];\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n/**\n * Calculates the amount of option group labels that precede the specified option.\n * Useful when positioning the panel, because the labels will offset the index of the\n * currently-selected option.\n * @param {?} optionIndex\n * @return {?}\n */\nprivate _getLabelCountBeforeOption(optionIndex: number): number {\n    if (this.optionGroups.length) {\n      let /** @type {?} */ options = this.options.toArray();\n      let /** @type {?} */ groups = this.optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (options[i].group && options[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n    '[attr.aria-owns]': '_optionIds',\n    '[class.mat-select-disabled]': 'disabled',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * Whether the select is disabled.\n * @type {?}\n */\nMdSelect.prototype._disabled;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._control;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an exception to be thrown when attempting to change a s\n * elect's `multiple` option after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: 'scale(0.75)'\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: 'scale(0.75)'\n  })),\n  transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself and whether or not it is currently disabled.\n */\nexport interface Focusable extends CanDisable {\n  focus(): void;\n}\nexport class FocusKeyManager extends ListKeyManager<Focusable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Focusable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {UP_ARROW, DOWN_ARROW, TAB} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * This interface is for items that can be disabled. The type passed into\n * ListKeyManager must extend this interface.\n */\nexport interface CanDisable {\n  disabled?: boolean;\n}\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends CanDisable> {\nprivate _activeItemIndex: number = null;\nprivate _activeItem: T;\nprivate _tabOut = new Subject<void>();\nprivate _wrap: boolean = false;\n/**\n * @param {?} _items\n */\nconstructor(private _items: QueryList<T>) {\n  }\n/**\n * Turns on wrapping mode, which ensures that the active item will wrap to\n * the other end of list when there are no more items in the given direction.\n * \n * @return {?} The ListKeyManager that the method was called on.\n */\nwithWrap(): this {\n    this._wrap = true;\n    return this;\n  }\n/**\n * Sets the active item to the item at the index specified.\n * \n * @param {?} index The index of the item to be set as active.\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    this._activeItemIndex = index;\n    this._activeItem = this._items.toArray()[index];\n  }\n/**\n * Sets the active item depending on the key event passed in.\n * @param {?} event Keyboard event to be used for determining which element should be active.\n * @return {?}\n */\nonKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case DOWN_ARROW:\n        this.setNextItemActive();\n        break;\n      case UP_ARROW:\n        this.setPreviousItemActive();\n        break;\n      case TAB:\n        // Note that we shouldn't prevent the default action on tab.\n        this._tabOut.next(null);\n        return;\n      default:\n        return;\n    }\n\n    event.preventDefault();\n  }\n/**\n * Returns the index of the currently active item.\n * @return {?}\n */\nget activeItemIndex(): number {\n    return this._activeItemIndex;\n  }\n/**\n * Returns the currently active item.\n * @return {?}\n */\nget activeItem(): T {\n    return this._activeItem;\n  }\n/**\n * Sets the active item to the first enabled item in the list.\n * @return {?}\n */\nsetFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n/**\n * Sets the active item to the last enabled item in the list.\n * @return {?}\n */\nsetLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n/**\n * Sets the active item to the next enabled item in the list.\n * @return {?}\n */\nsetNextItemActive(): void {\n    this._activeItemIndex === null ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n/**\n * Sets the active item to a previous enabled item in the list.\n * @return {?}\n */\nsetPreviousItemActive(): void {\n    this._activeItemIndex === null && this._wrap ? this.setLastItemActive()\n                                                 : this._setActiveItemByDelta(-1);\n  }\n/**\n * Allows setting of the activeItemIndex without any other effects.\n * @param {?} index The new activeItemIndex.\n * @return {?}\n */\nupdateActiveItemIndex(index: number) {\n    this._activeItemIndex = index;\n  }\n/**\n * Observable that emits any time the TAB key is pressed, so components can react\n * when focus is shifted off of the list.\n * @return {?}\n */\nget tabOut(): Observable<void> {\n    return this._tabOut.asObservable();\n  }\n/**\n * This method sets the active item, given a list of items and the delta between the\n * currently active item and the new active item. It will calculate differently\n * depending on whether wrap mode is turned on.\n * @param {?} delta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByDelta(delta: number, items = this._items.toArray()): void {\n    this._wrap ? this._setActiveInWrapMode(delta, items)\n               : this._setActiveInDefaultMode(delta, items);\n  }\n/**\n * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n * down the list until it finds an item that is not disabled, and it will wrap if it\n * encounters either end of the list.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInWrapMode(delta: number, items: T[]): void {\n    // when active item would leave menu, wrap to beginning or end\n    this._activeItemIndex =\n      (this._activeItemIndex + delta + items.length) % items.length;\n\n    // skip all disabled menu items recursively until an enabled one is reached\n    if (items[this._activeItemIndex].disabled) {\n      this._setActiveInWrapMode(delta, items);\n    } else {\n      this.setActiveItem(this._activeItemIndex);\n    }\n  }\n/**\n * Sets the active item properly given the default mode. In other words, it will\n * continue to move down the list until it finds an item that is not disabled. If\n * it encounters either end of the list, it will stop and not wrap.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInDefaultMode(delta: number, items: T[]): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n  }\n/**\n * Sets the active item to the first enabled item starting at the index specified. If the\n * item is disabled, it will move in the fallbackDelta direction until it either\n * finds an enabled item or encounters the end of the list.\n * @param {?} index\n * @param {?} fallbackDelta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByIndex(index: number, fallbackDelta: number,\n                                  items = this._items.toArray()): void {\n    if (!items[index]) { return; }\n    while (items[index].disabled) {\n      index += fallbackDelta;\n      if (!items[index]) { return; }\n    }\n    this.setActiveItem(index);\n  }\n\n}\n\nfunction ListKeyManager_tsickle_Closure_declarations() {\n/** @type {?} */\nListKeyManager.prototype._activeItemIndex;\n/** @type {?} */\nListKeyManager.prototype._activeItem;\n/** @type {?} */\nListKeyManager.prototype._tabOut;\n/** @type {?} */\nListKeyManager.prototype._wrap;\n/** @type {?} */\nListKeyManager.prototype._items;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {\n  MdRippleModule,\n  MdCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  FocusOriginMonitor,\n} from '../core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule],\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\n\nexport {MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton} from './radio';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${_uniqueIdCounter++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton> = null;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this.selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is diabled\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = value;\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      let /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(MdRadioButtonBase, 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor {\n/**\n * The unique ID for the radio button.\n */\nid: string = `md-radio-${_uniqueIdCounter++}`;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether the ripple effect for this radio button is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    _radioDispatcher.listen((id: string, name: string) => {\n      if (id != this.id && name == this.name) {\n        this.checked = false;\n      }\n    });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    let /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disableRipple': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disableRipple;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule, MdCommonModule, FocusOriginMonitor, ObserveContentModule} from '../core';\nimport {MdCheckbox} from './checkbox';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserveContentModule],\n  exports: [MdCheckbox, MdCommonModule],\n  declarations: [MdCheckbox],\n  providers: [FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox} from './checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {FocusOrigin, FocusOriginMonitor, MdRipple, RippleRef} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Monotonically increasing integer used to auto-generate unique ids for checkbox components.\n */\nlet nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdCheckboxMixinBase = mixinColor(mixinDisabled(MdCheckboxBase), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase\n    implements ControlValueAccessor, AfterViewInit, OnDestroy, CanColor, CanDisable {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string = null;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n */\nid: string = `md-checkbox-${++nextId}`;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * Whether the ripple effect for this checkbox is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * ID of the native input element inside `<md-checkbox>`\n * @return {?}\n */\nget inputId(): string {\n    return `input-${this.id}`;\n  }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string;\n\n    switch (oldState) {\n    case TransitionCheckState.Init:\n      // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n      // [checked] bound to it.\n      if (newState === TransitionCheckState.Checked) {\n        animSuffix = 'unchecked-checked';\n      } else if (newState == TransitionCheckState.Indeterminate) {\n        animSuffix = 'unchecked-indeterminate';\n      } else {\n        return '';\n      }\n      break;\n    case TransitionCheckState.Unchecked:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'unchecked-checked' : 'unchecked-indeterminate';\n      break;\n    case TransitionCheckState.Checked:\n      animSuffix = newState === TransitionCheckState.Unchecked ?\n          'checked-unchecked' : 'checked-indeterminate';\n      break;\n    case TransitionCheckState.Indeterminate:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'indeterminate-checked' : 'indeterminate-unchecked';\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdCheckbox.prototype._disableRipple;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, MdRippleModule, StyleModule} from '../core';\nimport {\n  MdAnchor,\n  MdButton,\n  MdMiniFab,\n  MdButtonCssMatStyler,\n  MdFab,\n  MdIconButtonCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\n\n\nexport {MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n    StyleModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdCommonModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  Inject\n} from '@angular/core';\nimport {coerceBooleanProperty, FocusOriginMonitor, Platform} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\nimport {CanColor, mixinColor} from '../core/common-behaviors/color';\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MdMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFab.ctorParameters;\n}\n\nexport class MdButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonBase.prototype._renderer;\n/** @type {?} */\nMdButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdButtonMixinBase = mixinColor(mixinDisabled(MdButtonBase));\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect for this button is disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableRipple(v) { this._disableRipple = coerceBooleanProperty(v); }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super(renderer, elementRef);\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +\n            'button[md-fab], button[md-mini-fab],' +\n            'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +\n            'button[mat-fab], button[mat-mini-fab]',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/** @type {?} */\nMdButton.propDecorators;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdButton.prototype._disableRipple;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusOriginMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} platform\n * @param {?} focusOriginMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusOriginMonitor: FocusOriginMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusOriginMonitor);\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @return {?}\n */\nget _isAriaDisabled(): string {\n    return this.disabled ? 'true' : 'false';\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusOriginMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tabIndex': [{ type: HostBinding, args: ['tabIndex', ] },],\n};\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n/** @type {?} */\nMdAnchor.propDecorators;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  MdCommonModule,\n  StyleModule,\n} from '../core';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdCommonModule, StyleModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    MdCommonModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\n\nexport {ToggleType,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup implements AfterViewInit, ControlValueAccessor {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Disables all toggles in the group.\n */\nprivate _disabled: boolean = null;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle = null;\n/**\n * Whether the button toggle group is initialized or not.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle> = null;\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._isInitialized = true;\n  }\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n\n      // Only emit a change event if the view is completely initialized.\n      // We don't want to emit a change event for the initial values.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * Whether the button toggle group is initialized or not.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple {\n/**\n * Disables all toggles in the group.\n */\nprivate _disabled: boolean = null;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit {\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = null;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = null;\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector) {\n      if (newCheckedState) {\n        // Notify all button toggles with the same name (in the same group) to un-check.\n        this._buttonToggleDispatcher.notify(this.id, this.name);\n      }\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.buttonToggleGroup = toggleGroup;\n\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      _buttonToggleDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-button-toggle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: HostBinding },{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked', ] },{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled', ] },{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MATERIAL_SANITY_CHECKS,FloatPlaceholderType,PlaceholderOptions,MD_PLACEHOLDER_GLOBAL_OPTIONS,MdCoreModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,PlatformModule,Platform,getSupportedInputTypes,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './core/index';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCommonModule,MATERIAL_SANITY_CHECKS,FloatPlaceholderType,PlaceholderOptions,MD_PLACEHOLDER_GLOBAL_OPTIONS,MdCoreModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,PlatformModule,Platform,getSupportedInputTypes,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox,NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './core';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule} from './line/line';\nimport {RtlModule} from './rtl/dir';\nimport {ObserveContentModule} from './observe-content/observe-content';\nimport {MdOptionModule} from './option/index';\nimport {PortalModule} from './portal/portal-directives';\nimport {OverlayModule} from './overlay/overlay-directives';\nimport {A11yModule} from './a11y/index';\nimport {MdSelectionModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n\n// RTL\nexport {Dir, LayoutDirection, RtlModule} from './rtl/dir';\n\n// Mutation Observer\nexport {ObserveContentModule, ObserveContent} from './observe-content/observe-content';\n\nexport {MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './option/index';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from './platform/index';\n\n// Overlay\nexport {Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './overlay/index';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n} from './a11y/live-announcer';\n\n// Selection\nexport {SelectionModel,SelectionChange} from './selection/selection';\n\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './a11y/focus-trap';\nexport {InteractivityChecker} from './a11y/interactivity-checker';\nexport {isFakeMousedownFromScreenReader} from './a11y/fake-mousedown';\n\nexport {A11yModule} from './a11y/index';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Misc\nexport {ComponentType} from './overlay/generic-component-type';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox} from './selection/index';\n\n// Coercion\nexport {coerceBooleanProperty} from './coercion/boolean-property';\nexport {coerceNumberProperty} from './coercion/number-property';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\n\n// Common material module\nexport {MdCommonModule, MATERIAL_SANITY_CHECKS} from './common-behaviors/common-module';\n\n// Datetime\nexport {NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './datetime/index';\n\n// Placeholder\nexport {\n  FloatPlaceholderType,\n  PlaceholderOptions,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS\n} from './placeholder/placeholder-options';\nexport class MdCoreModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n  exports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport { InjectionToken } from '@angular/core';\n/**\n * InjectionToken that can be used to specify the global placeholder options.\n */\nexport const MD_PLACEHOLDER_GLOBAL_OPTIONS =\n  new InjectionToken<PlaceholderOptions>('md-placeholder-global-options');\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nexport interface PlaceholderOptions {\n  float?: FloatPlaceholderType;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\n\nexport {DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MdDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const /** @type {?} */ MD_DATE_FORMATS = new InjectionToken<MdDateFormats>('md-date-formats');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DateAdapter} from './date-adapter';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11 || date < 1) {\n      return null;\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to\n    // overflow.\n    if (result.getMonth() != month) {\n      return null;\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    let /** @type {?} */ timestamp = typeof value == 'number' ? value : Date.parse(value);\n    return isNaN(timestamp) ? null : new Date(timestamp);\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} s The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(s: string) {\n    return s.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to parse.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n}\n\n","\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return isNaN(parseFloat( /** @type {?} */((value as any)))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nimport {PlatformModule} from '../platform/index';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Platform} from '../platform/platform';\n\nimport'rxjs/add/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program';\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return Observable.of();\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ info = this._elementInfo.get(element);\n      info.checkChildren = checkChildren;\n      return info.subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: null,\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element, null);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin: FocusOrigin): void {\n    let /** @type {?} */ renderer = this._elementInfo.get(element).renderer;\n    let /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n      shouldSet ? renderer.addClass(element, className) : renderer.removeClass(element, className);\n    };\n\n    toggleClass('cdk-focused', !!origin);\n    toggleClass('cdk-touch-focused', origin === 'touch');\n    toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n    toggleClass('cdk-mouse-focused', origin === 'mouse');\n    toggleClass('cdk-program-focused', origin === 'program');\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    if (!this._elementInfo.get(element).checkChildren && element !== event.target) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    this._elementInfo.get(element).subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    if (this._elementInfo.get(element).checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget)) {\n      return;\n    }\n\n    this._setClasses(element, null);\n    this._elementInfo.get(element).subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n/** @type {?} */\nFocusOriginMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer2) {\n    this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusOriginMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\n}\n\n\nexport const /** @type {?} */ FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?}\n */\nlisten(listener: UniqueSelectionDispatcherListener) {\n    this._listeners.push(listener);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n\nexport const /** @type {?} */ UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[];\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      this.onChange.next(eventData);\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {Overlay, OVERLAY_PROVIDERS} from './overlay';\nexport {OverlayContainer} from './overlay-container';\nexport {FullscreenOverlayContainer} from './fullscreen-overlay-container';\nexport {OverlayRef} from './overlay-ref';\nexport {OverlayState} from './overlay-state';\nexport {ConnectedOverlayDirective, OverlayOrigin, OverlayModule} from './overlay-directives';\nexport {ViewportRuler} from './position/viewport-ruler';\n\nexport {HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange} from './position/connected-position';\nexport {Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './scroll/index';\n\n// Export pre-defined position strategies and interface to build custom ones.\nexport {PositionStrategy} from './position/position-strategy';\nexport {GlobalPositionStrategy} from './position/global-position-strategy';\nexport {ConnectedPositionStrategy} from './position/connected-position-strategy';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FocusTrapDirective, FocusTrapDeprecatedDirective, FocusTrapFactory} from './focus-trap';\nimport {LIVE_ANNOUNCER_PROVIDER} from './live-announcer';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '../platform/index';\nexport class A11yModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, PlatformModule],\n  declarations: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  exports: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  providers: [InteractivityChecker, FocusTrapFactory, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A11yModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA11yModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA11yModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Injectable,\n  InjectionToken,\n  Optional,\n  Inject,\n  SkipSelf,\n} from '@angular/core';\nimport {Platform} from '../platform/platform';\n\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement>('liveAnnouncerElement');\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\nexport class LiveAnnouncer {\nprivate _liveElement: Element;\n/**\n * @param {?} elementToken\n * @param {?} platform\n */\nconstructor(\n        elementToken: any,\n      platform: Platform) {\n    // Only do anything if we're on the browser platform.\n    if (platform.isBrowser) {\n      // We inject the live element as `any` because the constructor signature cannot reference\n      // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n      // causes TypeScript to preserve the constructor signature types.\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n  }\n/**\n * Announces a message to screenreaders.\n * @param {?} message Message to be announced to the screenreader\n * @param {?=} politeness The politeness of the announcer element\n * @return {?}\n */\nannounce(message: string, politeness: AriaLivePoliteness = 'polite'): void {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    setTimeout(() => this._liveElement.textContent = message, 100);\n  }\n/**\n * Removes the aria-live element from the DOM.\n * @return {?}\n */\n_removeLiveElement() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _createLiveElement(): Element {\n    let /** @type {?} */ liveEl = document.createElement('div');\n\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN, ] }, ]},\n{type: Platform, },\n];\n}\n\nfunction LiveAnnouncer_tsickle_Closure_declarations() {\n/** @type {?} */\nLiveAnnouncer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLiveAnnouncer.ctorParameters;\n/** @type {?} */\nLiveAnnouncer.prototype._liveElement;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} platform\n * @return {?}\n */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(\n    parentDispatcher: LiveAnnouncer, liveElement: any, platform: Platform) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, platform);\n}\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n    Platform,\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {Platform} from '../platform/platform';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\n\nimport'rxjs/add/operator/first';\n/**\n * Class that allows for trapping focus within a DOM element.\n * \n * NOTE: This class currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\nexport class FocusTrap {\nprivate _startAnchor: HTMLElement;\nprivate _endAnchor: HTMLElement;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this._enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset enabled(val: boolean) {\n    this._enabled = val;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\n    }\n  }\nprivate _enabled: boolean = true;\n/**\n * @param {?} _element\n * @param {?} _platform\n * @param {?} _checker\n * @param {?} _ngZone\n * @param {?=} deferAnchors\n */\nconstructor(\nprivate _element: HTMLElement,\nprivate _platform: Platform,\nprivate _checker: InteractivityChecker,\nprivate _ngZone: NgZone,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n/**\n * Destroys the focus trap by cleaning up the anchors.\n * @return {?}\n */\ndestroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n/**\n * Inserts the anchors into the DOM. This is usually done automatically\n * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n * @return {?}\n */\nattachAnchors(): void {\n    // If we're not on the browser, there can be no focus to trap.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    if (!this._startAnchor) {\n      this._startAnchor = this._createAnchor();\n    }\n\n    if (!this._endAnchor) {\n      this._endAnchor = this._createAnchor();\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this._startAnchor.addEventListener('focus', () => this.focusLastTabbableElement());\n      this._endAnchor.addEventListener('focus', () => this.focusFirstTabbableElement());\n\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n    });\n  }\n/**\n * Waits for the zone to stabilize, then either focuses the first element that the\n * user specified, or the first tabbable element..\n * @return {?}\n */\nfocusInitialElementWhenReady() {\n    this._executeOnStable(() => this.focusInitialElement());\n  }\n/**\n * Waits for the zone to stabilize, then focuses\n * the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElementWhenReady() {\n    this._executeOnStable(() => this.focusFirstTabbableElement());\n  }\n/**\n * Waits for the zone to stabilize, then focuses\n * the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElementWhenReady() {\n    this._executeOnStable(() => this.focusLastTabbableElement());\n  }\n/**\n * Get the specified boundary element of the trapped region.\n * @param {?} bound The boundary to get (start or end of trapped region).\n * @return {?} The boundary element.\n */\nprivate _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let /** @type {?} */ markers = /** @type {?} */(( this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n                                                 `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>));\n\n    for (let /** @type {?} */ i = 0; i < markers.length; i++) {\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}',` +\n                     ` use 'cdk-focus-region-${bound}' instead.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ?\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n/**\n * Focuses the element that should be focused when the focus trap is initialized.\n * @return {?}\n */\nfocusInitialElement() {\n    let /** @type {?} */ redirectToElement = /** @type {?} */(( this._element.querySelector('[cdk-focus-initial]') as HTMLElement));\n    if (redirectToElement) {\n      redirectToElement.focus();\n    } else {\n      this.focusFirstTabbableElement();\n    }\n  }\n/**\n * Focuses the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElement() {\n    let /** @type {?} */ redirectToElement = this._getRegionBoundary('start');\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n/**\n * Focuses the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElement() {\n    let /** @type {?} */ redirectToElement = this._getRegionBoundary('end');\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n/**\n * Get the first tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getFirstTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = 0; i < children.length; i++) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getFirstTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Get the last tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getLastTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = children.length - 1; i >= 0; i--) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getLastTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Creates an anchor element.\n * @return {?}\n */\nprivate _createAnchor(): HTMLElement {\n    let /** @type {?} */ anchor = document.createElement('div');\n    anchor.tabIndex = this._enabled ? 0 : -1;\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n/**\n * Executes a function when the zone is stable.\n * @param {?} fn\n * @return {?}\n */\nprivate _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.first().subscribe(fn);\n    }\n  }\n}\n\nfunction FocusTrap_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrap.prototype._startAnchor;\n/** @type {?} */\nFocusTrap.prototype._endAnchor;\n/** @type {?} */\nFocusTrap.prototype._enabled;\n/** @type {?} */\nFocusTrap.prototype._element;\n/** @type {?} */\nFocusTrap.prototype._platform;\n/** @type {?} */\nFocusTrap.prototype._checker;\n/** @type {?} */\nFocusTrap.prototype._ngZone;\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nexport class FocusTrapFactory {\n/**\n * @param {?} _checker\n * @param {?} _platform\n * @param {?} _ngZone\n */\nconstructor(\nprivate _checker: InteractivityChecker,\nprivate _platform: Platform,\nprivate _ngZone: NgZone) { }\n/**\n * @param {?} element\n * @param {?=} deferAnchors\n * @return {?}\n */\ncreate(element: HTMLElement, deferAnchors = false): FocusTrap {\n    return new FocusTrap(element, this._platform, this._checker, this._ngZone, deferAnchors);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InteractivityChecker, },\n{type: Platform, },\n{type: NgZone, },\n];\n}\n\nfunction FocusTrapFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapFactory.ctorParameters;\n/** @type {?} */\nFocusTrapFactory.prototype._checker;\n/** @type {?} */\nFocusTrapFactory.prototype._platform;\n/** @type {?} */\nFocusTrapFactory.prototype._ngZone;\n}\n\n/**\n * Directive for trapping focus within a region.\n * @deprecated\n */\nexport class FocusTrapDeprecatedDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget disabled(): boolean { return !this.focusTrap.enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {\n    this.focusTrap.enabled = !coerceBooleanProperty(val);\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-focus-trap',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction FocusTrapDeprecatedDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDeprecatedDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDeprecatedDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDeprecatedDirective.propDecorators;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._focusTrapFactory;\n}\n\n/**\n * Directive for trapping focus within a region.\n */\nexport class FocusTrapDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this.focusTrap.enabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'enabled': [{ type: Input, args: ['cdkTrapFocus', ] },],\n};\n}\n\nfunction FocusTrapDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDirective.propDecorators;\n/** @type {?} */\nFocusTrapDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDirective.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Platform} from '../platform/platform';\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nexport class InteractivityChecker {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) {}\n/**\n * Gets whether an element is disabled.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is disabled.\n */\nisDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n/**\n * Gets whether an element is visible for the purposes of interactivity.\n * \n * This will capture states like `display: none` and `visibility: hidden`, but not things like\n * being clipped by an `overflow: hidden` parent or being outside the viewport.\n * \n * @param {?} element\n * @return {?} Whether the element is visible.\n */\nisVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n/**\n * Gets whether an element can be reached via Tab key.\n * Assumes that the element has already been checked with isFocusable.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is tabbable.\n */\nisTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    let /** @type {?} */ frameElement = /** @type {?} */(( getWindow(element).frameElement as HTMLElement));\n\n    if (frameElement) {\n\n      let /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    let /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n/**\n * Gets whether an element can be focused by the user.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is focusable.\n */\nisFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction InteractivityChecker_tsickle_Closure_declarations() {\n/** @type {?} */\nInteractivityChecker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInteractivityChecker.ctorParameters;\n/** @type {?} */\nInteractivityChecker.prototype._platform;\n}\n\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element: Node) {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element: HTMLElement): number {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex'), 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  let /** @type {?} */ inputType = nodeName === 'input' && ( /** @type {?} */((element as HTMLInputElement))).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node: HTMLElement): Window {\n  return node.ownerDocument.defaultView || window;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    NgModule,\n    Directive,\n    EventEmitter,\n    TemplateRef,\n    ViewContainerRef,\n    Optional,\n    Input,\n    OnDestroy,\n    Output,\n    ElementRef,\n    Renderer2,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport {Overlay, OVERLAY_PROVIDERS} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {TemplatePortal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {\n    ConnectionPositionPair,\n    ConnectedOverlayPositionChange\n} from './position/connected-position';\nimport {PortalModule} from '../portal/portal-directives';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {Dir, LayoutDirection} from '../rtl/dir';\nimport {Scrollable} from './scroll/scrollable';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {ESCAPE} from '../keyboard/keycodes';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatchModule} from './scroll/index';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nlet defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy, OnChanges {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\nprivate _escapeListener: Function;\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number {\n    return this._offsetX;\n  }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() {\n    return this._offsetY;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy = this._overlay.scrollStrategies.reposition();\n/**\n * Whether the overlay is open.\n */\nopen: boolean = false;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() {\n    return this._hasBackdrop;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _renderer\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _renderer: Renderer2,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _dir: Dir) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    let /** @type {?} */ overlayConfig = new OverlayState();\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    overlayConfig.hasBackdrop = this.hasBackdrop;\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    this._position = /** @type {?} */(( this._createPositionStrategy() as ConnectedPositionStrategy));\n    overlayConfig.positionStrategy = this._position;\n    overlayConfig.scrollStrategy = this.scrollStrategy;\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n    this._initEscapeListener();\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n      this._backdropSubscription = null;\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Sets the event listener that closes the overlay when pressing Escape.\n * @return {?}\n */\nprivate _initEscapeListener() {\n    this._escapeListener = this._renderer.listen('document', 'keydown', (event: KeyboardEvent) => {\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Renderer2, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input },],\n'positions': [{ type: Input },],\n'offsetX': [{ type: Input },],\n'offsetY': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'backdropClass': [{ type: Input },],\n'scrollStrategy': [{ type: Input },],\n'open': [{ type: Input },],\n'hasBackdrop': [{ type: Input },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/** @type {?} */\nConnectedOverlayDirective.prototype._escapeListener;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.scrollStrategy;\n/**\n * Whether the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.open;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._renderer;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\nexport class OverlayModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule, ScrollDispatchModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, ScrollDispatchModule],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin],\n  providers: [OVERLAY_PROVIDERS],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n  Provider,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OverlayContainer, OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {ScrollStrategy, ScrollStrategyOptions} from './scroll/index';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} scrollStrategies\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(public scrollStrategies: ScrollStrategyOptions,\nprivate _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) { }\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    return this._createOverlayRef(this._createPaneElement(), state);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n/**\n * Creates an OverlayRef for an overlay in the given DOM element.\n * @param {?} pane DOM element for the overlay\n * @param {?} state\n * @return {?}\n */\nprivate _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    let /** @type {?} */ scrollStrategy = state.scrollStrategy || this.scrollStrategies.noop();\n    let /** @type {?} */ portalHost = this._createPortalHost(pane);\n    return new OverlayRef(portalHost, pane, state, scrollStrategy, this._ngZone);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollStrategyOptions, },\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype.scrollStrategies;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n/**\n * Providers for Overlay and its related injectables.\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n\nexport const /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewportRuler} from './viewport-ruler';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {ElementRef, Injectable} from '@angular/core';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement;\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?} value New top offset.\n * @return {?}\n */\ntop(value: string): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New left offset.\n * @return {?}\n */\nleft(value: string): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?} value New bottom offset.\n * @return {?}\n */\nbottom(value: string): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New right offset.\n * @return {?}\n */\nright(value: string): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?} value New width for the overlay\n * @return {?}\n */\nwidth(value: string): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?} value New height for the overlay\n * @return {?}\n */\nheight(value: string): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS.\n * @return {?} Resolved when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    if (!this._wrapper) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n\n    return Promise.resolve(null);\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from './viewport-ruler';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange, ScrollableViewProperties\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '../scroll/scrollable';\n\n/**\n * Container to hold the bounding positions of a particular element with respect to the viewport,\n * where top and bottom are the y-axis coordinates of the bounding rectangle and left and right are\n * the x-axis coordinates.\n */\ntype ElementBoundingPositions = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\nprivate _dir = 'ltr';\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n */\nprivate _offsetX: number = 0;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n */\nprivate _offsetY: number = 0;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n */\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n */\n_preferredPositions: ConnectionPositionPair[] = [];\n/**\n * The origin element against which the overlay will be positioned.\n */\nprivate _origin: HTMLElement;\n/**\n * The overlay pane element.\n */\nprivate _pane: HTMLElement;\n/**\n * The last position to have been calculated as the best fit position.\n */\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} _connectedTo\n * @param {?} _originPos\n * @param {?} _overlayPos\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _connectedTo: ElementRef,\nprivate _originPos: OriginConnectionPosition,\nprivate _overlayPos: OverlayConnectionPosition,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(_originPos, _overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * To be used to for any cleanup after the element gets destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS styles.\n * @return {?} Resolves when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    // Cache the overlay pane element in case re-calculating position is necessary\n    this._pane = element;\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint = null;\n    let /** @type {?} */ fallbackPosition: ConnectionPositionPair = null;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayRect, overlayPoint, pos);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        // Notify that the position has been changed along with its change properties.\n        const /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n        const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n        this._onPositionChange.next(positionChange);\n\n        return Promise.resolve(null);\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n        fallbackPosition = pos;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, overlayRect, fallbackPoint, fallbackPosition);\n\n    return Promise.resolve(null);\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate getScrollableViewProperties(overlay: HTMLElement): ScrollableViewProperties {\n    const /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n    const /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n    const /** @type {?} */ scrollContainerBounds = this.scrollables.map((scrollable: Scrollable) => {\n      return this._getElementBounds(scrollable.getElementRef().nativeElement);\n    });\n\n    return {\n      isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n      isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Whether the element is completely out of the view of any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementOutsideView(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n      const /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n      const /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n      const /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n\n      return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n  }\n/**\n * Whether the element is clipped by any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementClipped(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n      const /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n      const /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n      const /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n\n      return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayRect\n * @param {?} overlayPoint\n * @param {?} pos\n * @return {?}\n */\nprivate _setElementPosition(\n      element: HTMLElement,\n      overlayRect: ClientRect,\n      overlayPoint: Point,\n      pos: ConnectionPositionPair) {\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear above\n    // or below the origin and the direction in which the element will expand.\n    let /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';\n\n    // When using `bottom`, we adjust the y position such that it is the distance\n    // from the bottom of the viewport rather than the top.\n    let /** @type {?} */ y = verticalStyleProperty === 'top' ?\n        overlayPoint.y :\n        document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let /** @type {?} */ horizontalStyleProperty: string;\n    if (this._dir === 'rtl') {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    let /** @type {?} */ x = horizontalStyleProperty === 'left' ?\n      overlayPoint.x :\n      document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);\n\n\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    ['top', 'bottom', 'left', 'right'].forEach(p => element.style[p] = null);\n\n    element.style[verticalStyleProperty] = `${y}px`;\n    element.style[horizontalStyleProperty] = `${x}px`;\n  }\n/**\n * Returns the bounding positions of the provided element with respect to the viewport.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementBounds(element: HTMLElement): ElementBoundingPositions {\n    const /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n    return {\n      top: boundingClientRect.top,\n      right: boundingClientRect.left + boundingClientRect.width,\n      bottom: boundingClientRect.top + boundingClientRect.height,\n      left: boundingClientRect.left\n    };\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._originPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._overlayPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea?: number;\n  fitsInViewport?: boolean;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollableViewProperties {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollableViewProperties_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollableViewProperties) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollableViewProperties, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement = null;\nprivate _backdropClick: Subject<any> = new Subject();\nprivate _attachments = new Subject<void>();\nprivate _detachments = new Subject<void>();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _scrollStrategy\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _scrollStrategy: ScrollStrategy,\nprivate _ngZone: NgZone) {\n\n    _scrollStrategy.attach(this);\n  }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n    this._scrollStrategy.enable();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._state.panelClass) {\n      this._pane.classList.add(this._state.panelClass);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    this._scrollStrategy.disable();\n\n    let /** @type {?} */ detachmentResult = this._portalHost.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    return detachmentResult;\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n      this._scrollStrategy = null;\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._detachments.next();\n    this._detachments.complete();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been attached.\n * @return {?}\n */\nattachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been detached.\n * @return {?}\n */\ndetachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', this._state.direction);\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n    this._backdropElement.classList.add(this._state.backdropClass);\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement.insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) {\n      this._pane.parentNode.appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n      backdropToDetach.classList.remove(this._state.backdropClass);\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._attachments;\n/** @type {?} */\nOverlayRef.prototype._detachments;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._scrollStrategy;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n    // To move the view to the specified host element. We just re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return new Map<string, any>();\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\n    super.dispose();\n    if (this._hostDomElement.parentNode != null) {\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n    }\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {LayoutDirection} from '../rtl/dir';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nexport class OverlayState {\n/**\n * Strategy with which to position the overlay.\n */\npositionStrategy: PositionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n */\npanelClass: string = '';\n/**\n * Whether the overlay has a backdrop.\n */\nhasBackdrop: boolean = false;\n/**\n * Custom class to add to the backdrop\n */\nbackdropClass: string = 'cdk-overlay-dark-backdrop';\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nheight: number | string;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminWidth: number | string;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminHeight: number | string;\n/**\n * The direction of the text in the overlay panel.\n */\ndirection: LayoutDirection = 'ltr';\n\n  // TODO(jelbourn): configuration still to add\n  // - focus trap\n  // - disable pointer events\n  // - z-index\n}\n\nfunction OverlayState_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayState.prototype.positionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nOverlayState.prototype.scrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n * @type {?}\n */\nOverlayState.prototype.panelClass;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayState.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayState.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayState.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    NgModule,\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    OnDestroy,\n    Input,\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n * \n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-portal], [cdkPortal], [portal]',\n  exportAs: 'cdkPortal',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n * \n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\n/**\n * The attached portal.\n */\nprivate _portal: Portal<any>;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> {\n    return this._portal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any>) {\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._portal = portal;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.dispose();\n    this._portal = null;\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n * \n * @template T\n * @param {?} portal Portal to be attached to the portal host.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let /** @type {?} */ componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._portal = portal;\n\n    return ref;\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._portal = portal;\n\n    // TODO(jelbourn): return locals from view\n    return new Map<string, any>();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkPortalHost], [portalHost]',\n  inputs: ['portal: cdkPortalHost']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    Injector\n} from '@angular/core';\nimport {\n    throwNullPortalHostError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalHostAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\nimport {ComponentType} from '../overlay/generic-component-type';\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\n    if (host == null) {\n      throwNullPortalHostError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return /** @type {?} */(( <T> host.attach(this)));\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\n    let /** @type {?} */ host = this._attachedHost;\n    if (host == null) {\n      throwNoPortalAttachedError();\n    }\n\n    this._attachedHost = null;\n    return host.detach();\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost) {\n    this._attachedHost = host;\n  }\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n */\ninjector: Injector;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\n      component: ComponentType<T>,\n      viewContainerRef: ViewContainerRef = null,\n      injector: Injector = null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal extends Portal<Map<string, any>> {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n */\ntemplateRef: TemplateRef<any>;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n */\nlocals: Map<string, any> = new Map<string, any>();\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n/**\n * @param {?} host\n * @param {?=} locals\n * @return {?}\n */\nattach(host: PortalHost, locals?: Map<string, any>): Map<string, any> {\n    this.locals = locals == null ? new Map<string, any>() : locals;\n    return super.attach(host);\n  }\n/**\n * @return {?}\n */\ndetach(): void {\n    this.locals = new Map<string, any>();\n    return super.detach();\n  }\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n * @type {?}\n */\nTemplatePortal.prototype.locals;\n}\n\n\n\n/**\n * A `PortalHost` is an space that can contain a single `Portal`.\n */\nexport interface PortalHost {\n  attach(portal: Portal<any>): any;\n\n  detach(): any;\n\n  dispose(): void;\n\n  hasAttached(): boolean;\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal: Portal<any>;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn: () => void;\n/**\n * Whether this host has already been permanently disposed.\n */\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalHostAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal) {}\n/**\n * @return {?}\n */\ndetach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n/**\n * @return {?}\n */\ndispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\n","\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalHostAlreadyDisposedError() {\n  throw Error('This PortalHost has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalHost accepts either' +\n                  'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalHostError() {\n  throw Error('Attempting to attach a portal to a null PortalHost');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-privatew\n * @return {?}\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n */\nmultiple: boolean = false;\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} group\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\npublic readonly group: MdOptgroup,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return this._getHostElement().textContent.trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    this._active = true;\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    this._active = false;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @type {?}\n */\nMdOption.prototype.multiple;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype.group;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, ContentChildren, QueryList, Input} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Due to a bug in the ChromeDriver, Angular keyboard events are not triggered by `sendKeys`\n// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,\n// we are temporarily using a single (keydown) handler.\n// See: https://github.com/angular/angular/issues/9419\n\nexport const /** @type {?} */ UP_ARROW = 38;\nexport const /** @type {?} */ DOWN_ARROW = 40;\nexport const /** @type {?} */ RIGHT_ARROW = 39;\nexport const /** @type {?} */ LEFT_ARROW = 37;\n\nexport const /** @type {?} */ PAGE_UP = 33;\nexport const /** @type {?} */ PAGE_DOWN = 34;\n\nexport const /** @type {?} */ HOME = 36;\nexport const /** @type {?} */ END = 35;\n\nexport const /** @type {?} */ ENTER = 13;\nexport const /** @type {?} */ SPACE = 32;\nexport const /** @type {?} */ TAB = 9;\n\nexport const /** @type {?} */ ESCAPE = 27;\nexport const /** @type {?} */ BACKSPACE = 8;\nexport const /** @type {?} */ DELETE = 46;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdSelectionModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckboxBase,_MdPseudoCheckboxBase,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '../../common-behaviors/color';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\nexport class MdPseudoCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdPseudoCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdPseudoCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdPseudoCheckboxBase = mixinColor(MdPseudoCheckboxBase, 'accent');\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox extends _MdPseudoCheckboxBase implements CanColor {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, renderer: Renderer2) {\n    super(renderer, elementRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  inputs: ['color'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: string;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | null;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette = null;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdRipple} from './ripple';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {VIEWPORT_RULER_PROVIDER} from '../overlay/position/viewport-ruler';\nimport {ScrollDispatchModule} from '../overlay/scroll/index';\nimport {PlatformModule} from '../platform/index';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nimport {Scrollable} from './scrollable';\nimport {PlatformModule} from '../../platform/index';\nimport {ScrollStrategyOptions} from './scroll-strategy-options';\n\nexport {Scrollable} from './scrollable';\nexport {ScrollDispatcher} from './scroll-dispatcher';\n\n// Export pre-defined scroll strategies and interface to build custom ones.\nexport {ScrollStrategy} from './scroll-strategy';\nexport {ScrollStrategyOptions} from './scroll-strategy-options';\nexport {RepositionScrollStrategy} from './reposition-scroll-strategy';\nexport {CloseScrollStrategy} from './close-scroll-strategy';\nexport {NoopScrollStrategy} from './noop-scroll-strategy';\nexport {BlockScrollStrategy} from './block-scroll-strategy';\nexport class ScrollDispatchModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  exports: [Scrollable],\n  declarations: [Scrollable],\n  providers: [SCROLL_DISPATCHER_PROVIDER, ScrollStrategyOptions],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollDispatchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatchModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ScrollStrategy} from './scroll-strategy';\nimport {CloseScrollStrategy} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {ViewportRuler} from '../position/viewport-ruler';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n/**\n * Options for how an overlay will handle scrolling.\n * \n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nexport class ScrollStrategyOptions {\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewportRuler: ViewportRuler) { }\n/**\n * Do nothing on scroll.\n */\nnoop = () => new NoopScrollStrategy();\n/**\n * Close the overlay as soon as the user scrolls.\n */\nclose = () => new CloseScrollStrategy(this._scrollDispatcher);\n/**\n * Block scrolling.\n */\nblock = () => new BlockScrollStrategy(this._viewportRuler);\n/**\n * Update the overlay's position on scroll.\n * @param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n */\nreposition = (config?: RepositionScrollStrategyConfig) =>\n      new RepositionScrollStrategy(this._scrollDispatcher, config)\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n{type: ViewportRuler, },\n];\n}\n\nfunction ScrollStrategyOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollStrategyOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollStrategyOptions.ctorParameters;\n/**\n * Do nothing on scroll.\n * @type {?}\n */\nScrollStrategyOptions.prototype.noop;\n/**\n * Close the overlay as soon as the user scrolls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.close;\n/**\n * Block scrolling.\n * @type {?}\n */\nScrollStrategyOptions.prototype.block;\n/**\n * Update the overlay's position on scroll.\n * \\@param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.reposition;\n/** @type {?} */\nScrollStrategyOptions.prototype._scrollDispatcher;\n/** @type {?} */\nScrollStrategyOptions.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  scrollThrottle?: number;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _config\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _config: RepositionScrollStrategyConfig) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      let /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction RepositionScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nRepositionScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollDispatcher;\n/** @type {?} */\nRepositionScrollStrategy.prototype._config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '../position/viewport-ruler';\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\nprivate _previousHTMLStyles = { top: null, left: null };\nprivate _previousScrollPosition: { top: number, left: number };\nprivate _isEnabled = false;\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * @return {?}\n */\nattach() { }\n/**\n * @return {?}\n */\nenable() {\n    if (this._canBeEnabled()) {\n      const /** @type {?} */ root = document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left;\n      this._previousHTMLStyles.top = root.style.top;\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = `${-this._previousScrollPosition.left}px`;\n      root.style.top = `${-this._previousScrollPosition.top}px`;\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._isEnabled) {\n      this._isEnabled = false;\n      document.documentElement.style.left = this._previousHTMLStyles.left;\n      document.documentElement.style.top = this._previousHTMLStyles.top;\n      document.documentElement.classList.remove('cdk-global-scrollblock');\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const /** @type {?} */ body = document.body;\n    const /** @type {?} */ viewport = this._viewportRuler.getViewportRect();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\nfunction BlockScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nBlockScrollStrategy.prototype._previousHTMLStyles;\n/** @type {?} */\nBlockScrollStrategy.prototype._previousScrollPosition;\n/** @type {?} */\nBlockScrollStrategy.prototype._isEnabled;\n/** @type {?} */\nBlockScrollStrategy.prototype._viewportRuler;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\n/**\n * Scroll strategy that doesn't do anything.\n */\nexport class NoopScrollStrategy implements ScrollStrategy {\n/**\n * @return {?}\n */\nenable() { }\n/**\n * @return {?}\n */\ndisable() { }\n/**\n * @return {?}\n */\nattach() { }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(null, () => {\n        if (this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this.disable();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction CloseScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nCloseScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollDispatcher;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay\n * to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  enable: () => void;\n  disable: () => void;\n  attach: (overlayRef: OverlayRef) => void;\n}\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nexport function getMdScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer2} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport'rxjs/add/observable/fromEvent';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable], [cdkScrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {Platform} from '../platform/platform';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\nprivate _updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from '../scroll/scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(null, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                  document.documentElement.scrollTop || 0;\n\n    const /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry?() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n\nexport const /** @type {?} */ VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '../../platform/index';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/auditTime';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    if (this.scrollableReferences.has(scrollable)) {\n      this.scrollableReferences.get(scrollable).unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n    if (!this._platform.isBrowser) {\n      return Subscription.EMPTY;\n    }\n\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      this._scrolled.asObservable().auditTime(auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return Observable.merge(\n          Observable.fromEvent(window.document, 'scroll'),\n          Observable.fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((_subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n\nexport const /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {Platform} from './platform';\nexport class PlatformModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [Platform]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PlatformModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformModule.ctorParameters;\n}\n\n\n\nexport {Platform} from './platform';\nexport {getSupportedInputTypes} from './features';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Cached result Set of input types support by the current browser.\n */\nlet supportedInputTypes: Set<string>;\n/**\n * Types of <input> that *might* be supported.\n */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n/**\n * @return {?} The input types supported by this browser.\n */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let /** @type {?} */ featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n\n  return supportedInputTypes;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst /** @type {?} */ hasV8BreakIterator = (typeof(Intl) !== 'undefined' && ( /** @type {?} */((Intl as any))).v8BreakIterator);\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n * \\@docs-private\n */\nexport class Platform {\n  isBrowser: boolean = typeof document === 'object' && !!document;\n/**\n * Layout Engines\n */\nEDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n  TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  BLINK = this.isBrowser &&\n      (!!(( /** @type {?} */((window as any))).chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT);\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  WEBKIT = this.isBrowser &&\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n/**\n * Browsers and Platform Types\n */\nIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream;\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Platform_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatform.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatform.ctorParameters;\n/** @type {?} */\nPlatform.prototype.isBrowser;\n/**\n * Layout Engines\n * @type {?}\n */\nPlatform.prototype.EDGE;\n/** @type {?} */\nPlatform.prototype.TRIDENT;\n/** @type {?} */\nPlatform.prototype.BLINK;\n/** @type {?} */\nPlatform.prototype.WEBKIT;\n/**\n * Browsers and Platform Types\n * @type {?}\n */\nPlatform.prototype.IOS;\n/** @type {?} */\nPlatform.prototype.FIREFOX;\n/** @type {?} */\nPlatform.prototype.ANDROID;\n/** @type {?} */\nPlatform.prototype.SAFARI;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '../platform/platform';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => this._triggerElement.removeEventListener(type, fn));\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  NgModule,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport'rxjs/add/operator/debounceTime';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nexport class MdMutationObserverFactory {\n/**\n * @param {?} callback\n * @return {?}\n */\ncreate(callback): MutationObserver {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMutationObserverFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMutationObserverFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMutationObserverFactory.ctorParameters;\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<MutationRecord[]>();\n/**\n * Used for debouncing the emitted values to the observeContent event.\n */\nprivate _debouncer = new Subject<MutationRecord[]>();\n/**\n * Debounce interval for emitting the changes.\n */\ndebounce: number;\n/**\n * @param {?} _mutationObserverFactory\n * @param {?} _elementRef\n */\nconstructor(\nprivate _mutationObserverFactory: MdMutationObserverFactory,\nprivate _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this.debounce > 0) {\n      this._debouncer\n        .debounceTime(this.debounce)\n        .subscribe(mutations => this.event.emit(mutations));\n    } else {\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\n    }\n\n    this._observer = this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\n      this._debouncer.next(mutations);\n    });\n\n    if (this._observer) {\n      this._observer.observe(this._elementRef.nativeElement, {\n        characterData: true,\n        childList: true,\n        subtree: true\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n      this._debouncer.complete();\n      this._debouncer = this._observer = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdMutationObserverFactory, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n'debounce': [{ type: Input },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/**\n * Used for debouncing the emitted values to the observeContent event.\n * @type {?}\n */\nObserveContent.prototype._debouncer;\n/**\n * Debounce interval for emitting the changes.\n * @type {?}\n */\nObserveContent.prototype.debounce;\n/** @type {?} */\nObserveContent.prototype._mutationObserverFactory;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n}\n\nexport class ObserveContentModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent],\n  providers: [MdMutationObserverFactory]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserveContentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  HostBinding,\n  Output,\n  Input,\n  EventEmitter\n} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n/**\n * Directive to listen for changes of direction of part of the DOM.\n * \n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\nexport class Dir {\n/**\n * Layout direction of the element.\n */\n_dir: LayoutDirection = 'ltr';\n/**\n * Event emitted when the direction changes.\n */\ndirChange = new EventEmitter<void>();\n/**\n * \\@docs-private\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset dir(v: LayoutDirection) {\n    let /** @type {?} */ old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit();\n    }\n  }\n/**\n * Current layout direction of the element.\n * @return {?}\n */\nget value(): LayoutDirection { return this.dir; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: LayoutDirection) { this.dir = v; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_dir': [{ type: Input, args: ['dir', ] },],\n'dirChange': [{ type: Output },],\n'dir': [{ type: HostBinding, args: ['attr.dir', ] },],\n};\n}\n\nfunction Dir_tsickle_Closure_declarations() {\n/** @type {?} */\nDir.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDir.ctorParameters;\n/** @type {?} */\nDir.propDecorators;\n/**\n * Layout direction of the element.\n * @type {?}\n */\nDir.prototype._dir;\n/**\n * Event emitted when the direction changes.\n * @type {?}\n */\nDir.prototype.dirChange;\n}\n\nexport class RtlModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [Dir],\n  declarations: [Dir]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RtlModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRtlModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRtlModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [CompatibilityModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matLine],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-group,\n  mat-toolbar`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdLine],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-group,\n  md-toolbar`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["Input","ChangeDetectionStrategy","ViewEncapsulation","Component","Optional","Inject","Renderer2","ElementRef","Directive","Validators","forwardRef","NG_VALIDATORS","NG_VALUE_ACCESSOR","Output","ViewContainerRef","NgZone","EventEmitter","Injectable","DOCUMENT","Host","Observable","ContentChildren","ViewChild","TemplateRef","ChangeDetectorRef","tslib_1.__extends","SkipSelf","Location","Injector","Subject","state","style","trigger","CommonModule","animate","transition","NgModule","ContentChild","HostBinding","Attribute","SecurityContext","HAMMER_GESTURE_CONFIG","NgControl","Self","FormsModule","HammerGestureConfig","ApplicationRef","ComponentFactoryResolver","InjectionToken"],"mappings":"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}