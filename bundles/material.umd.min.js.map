{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/toolbar/index.ts","../../src/lib/version.ts","../../src/lib/core/line/line.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/core/index.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/stepper/index.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/index.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/index.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/sort/index.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/step-header.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/sidenav/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tooltip/index.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/paginator/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-bar/index.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/radio/index.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/menu/index.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select.ts","../../src/lib/select/select-module.ts","../../src/lib/select/index.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/index.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/grid-list/index.ts","../../src/lib/input/input.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-module.ts","../../src/lib/input/index.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/datepicker/index.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/accordion-item.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/expansion/index.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/dialog/index.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/icon/index.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/checkbox/index.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/chips/index.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/button-toggle/index.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/card/index.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/portal/portal-injector.ts","../../src/lib/core/style/index.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/form-field/index.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/autocomplete/index.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/input/input-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from '@angular/cdk/rxjs';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MD_RIPPLE_GLOBAL_OPTIONS,\n  MdRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleGlobalOptions,\n  ThemePalette,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subject} from 'rxjs/Subject';\nimport {MdInkBar} from '../ink-bar';\n/**\n * \\@docs-private\n */\nexport class MdTabNavBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdTabNavBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNavBase.prototype._renderer;\n/** @type {?} */\nMdTabNavBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdTabNavMixinBase = mixinDisableRipple(mixinColor(MdTabNavBase, 'primary'));\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNav extends _MdTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * Query list of all tab links of the tab navigation.\n */\n_tabLinks: QueryList<MdTabLink>;\n/**\n * Background color of the tab nav.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Whether ripples should be disabled for all links or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          auditTime.call(fromEvent(window, 'resize'), 10) :\n          observableOf(null);\n\n      return takeUntil.call(merge(dirChange, resize), this._onDestroy).subscribe(() => {\n        this._alignInkBar();\n      });\n    });\n\n    this._setLinkDisableRipple();\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\n_alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n/**\n * Sets the `disableRipple` property on each link of the navigation bar.\n * @return {?}\n */\nprivate _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabLinks': [{ type: ContentChildren, args: [forwardRef(() => MdTabLink), {descendants: true}, ] },],\n'backgroundColor': [{ type: Input },],\n};\n}\n\nfunction MdTabNav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNav.ctorParameters;\n/** @type {?} */\nMdTabNav.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nMdTabNav.prototype._onDestroy;\n/** @type {?} */\nMdTabNav.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNav.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNav.prototype._inkBar;\n/**\n * Query list of all tab links of the tab navigation.\n * @type {?}\n */\nMdTabNav.prototype._tabLinks;\n/** @type {?} */\nMdTabNav.prototype._backgroundColor;\n/** @type {?} */\nMdTabNav.prototype._disableRipple;\n/** @type {?} */\nMdTabNav.prototype._dir;\n/** @type {?} */\nMdTabNav.prototype._ngZone;\n/** @type {?} */\nMdTabNav.prototype._changeDetectorRef;\n}\n\nexport class MdTabLinkBase {}\nexport const /** @type {?} */ _MdTabLinkMixinBase = mixinDisabled(MdTabLinkBase);\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink extends _MdTabLinkMixinBase implements OnDestroy, CanDisable {\n/**\n * Whether the tab link is active or not.\n */\nprivate _isActive: boolean = false;\n/**\n * Whether the ripples for this tab should be disabled or not.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the instance of the ripple for the tab link.\n */\nprivate _tabLinkRipple: MdRipple;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * Whether ripples should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._tabLinkRipple.disabled = this.disableRipple;\n    this._tabLinkRipple._updateRippleRenderer();\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(private _mdTabNavBar: MdTabNav,\nprivate _elementRef: ElementRef,\n              ngZone: NgZone,\n              ruler: ViewportRuler,\n              platform: Platform,\n                globalOptions: RippleGlobalOptions) {\n    super();\n\n    // Manually create a ripple instance that uses the tab link element as trigger element.\n    // Notice that the lifecycle hooks for the ripple config won't be called anymore.\n    this._tabLinkRipple = new MdRipple(_elementRef, ngZone, ruler, platform, globalOptions);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\n    // called automatically since its instance is not created by Angular.\n    this._tabLinkRipple.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNav, },\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/**\n * Whether the tab link is active or not.\n * @type {?}\n */\nMdTabLink.prototype._isActive;\n/**\n * Whether the ripples for this tab should be disabled or not.\n * @type {?}\n */\nMdTabLink.prototype._disableRipple;\n/**\n * Reference to the instance of the ripple for the tab link.\n * @type {?}\n */\nMdTabLink.prototype._tabLinkRipple;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule, MdRippleModule} from '@angular/material/core';\nimport {MdInkBar} from './ink-bar';\nimport {MdTab} from './tab';\nimport {MdTabBody} from './tab-body';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabHeader} from './tab-header';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabLink, MdTabNav} from './tab-nav-bar/tab-nav-bar';\nexport class MdTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdCommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdCommonModule,\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNav,\n    MdTabLink,\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNav,\n    MdTabLink,\n    MdTabBody,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {'class': 'mat-toolbar-row'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar,MatToolbar,MatToolbarBase,MatToolbarModule,MatToolbarRow} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * Current version of Angular Material.\n */\nexport const VERSION = new Version('2.0.0-beta.11-3ddf65b');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {A11yModule,AnimationCurves,AnimationDurations,Directionality,DIRECTIONALITY_PROVIDER,DIR_DOCUMENT,Direction,Dir,BidiModule,MdCommonModule,MATERIAL_SANITY_CHECKS,CanDisable,mixinDisabled,CanColor,mixinColor,ThemePalette,CanDisableRipple,mixinDisableRipple,HasTabIndex,mixinTabIndex,MATERIAL_COMPATIBILITY_MODE,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,CompatibilityModule,NoConflictStyleCompatibilityMode,UniqueSelectionDispatcherListener,UniqueSelectionDispatcher,UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY,UNIQUE_SELECTION_DISPATCHER_PROVIDER,NativeDateModule,MdNativeDateModule,MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS,MD_ERROR_GLOBAL_OPTIONS,ErrorStateMatcher,ErrorOptions,defaultErrorStateMatcher,showOnDirtyErrorStateMatcher,HammerInput,HammerStatic,Recognizer,RecognizerStatic,HammerInstance,HammerManager,GestureConfig,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,A,Z,MdLine,MdLineSetter,MdLineModule,MdOptionModule,MdOptionSelectionChange,MdOption,MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup,OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayConfig,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,ComponentType,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,VIEWPORT_RULER_PROVIDER,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollingVisibility,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,MD_PLACEHOLDER_GLOBAL_OPTIONS,FloatPlaceholderType,PlaceholderOptions,PlatformModule,Platform,getSupportedInputTypes,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,DomPortalHost,TemplatePortalDirective,PortalHostDirective,PortalModule,PortalInjector,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,RxChain,StrictRxChain,FinallyBrand,CatchBrand,DoBrand,MapBrand,FilterBrand,ShareBrand,FirstBrand,SwitchMapBrand,StartWithBrand,DebounceTimeBrand,AuditTimeBrand,TakeUntilBrand,finallyOperatorType,catchOperatorType,doOperatorType,mapOperatorType,filterOperatorType,shareOperatorType,firstOperatorType,switchMapOperatorType,startWithOperatorType,debounceTimeOperatorType,auditTimeOperatorType,takeUntilOperatorType,finallyOperator,catchOperator,doOperator,map,filter,share,first,switchMap,startWith,debounceTime,auditTime,takeUntil,MdPseudoCheckboxModule,MdPseudoCheckboxState,MdPseudoCheckbox,StyleModule,CdkMonitorFocus,FocusMonitor,FOCUS_MONITOR_PROVIDER,FocusOrigin,applyCssTransform,extendObject,MAT_DATE_FORMATS,MAT_RIPPLE_GLOBAL_OPTIONS,MAT_NATIVE_DATE_FORMATS,MAT_PLACEHOLDER_GLOBAL_OPTIONS,MAT_ERROR_GLOBAL_OPTIONS,MatCommonModule,MatDateFormats,MatLine,MatLineModule,MatLineSetter,MatOptgroup,MatOptgroupBase,MatOption,MatOptionModule,MatOptionSelectionChange,MatNativeDateModule,MatPseudoCheckbox,MatPseudoCheckboxModule,MatPseudoCheckboxState,MatRipple,MatRippleModule,JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC} from './public_api';\n\nexport {RippleRenderer as ɵa} from './ripple/ripple-renderer';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Optional,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {\n  defaultErrorStateMatcher,\n  ErrorOptions,\n  ErrorStateMatcher,\n  MD_ERROR_GLOBAL_OPTIONS,\n} from '@angular/material/core';\nimport {MdStepHeader} from './step-header';\nimport {MdStepLabel} from './step-label';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdStep = CdkStep;\nexport const /** @type {?} */ _MdStepper = CdkStepper;\nexport class MdStep extends _MdStep implements ErrorOptions {\n/**\n * Content for step label given by <ng-template matStepLabel> or <ng-template mdStepLabel>.\n */\nstepLabel: MdStepLabel;\n/**\n * Original ErrorStateMatcher that checks the validity of form control.\n */\nprivate _originalErrorStateMatcher: ErrorStateMatcher;\n/**\n * @param {?} mdStepper\n * @param {?} errorOptions\n */\nconstructor( mdStepper: MdStepper,\n                 errorOptions: ErrorOptions) {\n    super(mdStepper);\n    if (errorOptions && errorOptions.errorStateMatcher) {\n      this._originalErrorStateMatcher = errorOptions.errorStateMatcher;\n    } else {\n      this._originalErrorStateMatcher = defaultErrorStateMatcher;\n    }\n  }\n/**\n * Custom error state matcher that additionally checks for validity of interacted form.\n */\nerrorStateMatcher = (control: FormControl, form: FormGroupDirective | NgForm) => {\n    let originalErrorState = this._originalErrorStateMatcher(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    let customErrorState =  control.invalid && this.interacted;\n\n    return originalErrorState || customErrorState;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-step, mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: MD_ERROR_GLOBAL_OPTIONS, useExisting: MdStep}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdStepper, decorators: [{ type: Inject, args: [forwardRef(() => MdStepper), ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'stepLabel': [{ type: ContentChild, args: [MdStepLabel, ] },],\n};\n}\n\nfunction MdStep_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStep.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStep.ctorParameters;\n/** @type {?} */\nMdStep.propDecorators;\n/**\n * Content for step label given by <ng-template matStepLabel> or <ng-template mdStepLabel>.\n * @type {?}\n */\nMdStep.prototype.stepLabel;\n/**\n * Original ErrorStateMatcher that checks the validity of form control.\n * @type {?}\n */\nMdStep.prototype._originalErrorStateMatcher;\n/**\n * Custom error state matcher that additionally checks for validity of interacted form.\n * @type {?}\n */\nMdStep.prototype.errorStateMatcher;\n}\n\nexport class MdStepper extends _MdStepper {\n/**\n * The list of step headers of the steps in the stepper.\n */\n_stepHeader: QueryList<ElementRef>;\n/**\n * Steps that the stepper holds.\n */\n_steps: QueryList<MdStep>;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdStepper]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_stepHeader': [{ type: ViewChildren, args: [MdStepHeader, {read: ElementRef}, ] },],\n'_steps': [{ type: ContentChildren, args: [MdStep, ] },],\n};\n}\n\nfunction MdStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepper.ctorParameters;\n/** @type {?} */\nMdStepper.propDecorators;\n/**\n * The list of step headers of the steps in the stepper.\n * @type {?}\n */\nMdStepper.prototype._stepHeader;\n/**\n * Steps that the stepper holds.\n * @type {?}\n */\nMdStepper.prototype._steps;\n}\n\nexport class MdHorizontalStepper extends MdStepper { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-horizontal-stepper, mat-horizontal-stepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n      state('current', style({transform: 'translate3d(0%, 0, 0)', visibility: 'visible'})),\n      state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n      transition('* => *',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ])\n  ],\n  providers: [{provide: MdStepper, useExisting: MdHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHorizontalStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHorizontalStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHorizontalStepper.ctorParameters;\n}\n\nexport class MdVerticalStepper extends MdStepper { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-vertical-stepper, mat-vertical-stepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({height: '0px', visibility: 'hidden'})),\n      state('next', style({height: '0px', visibility: 'hidden'})),\n      state('current', style({height: '*', visibility: 'visible'})),\n      transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ],\n  providers: [{provide: MdStepper, useExisting: MdVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdVerticalStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdVerticalStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdVerticalStepper.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MdStepper} from './stepper';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdStepperNext = CdkStepperNext;\nexport const /** @type {?} */ _MdStepperPrevious = CdkStepperPrevious;\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nexport class MdStepperNext extends _MdStepperNext { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mdStepperNext], button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MdStepper}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdStepperNext_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepperNext.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepperNext.ctorParameters;\n}\n\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nexport class MdStepperPrevious extends _MdStepperPrevious { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mdStepperPrevious], button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MdStepper}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdStepperPrevious_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepperPrevious.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepperPrevious.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MdButtonModule} from '@angular/material/button';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdIconModule} from '@angular/material/icon';\nimport {MdStepHeader} from './step-header';\nimport {MdStepLabel} from './step-label';\nimport {MdHorizontalStepper, MdStep, MdStepper, MdVerticalStepper} from './stepper';\nimport {MdStepperNext, MdStepperPrevious} from './stepper-button';\nexport class MdStepperModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdCommonModule,\n    CommonModule,\n    PortalModule,\n    MdButtonModule,\n    CdkStepperModule,\n    MdIconModule\n  ],\n  exports: [\n    MdCommonModule,\n    MdHorizontalStepper,\n    MdVerticalStepper,\n    MdStep,\n    MdStepLabel,\n    MdStepper,\n    MdStepperNext,\n    MdStepperPrevious,\n    MdStepHeader\n  ],\n  declarations: [MdHorizontalStepper, MdVerticalStepper, MdStep, MdStepLabel, MdStepper,\n    MdStepperNext, MdStepperPrevious, MdStepHeader],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdStepperModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepperModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepperModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdStepperModule,_MdStepLabel,MdStepLabel,_MdStep,_MdStepper,MdStep,MdStepper,MdHorizontalStepper,MdVerticalStepper,_MdStepperNext,_MdStepperPrevious,MdStepperNext,MdStepperPrevious,MdStepHeader,MatStep,MatStepHeader,MatStepLabel,MatStepper,MatHorizontalStepper,MatStepperModule,MatVerticalStepper,MatStepperPrevious,MatStepperNext} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport class MdTable<T> extends _MdTable<T> { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-table, mat-table',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTable_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTable.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, Renderer2} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdCellDef = CdkCellDef;\nexport const /** @type {?} */ _MdHeaderCellDef = CdkHeaderCellDef;\nexport const /** @type {?} */ _MdColumnDef = CdkColumnDef;\nexport const /** @type {?} */ _MdHeaderCell = CdkHeaderCell;\nexport const /** @type {?} */ _MdCell = CdkCell;\n/**\n * Cell definition for the md-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class MdCellDef extends _MdCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdCellDef], [matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MdCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCellDef.ctorParameters;\n}\n\n/**\n * Header cell definition for the md-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class MdHeaderCellDef extends _MdHeaderCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdHeaderCellDef], [matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MdHeaderCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCellDef.ctorParameters;\n}\n\n/**\n * Column definition for the md-table.\n * Defines a set of cells available for a table column.\n */\nexport class MdColumnDef extends _MdColumnDef {\n/**\n * Unique name for this column.\n */\nname: string;\n/**\n * @return {?}\n */\nget _matColumnDefName() { return this.name; }\n/**\n * @param {?} name\n * @return {?}\n */\nset _matColumnDefName(name) { this.name = name; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdColumnDef], [matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MdColumnDef}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['mdColumnDef', ] },],\n'_matColumnDefName': [{ type: Input, args: ['matColumnDef', ] },],\n};\n}\n\nfunction MdColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdColumnDef.ctorParameters;\n/** @type {?} */\nMdColumnDef.propDecorators;\n/**\n * Unique name for this column.\n * @type {?}\n */\nMdColumnDef.prototype.name;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MdHeaderCell extends _MdHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-header-cell, mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MdCell extends _MdCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-cell, mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CdkHeaderRow,\n  CdkRow,\n  CDK_ROW_TEMPLATE,\n  CdkRowDef,\n  CdkHeaderRowDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdHeaderRowDef = CdkHeaderRowDef;\nexport const /** @type {?} */ _MdCdkRowDef = CdkRowDef;\nexport const /** @type {?} */ _MdHeaderRow = CdkHeaderRow;\nexport const /** @type {?} */ _MdRow = CdkRow;\n/**\n * Header row definition for the md-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class MdHeaderRowDef extends _MdHeaderRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MdHeaderRowDef}],\n  inputs: ['columns: mdHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRowDef.ctorParameters;\n}\n\n/**\n * Mat-compatible version of MdHeaderRowDef\n */\nexport class MatHeaderRowDef extends _MdHeaderRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the md-table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class MdRowDef extends _MdCdkRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MdRowDef}],\n  inputs: ['columns: mdRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRowDef.ctorParameters;\n}\n\n/**\n * Mat-compatible version of MdRowDef\n */\nexport class MatRowDef extends _MdCdkRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRowDef.ctorParameters;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdHeaderRow extends _MdHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-header-row, mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdRow extends _MdRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-row, mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MdCell, MdHeaderCell, MdCellDef, MdHeaderCellDef, MdColumnDef} from './cell';\nimport {MdHeaderRow, MdRow, MdHeaderRowDef, MdRowDef, MatHeaderRowDef, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '@angular/material/core';\nexport class MdTableModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CdkTableModule, CommonModule, MdCommonModule],\n  exports: [MdTable, MdCellDef, MdHeaderCellDef, MdColumnDef,\n    MdHeaderRowDef, MdRowDef,\n    MdHeaderCell, MdCell, MdHeaderRow, MdRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MdTable, MdCellDef, MdHeaderCellDef, MdColumnDef,\n    MdHeaderRowDef, MdRowDef,\n    MdHeaderCell, MdCell, MdHeaderRow, MdRow,\n    MatHeaderRowDef, MatRowDef],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdTableModule,_MdCellDef,_MdHeaderCellDef,_MdColumnDef,_MdHeaderCell,_MdCell,MdCellDef,MdHeaderCellDef,MdColumnDef,MdHeaderCell,MdCell,_MdTable,MdTable,_MdHeaderRowDef,_MdCdkRowDef,_MdHeaderRow,_MdRow,MdHeaderRowDef,MatHeaderRowDef,MdRowDef,MatRowDef,MdHeaderRow,MdRow,MatCell,MatCellDef,MatColumnDef,MatHeaderCell,MatHeaderCellDef,MatHeaderRow,MatRow,MatTable,MatTableModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Sets the proper styles to the ink bar element.\n * @param {?} element\n * @return {?}\n */\nprivate _setStyles(element: HTMLElement) {\n    const /** @type {?} */ left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    const /** @type {?} */ width = element ? (element.offsetWidth || 0) + 'px' : '0';\n\n    this._renderer.setStyle(this._elementRef.nativeElement, 'left', left);\n    this._renderer.setStyle(this._elementRef.nativeElement, 'width', width);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '@angular/cdk/portal';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTabLabelBaseClass = TemplatePortalDirective;\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends _MdTabLabelBaseClass {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label], [mdTabLabel], [matTabLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {TemplatePortal} from '@angular/material/core';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {MdTabLabel} from './tab-label';\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MdTabBase {}\nexport const /** @type {?} */ _MdTabMixinBase = mixinDisabled(MdTabBase);\nexport class MdTab extends _MdTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal<any> | null = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal<any> | null { return this._contentPortal; }\n/**\n * Emits whenever the label changes.\n */\n_labelChange = new Subject<void>();\n/**\n * Emits whenevfer the disable changes\n */\n_disableChange = new Subject<void>();\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number | null = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number | null = null;\n/**\n * Whether the tab is currently active.\n */\nisActive = false;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'mdTab, matTab',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * Emits whenever the label changes.\n * @type {?}\n */\nMdTab.prototype._labelChange;\n/**\n * Emits whenevfer the disable changes\n * @type {?}\n */\nMdTab.prototype._disableChange;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/**\n * Whether the tab is currently active.\n * @type {?}\n */\nMdTab.prototype.isActive;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal<any>;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _dir: Directionality) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('void', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n/** @type {?} */\nMdTabBody.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer2,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  AfterViewChecked,\n  AfterContentInit,\n  AfterContentChecked,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdTab} from './tab';\nimport {merge} from 'rxjs/observable/merge';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {CanColor, mixinColor, ThemePalette} from '@angular/material/core';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * \\@docs-private\n */\nexport class MdTabGroupBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdTabGroupBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroupBase.prototype._renderer;\n/** @type {?} */\nMdTabGroupBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdTabGroupMixinBase = mixinColor(mixinDisableRipple(MdTabGroupBase), 'primary');\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup extends _MdTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, AfterViewChecked, OnDestroy, CanColor, CanDisableRipple {\n\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect: number | null = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = 0;\n/**\n * Subscription to tabs being added/removed.\n */\nprivate _tabsSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the tab labels.\n */\nprivate _tabLabelSubscription = Subscription.EMPTY;\n/**\n * Whether the tab group should grow to the size of the active tab.\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\nprivate _dynamicHeight: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number | null) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number | null { return this._selectedIndex; }\nprivate _selectedIndex: number | null = null;\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Background color of the tab group.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n */\nselectedIndexChange: EventEmitter<number> = new EventEmitter();\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(_renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(_renderer, elementRef);\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let /** @type {?} */ indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(indexToSelect));\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\n * on the MdTab component, whereas the data binding is inside the MdTabGroup. In order for the\n * binding to be updated, we need to subscribe to changes in it and trigger change detection\n * manually.\n * @return {?}\n */\nprivate _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'backgroundColor': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Subscription to tabs being added/removed.\n * @type {?}\n */\nMdTabGroup.prototype._tabsSubscription;\n/**\n * Subscription to changes in the tab labels.\n * @type {?}\n */\nMdTabGroup.prototype._tabLabelSubscription;\n/** @type {?} */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/** @type {?} */\nMdTabGroup.prototype._backgroundColor;\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @type {?}\n */\nMdTabGroup.prototype.selectedIndexChange;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MdTabLabelWrapperBase {}\nexport const /** @type {?} */ _MdTabLabelWrapperMixinBase = mixinDisabled(MdTabLabelWrapperBase);\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper extends _MdTabLabelWrapperMixinBase implements CanDisable {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    super();\n  }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdTabLabelWrapper], [matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {auditTime, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * \\@docs-private\n */\nexport class MdTabHeaderBase {}\nexport const /** @type {?} */ _MdTabHeaderMixinBase = mixinDisableRipple(MdTabHeaderBase);\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader extends _MdTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar = Subscription.EMPTY;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    const /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n    const /** @type {?} */ resize = typeof window !== 'undefined' ?\n        auditTime.call(fromEvent(window, 'resize'), 150) :\n        observableOf(null);\n\n    this._realignInkBar = startWith.call(merge(dirChange, resize), null).subscribe(() => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    const /** @type {?} */ scrollDistance = this.scrollDistance;\n    const /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._renderer.setStyle(this._tabList.nativeElement, 'transform',\n        `translate3d(${translateX}px, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance; }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    const /** @type {?} */ isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._renderer;\n/** @type {?} */\nMdTabHeader.prototype._changeDetectorRef;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  mixinColor,\n  mixinDisabled,\n} from '@angular/material/core';\nimport {FocusOrigin, FocusMonitor} from '@angular/cdk/a11y';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSliderBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderBase.prototype._renderer;\n/** @type {?} */\nMdSliderBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSliderMixinBase = mixinColor(mixinDisabled(MdSliderBase), 'accent');\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() { return this._max; }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() { return this._min; }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nprivate _vertical = false;\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\n/**\n * The value of the slider when the slide start event fires.\n */\nprivate _valueOnSlideStart: number | null;\n/**\n * Reference to the inner slider wrapper element.\n */\nprivate _sliderWrapper: ElementRef;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, this._renderer, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let /** @type {?} */ oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let /** @type {?} */ oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput | null) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let /** @type {?} */ oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\nprivate _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\nprivate _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n'_sliderWrapper': [{ type: ViewChild, args: ['sliderWrapper', ] },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdSlider.prototype._dirChangeSubscription;\n/**\n * The value of the slider when the slide start event fires.\n * @type {?}\n */\nMdSlider.prototype._valueOnSlideStart;\n/**\n * Reference to the inner slider wrapper element.\n * @type {?}\n */\nMdSlider.prototype._sliderWrapper;\n/** @type {?} */\nMdSlider.prototype._focusMonitor;\n/** @type {?} */\nMdSlider.prototype._changeDetectorRef;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, GestureConfig} from '@angular/material/core';\nimport {MdSlider} from './slider';\nimport {BidiModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, BidiModule, A11yModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const /** @type {?} */ MD_SNACK_BAR_DATA = new InjectionToken<any>('MdSnackBarData');\n\n/** Possible values for horizontalPosition on MdSnackBarConfig. */\nexport type MdSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MdSnackBarConfig. */\nexport type MdSnackBarVerticalPosition = 'top' | 'bottom';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: Direction = 'ltr';\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * The horizontal position to place the snack bar.\n */\nhorizontalPosition?: MdSnackBarHorizontalPosition = 'center';\n/**\n * The vertical position to place the snack bar.\n */\nverticalPosition?: MdSnackBarVerticalPosition = 'bottom';\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdSnackBarConfig.prototype.data;\n/**\n * The horizontal position to place the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.horizontalPosition;\n/**\n * The vertical position to place the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.verticalPosition;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\n/**\n * The instance of the component making up the content of the snack bar.\n */\ninstance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction = new Subject<void>();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\ncloseWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nMdSnackBarRef.prototype.instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n * @type {?}\n */\nMdSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarConfig} from './snack-bar-config';\n\n\nexport type SnackBarState = 'visible' | 'hidden' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * Whether the component has been destroyed.\n */\nprivate _destroyed = false;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\n_onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\n_onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nprivate _animationState: SnackBarState;\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Gets the current animation state both combining one of the possibilities from\n * SnackBarState and the vertical location.\n * @return {?}\n */\ngetAnimationState(): string {\n    return `${this._animationState}-${this.snackBarConfig.verticalPosition}`;\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-top');\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (event.toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': 'getAnimationState()',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      // Animation from top.\n      state('visible-top', style({transform: 'translateY(0%)'})),\n      state('hidden-top', style({transform: 'translateY(-100%)'})),\n      transition('visible-top => hidden-top', animate(HIDE_ANIMATION)),\n      transition('void => visible-top', animate(SHOW_ANIMATION)),\n      // Animation from bottom.\n      state('visible-bottom', style({transform: 'translateY(0%)'})),\n      state('hidden-bottom', style({transform: 'translateY(100%)'})),\n      transition('visible-bottom => hidden-bottom', animate(HIDE_ANIMATION)),\n      transition('void => visible-bottom',\n        animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * Whether the component has been destroyed.\n * @type {?}\n */\nMdSnackBarContainer.prototype._destroyed;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype._onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype._onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype._animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n/** @type {?} */\nMdSnackBarContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MD_SNACK_BAR_DATA} from './snack-bar-config';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * Data that was injected into the snack bar.\n */\ndata: { message: string, action: string };\n/**\n * @param {?} snackBarRef\n * @param {?} data\n */\nconstructor(\npublic snackBarRef: MdSnackBarRef<SimpleSnackBar>,\n     data: any) {\n    this.data = data;\n  }\n/**\n * Performs the action on the snack bar.\n * @return {?}\n */\naction(): void {\n    this.snackBarRef.closeWithAction();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.data.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBarRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_SNACK_BAR_DATA, ] }, ]},\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * Data that was injected into the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.data;\n/** @type {?} */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf } from '@angular/core';\nimport {Overlay, OverlayRef, OverlayConfig} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {PortalInjector} from '@angular/material/core';\nimport {extendObject} from '@angular/material/core';\nimport {MD_SNACK_BAR_DATA, MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> | null {\n    const /** @type {?} */ parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _injector\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _injector: Injector,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n    const /** @type {?} */ snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((_config)).duration))));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config?: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    const /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    const /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate _attach<T>(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\n    const /** @type {?} */ snackBarRef = new MdSnackBarRef<T>(container, overlayRef);\n    const /** @type {?} */ injector = this._createInjector(config, snackBarRef);\n    const /** @type {?} */ portal = new ComponentPortal(component, undefined, injector);\n    const /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    return snackBarRef;\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    const /** @type {?} */ state = new OverlayConfig();\n    state.direction = config.direction;\n\n    let /** @type {?} */ positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const /** @type {?} */ isRtl = config.direction === 'rtl';\n    const /** @type {?} */ isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const /** @type {?} */ isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    state.positionStrategy = positionStrategy;\n    return this._overlay.create(state);\n  }\n/**\n * Creates an injector to be used inside of a snack bar component.\n * @template T\n * @param {?} config Config that was used to create the snack bar.\n * @param {?} snackBarRef Reference to the snack bar.\n * @return {?}\n */\nprivate _createInjector<T>(\n      config: MdSnackBarConfig,\n      snackBarRef: MdSnackBarRef<T>): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdSnackBarRef, snackBarRef);\n    injectionTokens.set(MD_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: Injector, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._injector;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MdCommonModule,\n  ],\n  exports: [MdSnackBarContainer, MdCommonModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MD_SNACK_BAR_DATA,MdSnackBarHorizontalPosition,MdSnackBarVerticalPosition,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MAT_SNACK_BAR_DATA,MatSnackBar,MatSnackBarConfig,MatSnackBarContainer,MatSnackBarModule,MatSnackBarRef} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SortDirection} from './sort-direction';\nimport {getMdSortDuplicateMdSortableIdError, getMdSortHeaderMissingIdError} from './sort-errors';\n\nexport interface MdSortable {\n  id: string;\n  start: 'asc' | 'desc';\n  disableClear: boolean;\n}\n\nexport interface Sort {\n  active: string;\n  direction: SortDirection;\n}\n/**\n * Container for MdSortables to manage the sort state and provide default sort parameters.\n */\nexport class MdSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MdSortable>();\n/**\n * The id of the most recently sorted MdSortable.\n */\nactive: string;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MdSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n * May be overriden by the MdSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _matSortActive() { return this.active; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortActive(v) { this.active = v; }\n/**\n * @return {?}\n */\nget _matSortStart() { return this.start; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortStart(v) { this.start = v; }\n/**\n * @return {?}\n */\nget _matSortDirection() { return this.direction; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDirection(v) { this.direction = v; }\n/**\n * @return {?}\n */\nget _matSortDisableClear() { return this.disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDisableClear(v) { this.disableClear = v; }\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nreadonly sortChange = new EventEmitter<Sort>();\n/**\n * @return {?}\n */\nget _matSortChange(): EventEmitter<Sort> { return this.sortChange; }\n/**\n * Register function to be used by the contained MdSortables. Adds the MdSortable to the\n * collection of MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MdSortable) {\n    if (!sortable.id) {\n      throw getMdSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getMdSortDuplicateMdSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n/**\n * Unregister function to be used by the contained MdSortables. Removes the MdSortable from the\n * collection of contained MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MdSortable) {\n    this.sortables.delete(sortable.id);\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MdSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MdSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSort], [matSort]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['mdSortActive', ] },],\n'start': [{ type: Input, args: ['mdSortStart', ] },],\n'direction': [{ type: Input, args: ['mdSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['mdSortDisableClear', ] },],\n'_matSortActive': [{ type: Input, args: ['matSortActive', ] },],\n'_matSortStart': [{ type: Input, args: ['matSortStart', ] },],\n'_matSortDirection': [{ type: Input, args: ['matSortDirection', ] },],\n'_matSortDisableClear': [{ type: Input, args: ['matSortDisableClear', ] },],\n'sortChange': [{ type: Output, args: ['mdSortChange', ] },],\n'_matSortChange': [{ type: Output, args: ['matSortChange', ] },],\n};\n}\n\nfunction MdSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSort.ctorParameters;\n/** @type {?} */\nMdSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMdSort.prototype.sortables;\n/**\n * The id of the most recently sorted MdSortable.\n * @type {?}\n */\nMdSort.prototype.active;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n * @type {?}\n */\nMdSort.prototype.start;\n/**\n * The sort direction of the currently active MdSortable.\n * @type {?}\n */\nMdSort.prototype.direction;\n/** @type {?} */\nMdSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMdSort.prototype.sortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MdSortHeaderIntl and\n * include it in a custom provider.\n */\nexport class MdSortHeaderIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * ARIA label for the sorting button.\n */\nsortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeaderIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.changes;\n/**\n * ARIA label for the sorting button.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MdSort, MdSortable} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {getMdSortHeaderNotContainedWithinMdSortError} from './sort-errors';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst /** @type {?} */ SORT_ANIMATION_TRANSITION =\n    AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n * \n * Must be provided with an id and contained within a parent MdSort directive.\n * \n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport class MdSortHeader implements MdSortable {\nprivate _rerenderSubscription: Subscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n */\nid: string;\n/**\n * Sets the position of the arrow that displays when sorted.\n */\narrowPosition: 'before' | 'after' = 'after';\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n */\nstart: 'asc' | 'desc';\n/**\n * Overrides the disable clear value of the containing MdSort for this MdSortable.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _id() { return this.id; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _id(v: string) { this.id = v; }\n/**\n * @param {?} _intl\n * @param {?} changeDetectorRef\n * @param {?} _sort\n * @param {?} _cdkColumnDef\n */\nconstructor(public _intl: MdSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\npublic _sort: MdSort,\npublic _cdkColumnDef: CdkColumnDef) {\n    if (!_sort) {\n      throw getMdSortHeaderNotContainedWithinMdSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _intl.changes).subscribe(() => {\n      changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n/**\n * Whether this MdSortHeader is currently sorted in either ascending or descending order.\n * @return {?}\n */\n_isSorted() {\n    return this._sort.active == this.id && this._sort.direction;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-sort-header], [mat-sort-header]',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_sort.sort(this)',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('indicator', [\n      state('asc', style({transform: 'translateY(0px)'})),\n      // 10px is the height of the sort indicator, minus the width of the pointers\n      state('desc', style({transform: 'translateY(10px)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('leftPointer', [\n      state('asc', style({transform: 'rotate(-45deg)'})),\n      state('desc', style({transform: 'rotate(45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('rightPointer', [\n      state('asc', style({transform: 'rotate(45deg)'})),\n      state('desc', style({transform: 'rotate(-45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSortHeaderIntl, },\n{type: ChangeDetectorRef, },\n{type: MdSort, decorators: [{ type: Optional }, ]},\n{type: CdkColumnDef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input, args: ['md-sort-header', ] },],\n'arrowPosition': [{ type: Input },],\n'start': [{ type: Input, args: ['start', ] },],\n'disableClear': [{ type: Input },],\n'_id': [{ type: Input, args: ['mat-sort-header', ] },],\n};\n}\n\nfunction MdSortHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeader.ctorParameters;\n/** @type {?} */\nMdSortHeader.propDecorators;\n/** @type {?} */\nMdSortHeader.prototype._rerenderSubscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n * @type {?}\n */\nMdSortHeader.prototype.id;\n/**\n * Sets the position of the arrow that displays when sorted.\n * @type {?}\n */\nMdSortHeader.prototype.arrowPosition;\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n * @type {?}\n */\nMdSortHeader.prototype.start;\n/** @type {?} */\nMdSortHeader.prototype._disableClear;\n/** @type {?} */\nMdSortHeader.prototype._intl;\n/** @type {?} */\nMdSortHeader.prototype._sort;\n/** @type {?} */\nMdSortHeader.prototype._cdkColumnDef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdSortHeader} from './sort-header';\nimport {MdSort} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\nexport class MdSortModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [MdSort, MdSortHeader],\n  declarations: [MdSort, MdSortHeader],\n  providers: [MdSortHeaderIntl]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSortModule,SortDirection,MdSortHeader,MdSortHeaderIntl,MdSortable,Sort,MdSort,MatSort,MatSortable,MatSortHeader,MatSortHeaderIntl,MatSortModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdStepLabel = CdkStepLabel;\nexport class MdStepLabel extends _MdStepLabel {\n/**\n * @param {?} template\n */\nconstructor(template: TemplateRef<any>) {\n    super(template);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdStepLabel], [matStepLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction MdStepLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\nimport {MdStepLabel} from './step-label';\nexport class MdStepHeader {\n/**\n * Icon for the given step.\n */\nicon: string;\n/**\n * Label of the given step.\n */\nlabel: MdStepLabel | string;\n/**\n * Index of the given step.\n * @return {?}\n */\nget index() { return this._index; }\n/**\n * @param {?} value\n * @return {?}\n */\nset index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\nprivate _index: number;\n/**\n * Whether the given step is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\nprivate _selected: boolean;\n/**\n * Whether the given step label is active.\n * @return {?}\n */\nget active() { return this._active; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\nprivate _active: boolean;\n/**\n * Whether the given step is optional.\n * @return {?}\n */\nget optional() { return this._optional; }\n/**\n * @param {?} value\n * @return {?}\n */\nset optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\nprivate _optional: boolean;\n/**\n * Returns string label of given step if it is a text label.\n * @return {?}\n */\n_stringLabel(): string | null {\n    return this.label instanceof MdStepLabel ? null : this.label;\n  }\n/**\n * Returns MdStepLabel if the label of given step is a template label.\n * @return {?}\n */\n_templateLabel(): MdStepLabel | null {\n    return this.label instanceof MdStepLabel ? this.label : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-step-header, mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  providers: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: false}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'icon': [{ type: Input },],\n'label': [{ type: Input },],\n'index': [{ type: Input },],\n'selected': [{ type: Input },],\n'active': [{ type: Input },],\n'optional': [{ type: Input },],\n};\n}\n\nfunction MdStepHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepHeader.ctorParameters;\n/** @type {?} */\nMdStepHeader.propDecorators;\n/**\n * Icon for the given step.\n * @type {?}\n */\nMdStepHeader.prototype.icon;\n/**\n * Label of the given step.\n * @type {?}\n */\nMdStepHeader.prototype.label;\n/** @type {?} */\nMdStepHeader.prototype._index;\n/** @type {?} */\nMdStepHeader.prototype._selected;\n/** @type {?} */\nMdStepHeader.prototype._active;\n/** @type {?} */\nMdStepHeader.prototype._optional;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ESCAPE, first, startWith, takeUntil} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Throws an exception when two MdDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MdDrawerToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdDrawerToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerToggleResult.prototype.type;\n/** @type {?} */\nMdDrawerToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-drawer> component.\n * \n * This component corresponds to a drawer that can be opened on the drawer container.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdDrawer implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n */\nprivate _enableAnimations = false;\n/**\n * The side that the drawer is attached to.\n * @return {?}\n */\nget position() { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\nprivate _position: 'start' | 'end' = 'start';\n/**\n * @deprecated\n * @return {?}\n */\nget align() { return this.position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) { this.position = value; }\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the drawer is opened.\n */\nprivate _opened: boolean = false;\n/**\n * Emits whenever the drawer has started animating.\n */\n_animationStarted = new EventEmitter<void>();\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n */\n_isAnimating = false;\n/**\n * Current state of the sidenav animation.\n */\n_animationState: 'open-instant' | 'open' | 'void' = 'void';\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do drawer breaking changes.\n * @deprecated\n */\nprivate _currentTogglePromise: Promise<MdDrawerToggleResult> | null;\n/**\n * Event emitted when the drawer is fully opened.\n */\nonOpen = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer is fully closed.\n */\nonClose = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer's position changes.\n */\nonPositionChanged = new EventEmitter<void>();\n/**\n * @deprecated\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\n    this.onOpen.subscribe(() => {\n      if (this._doc) {\n        this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n      }\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => this._restoreFocus());\n  }\n/**\n * If focus is currently inside the drawer, restores it to where it was before the drawer\n * opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeDrawerWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n    this._enableAnimations = true;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the drawer is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open the drawer.\n * @return {?}\n */\nopen(): Promise<MdDrawerToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close the drawer.\n * @return {?}\n */\nclose(): Promise<MdDrawerToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this drawer.\n * @param {?=} isOpen Whether the drawer should be open.\n * @return {?}\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdDrawerToggleResult> {\n    if (!this._isAnimating) {\n      this._opened = isOpen;\n\n      if (isOpen) {\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      } else {\n        this._animationState = 'void';\n      }\n\n      this._currentTogglePromise = new Promise(resolve => {\n        first.call(isOpen ? this.onOpen : this.onClose).subscribe(resolve);\n      });\n\n      if (this._focusTrap) {\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\n      }\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return /** @type {?} */(( this._currentTogglePromise));\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * @return {?}\n */\n_onAnimationStart() {\n    this._isAnimating = true;\n    this._animationStarted.emit();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if (toState === 'open' && fromState === 'void') {\n      this.onOpen.emit(new MdDrawerToggleResult('open', true));\n    } else if (toState === 'void' && fromState === 'open') {\n      this.onClose.emit(new MdDrawerToggleResult('close', true));\n    }\n\n    // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n    // the end if animations are disabled. Make this call async to ensure that it still fires\n    // at the appropriate time.\n    Promise.resolve().then(() => {\n      this._isAnimating = false;\n      this._currentTogglePromise = null;\n    });\n  }\n/**\n * @return {?}\n */\nget _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-drawer, mat-drawer',\n  templateUrl: 'drawer.html',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n          animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input },],\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onPositionChanged': [{ type: Output, args: ['positionChanged', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdDrawer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawer.ctorParameters;\n/** @type {?} */\nMdDrawer.propDecorators;\n/** @type {?} */\nMdDrawer.prototype._focusTrap;\n/** @type {?} */\nMdDrawer.prototype._elementFocusedBeforeDrawerWasOpened;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n * @type {?}\n */\nMdDrawer.prototype._enableAnimations;\n/** @type {?} */\nMdDrawer.prototype._position;\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdDrawer.prototype.mode;\n/** @type {?} */\nMdDrawer.prototype._disableClose;\n/**\n * Whether the drawer is opened.\n * @type {?}\n */\nMdDrawer.prototype._opened;\n/**\n * Emits whenever the drawer has started animating.\n * @type {?}\n */\nMdDrawer.prototype._animationStarted;\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n * @type {?}\n */\nMdDrawer.prototype._isAnimating;\n/**\n * Current state of the sidenav animation.\n * @type {?}\n */\nMdDrawer.prototype._animationState;\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do drawer breaking changes.\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype._currentTogglePromise;\n/**\n * Event emitted when the drawer is fully opened.\n * @type {?}\n */\nMdDrawer.prototype.onOpen;\n/**\n * Event emitted when the drawer is fully closed.\n * @type {?}\n */\nMdDrawer.prototype.onClose;\n/**\n * Event emitted when the drawer's position changes.\n * @type {?}\n */\nMdDrawer.prototype.onPositionChanged;\n/**\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype.onAlignChanged;\n/** @type {?} */\nMdDrawer.prototype._elementRef;\n/** @type {?} */\nMdDrawer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDrawer.prototype._doc;\n}\n\n/**\n * <md-drawer-container> component.\n * \n * This is the parent component to one or two <md-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdDrawerContainer implements AfterContentInit, OnDestroy {\n   _drawers: QueryList<MdDrawer>;\n/**\n * The drawer child with the `start` position.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The drawer child with the `end` position.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the drawer backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The drawer at the start/end position, independent of direction.\n */\nprivate _start: MdDrawer | null;\nprivate _end: MdDrawer | null;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdDrawer | null;\nprivate _right: MdDrawer | null;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\n/**\n * Inline styles to be applied to the container.\n */\n_styles: { marginLeft: string; marginRight: string; transform: string; };\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      this._dirChangeSubscription = _dir.change.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    startWith.call(this._drawers.changes, null).subscribe(() => {\n      this._validateDrawers();\n      this._drawers.forEach((drawer: MdDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n/**\n * Calls `open` of both start and end drawers\n * @return {?}\n */\nopen(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n/**\n * Calls `close` of both start and end drawers\n * @return {?}\n */\nclose(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n/**\n * Subscribes to drawer events in order to set a class on the main container element when the\n * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerToggle(drawer: MdDrawer): void {\n    takeUntil.call(drawer._animationStarted, this._drawers.changes).subscribe(() => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-transition');\n      this._updateStyles();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      takeUntil.call(merge(drawer.onOpen, drawer.onClose), this._drawers.changes).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n/**\n * Subscribes to drawer onPositionChanged event in order to re-validate drawers when the position\n * changes.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerPosition(drawer: MdDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    takeUntil.call(drawer.onPositionChanged, this._drawers.changes).subscribe(() => {\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n/**\n * Toggles the 'mat-drawer-opened' class on the main 'md-drawer-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-drawer-opened');\n    }\n  }\n/**\n * Validate the state of the drawer children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMdDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMdDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n/**\n * @return {?}\n */\n_closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => /** @type {?} */(( drawer)).close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\n        || (this._isDrawerOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\n  }\n/**\n * @param {?} drawer\n * @return {?}\n */\nprivate _isDrawerOpen(drawer: MdDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n/**\n * Return the width of the drawer, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} drawer\n * @param {?} mode\n * @return {?}\n */\nprivate _getDrawerEffectiveWidth(drawer: MdDrawer, mode: string): number {\n    return (this._isDrawerOpen(drawer) && drawer.mode == mode) ? drawer._width : 0;\n  }\n/**\n * Recalculates and updates the inline styles. Note that this\n * should be used sparingly, because it causes a reflow.\n * @return {?}\n */\nprivate _updateStyles() {\n    const /** @type {?} */ marginLeft = this._left ? this._getDrawerEffectiveWidth(this._left, 'side') : 0;\n    const /** @type {?} */ marginRight = this._right ? this._getDrawerEffectiveWidth(this._right, 'side') : 0;\n    const /** @type {?} */ leftWidth = this._left ? this._getDrawerEffectiveWidth(this._left, 'push') : 0;\n    const /** @type {?} */ rightWidth = this._right ? this._getDrawerEffectiveWidth(this._right, 'push') : 0;\n\n    this._styles = {\n      marginLeft: `${marginLeft}px`,\n      marginRight: `${marginRight}px`,\n      transform: `translate3d(${leftWidth - rightWidth}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-drawer-container, mat-drawer-container',\n  templateUrl: 'drawer-container.html',\n  styleUrls: [\n    'drawer.css',\n    'drawer-transitions.css',\n  ],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdDrawer, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdDrawerContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawerContainer.ctorParameters;\n/** @type {?} */\nMdDrawerContainer.propDecorators;\n/** @type {?} */\nMdDrawerContainer.prototype._drawers;\n/**\n * Event emitted when the drawer backdrop is clicked.\n * @type {?}\n */\nMdDrawerContainer.prototype.backdropClick;\n/**\n * The drawer at the start/end position, independent of direction.\n * @type {?}\n */\nMdDrawerContainer.prototype._start;\n/** @type {?} */\nMdDrawerContainer.prototype._end;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdDrawerContainer.prototype._left;\n/** @type {?} */\nMdDrawerContainer.prototype._right;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdDrawerContainer.prototype._dirChangeSubscription;\n/**\n * Inline styles to be applied to the container.\n * @type {?}\n */\nMdDrawerContainer.prototype._styles;\n/** @type {?} */\nMdDrawerContainer.prototype._dir;\n/** @type {?} */\nMdDrawerContainer.prototype._element;\n/** @type {?} */\nMdDrawerContainer.prototype._renderer;\n/** @type {?} */\nMdDrawerContainer.prototype._ngZone;\n/** @type {?} */\nMdDrawerContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdDrawer, MdDrawerContainer} from './drawer';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nexport class MdSidenav extends MdDrawer {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  templateUrl: 'drawer.html',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n}\n\nexport class MdSidenavContainer extends MdDrawerContainer {\n   _drawers;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  templateUrl: 'drawer-container.html',\n  styleUrls: [\n    'drawer.css',\n    'drawer-transitions.css',\n  ],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdSidenav, ] },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._drawers;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdDrawer, MdDrawerContainer} from './drawer';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\n  exports: [MdDrawerContainer, MdDrawer, MdSidenavContainer, MdSidenav, MdCommonModule],\n  declarations: [MdDrawerContainer, MdDrawer, MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSidenavModule,throwMdDuplicatedDrawerError,MdDrawerToggleResult,MdDrawer,MdDrawerContainer,MdSidenav,MdSidenavContainer,MatDrawerToggleResult,MatDrawer,MatDrawerContainer,MatSidenav,MatSidenavContainer,MatSidenavModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  applyCssTransform,\n  HammerInput,\n  MdRipple,\n  RippleRef,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {mixinDisabled, CanDisable} from '@angular/material/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextUniqueId = 0;\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\n/**\n * Change event object emitted by a MdSlideToggle.\n */\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MdSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId: string = `md-slide-toggle-${++nextUniqueId}`;\nprivate _slideRenderer: SlideToggleRenderer;\nprivate _required: boolean = false;\nprivate _checked: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string | null = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string | null = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle element is checked or not\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    this._checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} tabIndex\n */\nconstructor(elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\n               tabIndex: string) {\n    super(renderer, elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * This function will called if the underlying input changed its value through user interaction.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Sync the value from the underlying input element with the slide-toggle component.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event if the native input emitted one.\n    // It is important to only emit it, if the native input triggered one, because we don't want\n    // to trigger a change event, when the `checked` variable changes programmatically.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // In some situations the user will release the mouse on the label element. The label element\n    // redirects the click to the underlying input element and will result in a value change.\n    // Prevent the default behavior if dragging, because the value will be set after drag.\n    if (this._slideRenderer.dragging) {\n      event.preventDefault();\n    }\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = !!value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n    this.onChange(this.checked);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'checked': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} platform\n */\nconstructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle,MAT_SLIDE_TOGGLE_VALUE_ACCESSOR,MatSlideToggle,MatSlideToggleBase,MatSlideToggleChange,MatSlideToggleModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MdCommonModule,\n  MdRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MdSlideToggle} from './slide-toggle';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, MdCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MdSlideToggle, MdCommonModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function getMdTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/**\n * \\@docs-private\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message = '';\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n    this._updateTooltipMessage();\n    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @return {?}\n */\nget _matClass() { return this.tooltipClass; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matClass(v) { this.tooltipClass = v; }\nprivate _enterListener: Function;\nprivate _leaveListener: Function;\n/**\n * @param {?} renderer\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _platform\n * @param {?} _ariaDescriber\n * @param {?} _scrollStrategy\n * @param {?} _dir\n */\nconstructor(\n    renderer: Renderer2,\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _platform: Platform,\nprivate _ariaDescriber: AriaDescriber,\nprivate _scrollStrategy,\nprivate _dir: Directionality) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._enterListener =\n        renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      this._leaveListener =\n        renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._enterListener();\n      this._leaveListener();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage(); /** @type {?} */((\n    this._tooltipInstance)).show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Handles the keydown events on the host element.\n * @param {?} e\n * @return {?}\n */\n_handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance; /** @type {?} */((\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance)).afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    const /** @type {?} */ origin = this._getOrigin();\n    const /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    const /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    const /** @type {?} */ config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @return {?}\n */\nprivate _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n        if (this._tooltipInstance) { /** @type {?} */((\n          this._overlayRef)).updatePosition();\n        }\n      });\n    }\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(focus)': 'show()',\n    '(blur)': 'hide(0)',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip, matTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Platform, },\n{type: AriaDescriber, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_TOOLTIP_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['mdTooltipClass', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'_matClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/** @type {?} */\nMdTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._enterListener;\n/** @type {?} */\nMdTooltip.prototype._leaveListener;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._ariaDescriber;\n/** @type {?} */\nMdTooltip.prototype._scrollStrategy;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\nprivate _closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throw getMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @return {?}\n */\n_animationStart() {\n    this._closeOnInteraction = false;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_animationDone(event: AnimationEvent): void {\n    const /** @type {?} */ toState = /** @type {?} */(( event.toState as TooltipVisibility));\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('state', [\n      state('initial, void, hidden', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,TOOLTIP_PANEL_CLASS,getMdTooltipInvalidPositionError,MD_TOOLTIP_SCROLL_STRATEGY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MdTooltip,TooltipVisibility,TooltipComponent,MatTooltip,MatTooltipModule,MAT_TOOLTIP_SCROLL_STRATEGY,MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER, MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER, ARIA_DESCRIBER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * To modify the labels and text displayed, create a new instance of MdPaginatorIntl and\n * include it in a custom provider\n */\nexport class MdPaginatorIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the page size selector.\n */\nitemsPerPageLabel = 'Items per page:';\n/**\n * A label for the button that increments the current page.\n */\nnextPageLabel = 'Next page';\n/**\n * A label for the button that decrements the current page.\n */\npreviousPageLabel = 'Previous page';\n/**\n * A label for the range of items within the current page and the length of the whole list.\n */\ngetRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdPaginatorIntl.prototype.changes;\n/**\n * A label for the page size selector.\n * @type {?}\n */\nMdPaginatorIntl.prototype.itemsPerPageLabel;\n/**\n * A label for the button that increments the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.nextPageLabel;\n/**\n * A label for the button that decrements the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.previousPageLabel;\n/**\n * A label for the range of items within the current page and the length of the whole list.\n * @type {?}\n */\nMdPaginatorIntl.prototype.getRangeLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdPaginatorIntl} from './paginator-intl';\n/**\n * The default page size if there is no page size and there are no provided page size options.\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n/**\n * The current page index.\n */\npageIndex: number;\n/**\n * The current page size\n */\npageSize: number;\n/**\n * The current total number of items being paged\n */\nlength: number;\n}\n\nfunction PageEvent_tsickle_Closure_declarations() {\n/**\n * The current page index.\n * @type {?}\n */\nPageEvent.prototype.pageIndex;\n/**\n * The current page size\n * @type {?}\n */\nPageEvent.prototype.pageSize;\n/**\n * The current total number of items being paged\n * @type {?}\n */\nPageEvent.prototype.length;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport class MdPaginator implements OnInit, OnDestroy {\nprivate _initialized: boolean;\nprivate _intlChanges: Subscription;\n/**\n * The zero-based page index of the displayed list of items. Defaulted to 0.\n * @return {?}\n */\nget pageIndex(): number { return this._pageIndex; }\n/**\n * @param {?} pageIndex\n * @return {?}\n */\nset pageIndex(pageIndex: number) {\n    this._pageIndex = pageIndex;\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n/**\n * The length of the total number of items that are being paginated. Defaulted to 0.\n * @return {?}\n */\nget length(): number { return this._length; }\n/**\n * @param {?} length\n * @return {?}\n */\nset length(length: number) {\n    this._length = length;\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n/**\n * Number of items to display on a page. By default set to 50.\n * @return {?}\n */\nget pageSize(): number { return this._pageSize; }\n/**\n * @param {?} pageSize\n * @return {?}\n */\nset pageSize(pageSize: number) {\n    this._pageSize = pageSize;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSize: number;\n/**\n * The set of provided page size options to display to the user.\n * @return {?}\n */\nget pageSizeOptions(): number[] { return this._pageSizeOptions; }\n/**\n * @param {?} pageSizeOptions\n * @return {?}\n */\nset pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = pageSizeOptions;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSizeOptions: number[] = [];\n/**\n * Event emitted when the paginator changes the page size or page index.\n */\npage = new EventEmitter<PageEvent>();\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n */\n_displayedPageSizeOptions: number[];\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(public _intl: MdPaginatorIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * Advances to the next page if it exists.\n * @return {?}\n */\nnextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n/**\n * Move back to the previous page if it exists.\n * @return {?}\n */\npreviousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n/**\n * Whether there is a previous page.\n * @return {?}\n */\nhasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n/**\n * Whether there is a next page.\n * @return {?}\n */\nhasNextPage() {\n    const /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n/**\n * Changes the page size so that the first item displayed on the page will still be\n * displayed using the new page size.\n * \n * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n * switching so that the page size is 5 will set the third page as the current page so\n * that the 10th item will still be displayed.\n * @param {?} pageSize\n * @return {?}\n */\n_changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const /** @type {?} */ startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n/**\n * Updates the list of page size options to display to the user. Includes making sure that\n * the page size is an option and that the list is sorted.\n * @return {?}\n */\nprivate _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Emits an event notifying that a change of the paginator's properties has been triggered.\n * @return {?}\n */\nprivate _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-paginator, mat-paginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  providers: [\n    {provide: MATERIAL_COMPATIBILITY_MODE, useValue: false}\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdPaginatorIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pageIndex': [{ type: Input },],\n'length': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageSizeOptions': [{ type: Input },],\n'page': [{ type: Output },],\n};\n}\n\nfunction MdPaginator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginator.ctorParameters;\n/** @type {?} */\nMdPaginator.propDecorators;\n/** @type {?} */\nMdPaginator.prototype._initialized;\n/** @type {?} */\nMdPaginator.prototype._intlChanges;\n/** @type {?} */\nMdPaginator.prototype._pageIndex;\n/** @type {?} */\nMdPaginator.prototype._length;\n/** @type {?} */\nMdPaginator.prototype._pageSize;\n/** @type {?} */\nMdPaginator.prototype._pageSizeOptions;\n/**\n * Event emitted when the paginator changes the page size or page index.\n * @type {?}\n */\nMdPaginator.prototype.page;\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n * @type {?}\n */\nMdPaginator.prototype._displayedPageSizeOptions;\n/** @type {?} */\nMdPaginator.prototype._intl;\n/** @type {?} */\nMdPaginator.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MdButtonModule} from '@angular/material/button';\nimport {MdSelectModule} from '@angular/material/select';\nimport {MdTooltipModule} from '@angular/material/tooltip';\nimport {MdPaginator} from './paginator';\nimport {MdPaginatorIntl} from './paginator-intl';\nexport class MdPaginatorModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdSelectModule,\n    MdTooltipModule,\n  ],\n  exports: [MdPaginator],\n  declarations: [MdPaginator],\n  providers: [MdPaginatorIntl],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdPaginatorModule,PageEvent,MdPaginator,MdPaginatorIntl,MatPaginator,MatPaginatorIntl,MatPaginatorModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule],\n  exports: [MdProgressBar, MdCommonModule],\n  declarations: [MdProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdProgressBarModule,MdProgressBar,MatProgressBar,MatProgressBarModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {'class': 'mat-progress-spinner'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number | null;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number | null) {\n    if (this._interdeterminateInterval) {\n      clearInterval(this._interdeterminateInterval);\n    }\n\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n\n    return 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\n    super(renderer, elementRef);\n  }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(renderer, elementRef, ngZone);\n    this.mode = 'indeterminate';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number): string {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {mixinDisabled, CanDisable} from '@angular/material/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n// Increasing integer for generating unique ids for radio components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton | null;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${nextUniqueId++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the radio group is required.\n */\nprivate _required: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is disabled\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * Whether the radio group is required\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * Whether the radio group is required.\n * @type {?}\n */\nMdRadioGroup.prototype._required;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(mixinDisableRipple(MdRadioButtonBase), 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\nprivate _uniqueId: string = `md-radio-${++nextUniqueId}`;\n/**\n * The unique ID for the radio button.\n */\nid: string = this._uniqueId;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the radio button is required.\n * @return {?}\n */\nget required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Whether this radio is required.\n */\nprivate _required: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    const /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/** @type {?} */\nMdRadioButton.prototype._uniqueId;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Whether this radio is required.\n * @type {?}\n */\nMdRadioButton.prototype._required;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMdRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '@angular/cdk/overlay';\nimport {\n  MdRippleModule,\n  MdCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from '@angular/material/core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, A11yModule],\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MatRadioButton,MatRadioButtonBase,MatRadioChange,MatRadioGroup,MatRadioGroupBase,MatRadioModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, RxChain} from '@angular/cdk/rxjs';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdMenu} from './menu-directive';\nimport {throwMdMenuMissingError} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * Injection token that determines the scroll handling while the menu is open.\n */\nexport const MD_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n */\nexport const MENU_PANEL_TOP_PADDING = 8;\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal<any>;\nprivate _overlayRef: OverlayRef | null = null;\nprivate _menuOpen: boolean = false;\nprivate _closeSubscription = Subscription.EMPTY;\nprivate _positionSubscription = Subscription.EMPTY;\nprivate _hoverSubscription = Subscription.EMPTY;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _parentMenu\n * @param {?} _menuItemInstance\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _parentMenu: MdMenu,\nprivate _menuItemInstance: MdMenuItem,\nprivate _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this.closeMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.close.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = filter\n          .call(this._parentMenu.hover(), active => active === this._menuItemInstance)\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean {\n    return this._menuOpen;\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the menu triggers a sub-menu or a top-level one.\n * @return {?}\n */\ntriggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.menu.close.emit());\n      this._initMenu();\n\n      if (this.menu instanceof MdMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._overlayRef.detach();\n      this._closeSubscription.unsubscribe();\n      this.menu.close.emit();\n\n      if (this.menu instanceof MdMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * Updates the menu elevation based on the amount of parent menus that it has.\n * @return {?}\n */\nprivate _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let /** @type {?} */ depth = 0;\n      let /** @type {?} */ parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n/**\n * This method checks that a valid instance of MdMenu has been passed into\n * mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMdMenuMissingError();\n    }\n  }\n/**\n * This method creates the overlay from the provided menu's template and saves its\n * OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayConfig\n */\nprivate _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const /** @type {?} */ posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let /** @type {?} */ offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n\n      // TODO(crisbeto): this should be a function, once the overlay supports it.\n      // Right now it will be wrong for the fallback positions.\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY})\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY});\n  }\n/**\n * Cleans up the active subscriptions.\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n/**\n * Returns a stream that emits whenever an action that should close the menu occurs.\n * @return {?}\n */\nprivate _menuClosingActions() {\n    const /** @type {?} */ backdrop = /** @type {?} */(( this._overlayRef)).backdropClick();\n    const /** @type {?} */ parentClose = this._parentMenu ? this._parentMenu.close : observableOf(null);\n    const /** @type {?} */ hover = this._parentMenu ? RxChain.from(this._parentMenu.hover())\n        .call(filter, active => active !== this._menuItemInstance)\n        .call(filter, () => this._menuOpen)\n        .result() : observableOf(null);\n\n    return merge(backdrop, parentClose, hover);\n  }\n/**\n * Handles mouse presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n/**\n * Handles key presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n/**\n * Handles click events on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'mdMenuTrigger, matMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_SCROLL_STRATEGY, ] }, ]},\n{type: MdMenu, decorators: [{ type: Optional }, ]},\n{type: MdMenuItem, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._closeSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._hoverSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdMenuTrigger.prototype._parentMenu;\n/** @type {?} */\nMdMenuTrigger.prototype._menuItemInstance;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdMenu, MD_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger, MD_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MdRippleModule} from '@angular/material/core';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n  providers: [\n    MD_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MD_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MD_MENU_SCROLL_STRATEGY,fadeInItems,transformMenu,MdMenuModule,MdMenu,MdMenuDefaultOptions,MD_MENU_DEFAULT_OPTIONS,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MAT_MENU_DEFAULT_OPTIONS,MatMenu,MatMenuDefaultOptions,MatMenuItem,MatMenuModule,MatMenuPanel,MatMenuTrigger} from './public_api';\n\nexport {MdMenuItemBase as ɵa,_MdMenuItemMixinBase as ɵb} from './menu-item';\nexport {MD_MENU_SCROLL_STRATEGY_PROVIDER as ɵd,MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵc} from './menu-trigger';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: 'scale(0.75)'\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: 'scale(0.75)'\n  })),\n  transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedOverlayDirective,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {filter, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  FloatPlaceholderType,\n  HasTabIndex,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  MdOptgroup,\n  MdOption,\n  MdOptionSelectionChange,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n  PlaceholderOptions,\n} from '@angular/material/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\nimport {\n  getMdSelectDynamicMultipleError,\n  getMdSelectNonArrayValueError,\n  getMdSelectNonFunctionValueError,\n} from './select-errors';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Default minimum width of the trigger based on the CSS.\n * Used as a fallback for server-side rendering.\n * \\@docs-private\n */\nconst SELECT_TRIGGER_MIN_WIDTH = 112;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MD_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MdSelectBase), 'primary'));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport class MdSelectTrigger {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-select-trigger, mat-select-trigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectTrigger.ctorParameters;\n}\n\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription = Subscription.EMPTY;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager<MdOption>;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * User-supplied override of the trigger element.\n */\ncustomTrigger: MdSelectTrigger;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\n * is a value from an option. The second is a value from the selection. A boolean\n * should be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMdSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setOptionDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _platform\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _platform: Platform,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions,\nprivate _scrollStrategyFactory) {\n\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n    this._changeSubscription.unsubscribe();\n    this._tabSubscription.unsubscribe();\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (!this._selectionModel || this._selectionModel.isEmpty()) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._platform.isBrowser ? this._getTriggerRect().width :\n        SELECT_TRIGGER_MIN_WIDTH;\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\n_hasValue(): boolean {\n    return this._selectionModel && this._selectionModel.hasValue();\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ isInvalid = this._control && this._control.invalid;\n    const /** @type {?} */ isTouched = this._control && this._control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this._control ? this._control.value : this._value);\n    });\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\n    const /** @type {?} */ correspondingOption = this.options.find((option: MdOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch ( /** @type {?} */error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MdOption>(this.options).withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n    this._setOptionDisableRipple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    this._optionSubscription.unsubscribe();\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\n    if (this.options) {\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth = this._triggerWidth - 13;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n      selectedOptionOffset += MdOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n          this.options, this.optionGroups);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      let /** @type {?} */ groupLabels = MdOption.countGroupLabelsBeforeOption(0, this.options, this.optionGroups);\n\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1 -\n          (groupLabels * SELECT_ITEM_HEIGHT);\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ? '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color', 'disabled', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': '_isErrorState()',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect, matSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Platform, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'customTrigger': [{ type: ContentChild, args: [MdSelectTrigger, ] },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdSelect.prototype._compareWith;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMdSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/**\n * User-supplied override of the trigger element.\n * @type {?}\n */\nMdSelect.prototype.customTrigger;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/** @type {?} */\nMdSelect.prototype._value;\n/** @type {?} */\nMdSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMdSelect.prototype.valueChange;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._platform;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._parentForm;\n/** @type {?} */\nMdSelect.prototype._parentFormGroup;\n/** @type {?} */\nMdSelect.prototype._control;\n/** @type {?} */\nMdSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect, MdSelectTrigger, MD_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MdCommonModule, MdOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdSelectTrigger, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect, MdSelectTrigger],\n  providers: [MD_SELECT_SCROLL_STRATEGY_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {fadeInContent,transformPanel,transformPlaceholder,MdSelectModule,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect,MAT_SELECT_SCROLL_STRATEGY,MAT_SELECT_SCROLL_STRATEGY_PROVIDER,MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MatSelect,MatSelectBase,MatSelectChange,MatSelectModule,MatSelectTrigger} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '@angular/material/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MdListBase {}\nexport const /** @type {?} */ _MdListMixinBase = mixinDisableRipple(MdListBase);\n/**\n * \\@docs-private\n */\nexport class MdListItemBase {}\nexport const /** @type {?} */ _MdListItemMixinBase = mixinDisableRipple(MdListItemBase);\n/**\n * Divider between items within a list.\n */\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\n/**\n * A Material Design list component.\n */\nexport class MdList extends _MdListMixinBase implements CanDisableRipple {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {'class': 'mat-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {'class': 'mat-nav-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {'class': 'mat-divider'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar], [mdListAvatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon], [mdListIcon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader], [mdSubheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\n/**\n * An item within a Material Design list.\n */\nexport class MdListItem extends _MdListItemMixinBase implements AfterContentInit, CanDisableRipple {\nprivate _lineSetter: MdLineSetter;\nprivate _isNavList: boolean = false;\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    super();\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\n_isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MATERIAL_COMPATIBILITY_MODE,\n  MdLine,\n  MdLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  RxChain,\n  SPACE,\n  startWith,\n  switchMap,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * \\@docs-private\n */\nexport class MdSelectionListBase {}\nexport const /** @type {?} */ _MdSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MdSelectionListBase));\n/**\n * \\@docs-private\n */\nexport class MdListOptionBase {}\nexport const /** @type {?} */ _MdListOptionMixinBase = mixinDisableRipple(MdListOptionBase);\n\n/** Event emitted by a selection-list whenever the state of an option is changed. */\nexport interface MdSelectionListOptionEvent {\n  option: MdListOption;\n}\n\nconst /** @type {?} */ FOCUSED_STYLE: string = 'mat-list-item-focus';\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is checked.\n */\nexport class MdListOption extends _MdListOptionMixinBase\n    implements AfterContentInit, OnDestroy, FocusableOption, CanDisableRipple {\nprivate _lineSetter: MdLineSetter;\nprivate _selected: boolean = false;\nprivate _disabled: boolean = false;\n/**\n * Whether the option has focus.\n */\n_hasFocus: boolean = false;\n\n   _lines: QueryList<MdLine>;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n */\ncheckboxPosition: 'before' | 'after' = 'after';\n/**\n * Value of the option\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the option is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n/**\n * Emitted when the option is focused.\n */\nonFocus = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is selected.\n */\nselectChange = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is deselected.\n */\ndeselected = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is destroyed.\n */\ndestroyed = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _changeDetector\n * @param {?} selectionList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _changeDetector: ChangeDetectorRef,\npublic selectionList: MdSelectionList) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n\n    if (this.selectionList.disabled) {\n      this.disabled = true;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroyed.emit({option: this});\n  }\n/**\n * Toggles the selection state of the option.\n * @return {?}\n */\ntoggle(): void {\n    this.selected = !this.selected;\n    this.selectionList.selectedOptions.toggle(this);\n    this._changeDetector.markForCheck();\n  }\n/**\n * Allows for programmatic focusing of the option.\n * @return {?}\n */\nfocus(): void {\n    this._element.nativeElement.focus();\n    this.onFocus.emit({option: this});\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n    }\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._hasFocus = true;\n    this._renderer.addClass(this._element.nativeElement, FOCUSED_STYLE);\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, FOCUSED_STYLE);\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-option, mat-list-option',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: false}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdSelectionList, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => MdSelectionList), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'checkboxPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selected': [{ type: Input },],\n'selectChange': [{ type: Output },],\n'deselected': [{ type: Output },],\n'destroyed': [{ type: Output },],\n};\n}\n\nfunction MdListOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListOption.ctorParameters;\n/** @type {?} */\nMdListOption.propDecorators;\n/** @type {?} */\nMdListOption.prototype._lineSetter;\n/** @type {?} */\nMdListOption.prototype._selected;\n/** @type {?} */\nMdListOption.prototype._disabled;\n/**\n * Whether the option has focus.\n * @type {?}\n */\nMdListOption.prototype._hasFocus;\n/** @type {?} */\nMdListOption.prototype._lines;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdListOption.prototype.checkboxPosition;\n/**\n * Value of the option\n * @type {?}\n */\nMdListOption.prototype.value;\n/**\n * Emitted when the option is focused.\n * @type {?}\n */\nMdListOption.prototype.onFocus;\n/**\n * Emitted when the option is selected.\n * @type {?}\n */\nMdListOption.prototype.selectChange;\n/**\n * Emitted when the option is deselected.\n * @type {?}\n */\nMdListOption.prototype.deselected;\n/**\n * Emitted when the option is destroyed.\n * @type {?}\n */\nMdListOption.prototype.destroyed;\n/** @type {?} */\nMdListOption.prototype._renderer;\n/** @type {?} */\nMdListOption.prototype._element;\n/** @type {?} */\nMdListOption.prototype._changeDetector;\n/** @type {?} */\nMdListOption.prototype.selectionList;\n}\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nexport class MdSelectionList extends _MdSelectionListMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, AfterContentInit, OnDestroy {\n/**\n * Tab index for the selection-list.\n */\n_tabIndex = 0;\n/**\n * Subscription to all list options' onFocus events\n */\nprivate _optionFocusSubscription = Subscription.EMPTY;\n/**\n * Subscription to all list options' destroy events\n */\nprivate _optionDestroyStream = Subscription.EMPTY;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdListOption>;\n/**\n * The option components contained within this selection-list.\n */\noptions: QueryList<MdListOption>;\n/**\n * The currently selected options.\n */\nselectedOptions: SelectionModel<MdListOption> = new SelectionModel<MdListOption>(true);\n/**\n * @param {?} _element\n */\nconstructor(private _element: ElementRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MdListOption>(this.options).withWrap();\n\n    if (this.disabled) {\n      this._tabIndex = -1;\n    }\n\n    this._optionFocusSubscription = this._onFocusSubscription();\n    this._optionDestroyStream = this._onDestroySubscription();\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._optionDestroyStream.unsubscribe();\n    this._optionFocusSubscription.unsubscribe();\n  }\n/**\n * Focus the selection-list.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * Selects all of the options.\n * @return {?}\n */\nselectAll() {\n    this.options.forEach(option => {\n      if (!option.selected) {\n        option.toggle();\n      }\n    });\n  }\n/**\n * Deselects all of the options.\n * @return {?}\n */\ndeselectAll() {\n    this.options.forEach(option => {\n      if (option.selected) {\n        option.toggle();\n      }\n    });\n  }\n/**\n * Map all the options' destroy event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onDestroySubscription(): Subscription {\n    return RxChain.from(this.options.changes)\n      .call(startWith, this.options)\n      .call(switchMap, (options: MdListOption[]) => {\n        return merge(...options.map(option => option.destroyed));\n      }).subscribe((e: MdSelectionListOptionEvent) => {\n        let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\n        if (e.option._hasFocus) {\n          // Check whether the option is the last item\n          if (optionIndex < this.options.length - 1) {\n            this._keyManager.setActiveItem(optionIndex);\n          } else if (optionIndex - 1 >= 0) {\n            this._keyManager.setActiveItem(optionIndex - 1);\n          }\n        }\n        e.option.destroyed.unsubscribe();\n      });\n  }\n/**\n * Map all the options' onFocus event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onFocusSubscription(): Subscription {\n    return RxChain.from(this.options.changes)\n      .call(startWith, this.options)\n      .call(switchMap, (options: MdListOption[]) => {\n        return merge(...options.map(option => option.onFocus));\n      }).subscribe((e: MdSelectionListOptionEvent) => {\n      let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\n      this._keyManager.updateActiveItemIndex(optionIndex);\n    });\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Toggles the selected state of the currently focused option.\n * @return {?}\n */\nprivate _toggleSelectOnFocusedOption(): void {\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedOption: MdListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n      }\n    }\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of options.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-selection-list, mat-selection-list',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': '_tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: ContentChildren, args: [MdListOption, ] },],\n};\n}\n\nfunction MdSelectionList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionList.ctorParameters;\n/** @type {?} */\nMdSelectionList.propDecorators;\n/**\n * Tab index for the selection-list.\n * @type {?}\n */\nMdSelectionList.prototype._tabIndex;\n/**\n * Subscription to all list options' onFocus events\n * @type {?}\n */\nMdSelectionList.prototype._optionFocusSubscription;\n/**\n * Subscription to all list options' destroy events\n * @type {?}\n */\nMdSelectionList.prototype._optionDestroyStream;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdSelectionList.prototype._keyManager;\n/**\n * The option components contained within this selection-list.\n * @type {?}\n */\nMdSelectionList.prototype.options;\n/**\n * The currently selected options.\n * @type {?}\n */\nMdSelectionList.prototype.selectedOptions;\n/** @type {?} */\nMdSelectionList.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MdCommonModule,\n  MdLineModule,\n  MdPseudoCheckboxModule,\n  MdRippleModule,\n} from '@angular/material/core';\nimport {\n  MdDividerCssMatStyler,\n  MdList,\n  MdListAvatarCssMatStyler,\n  MdListCssMatStyler,\n  MdListDivider,\n  MdListIconCssMatStyler,\n  MdListItem,\n  MdListSubheaderCssMatStyler,\n  MdNavListCssMatStyler,\n} from './list';\nimport {MdListOption, MdSelectionList} from './selection-list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, MdCommonModule, MdPseudoCheckboxModule, CommonModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    MdCommonModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n    MdPseudoCheckboxModule,\n    MdSelectionList,\n    MdListOption\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n    MdSelectionList,\n    MdListOption\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdListModule,MdListBase,_MdListMixinBase,MdListItemBase,_MdListItemMixinBase,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdSelectionListBase,_MdSelectionListMixinBase,MdListOptionBase,_MdListOptionMixinBase,MdSelectionListOptionEvent,MdListOption,MdSelectionList,MatDividerCssMatStyler,MatList,MatListAvatarCssMatStyler,MatListBase,MatListCssMatStyler,MatListDivider,MatListIconCssMatStyler,MatListItem,MatListItemBase,MatListModule,MatListOption,MatListOptionBase,MatListSubheaderCssMatStyler,MatNavListCssMatStyler,MatSelectionList,MatSelectionListBase,MatSelectionListOptionEvent} from './public_api';\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\n  throw Error(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MdMenuItemBase {}\nexport const /** @type {?} */ _MdMenuItemMixinBase = mixinDisabled(MdMenuItemBase);\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem extends _MdMenuItemMixinBase implements FocusableOption, CanDisable,\n  OnDestroy {\n/**\n * Stream that emits when the menu item is hovered.\n */\nhover: Subject<MdMenuItem> = new Subject();\n/**\n * Whether the menu item is highlighted.\n */\n_highlighted: boolean = false;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n */\n_triggersSubmenu: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.hover.complete();\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n/**\n * Emits to the hover stream.\n * @return {?}\n */\n_emitHoverEvent() {\n    if (!this.disabled) {\n      this.hover.next(this);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  inputs: ['disabled'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem, matMenuItem',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/**\n * Stream that emits when the menu item is hovered.\n * @type {?}\n */\nMdMenuItem.prototype.hover;\n/**\n * Whether the menu item is highlighted.\n * @type {?}\n */\nMdMenuItem.prototype._highlighted;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n * @type {?}\n */\nMdMenuItem.prototype._triggersSubmenu;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('void', style({\n    opacity: 0,\n    // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n    // as of 4.2, which causes the animation to be skipped if it starts from 0.\n    transform: 'scale(0.01, 0.01)'\n  })),\n  state('enter-start', style({\n    opacity: 1,\n    transform: 'scale(1, 0.5)'\n  })),\n  state('enter', style({\n    transform: 'scale(1, 1)'\n  })),\n  transition('void => enter-start', animate('100ms linear')),\n  transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n  ChangeDetectionStrategy,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Observable} from 'rxjs/Observable';\nimport {Direction} from '@angular/cdk/bidi';\nimport {RxChain, startWith, switchMap} from '@angular/cdk/rxjs';\n\n/** Default `md-menu` options that can be overridden. */\nexport interface MdMenuDefaultOptions {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n}\n/**\n * Injection token to be used to override the default options for `md-menu`.\n */\nexport const MD_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MdMenuDefaultOptions>('md-menu-default-options');\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n */\nconst MD_MENU_BASE_ELEVATION = 2;\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager<MdMenuItem>;\nprivate _xPosition: MenuPositionX = this._defaultOptions.xPosition;\nprivate _yPosition: MenuPositionY = this._defaultOptions.yPosition;\nprivate _previousElevation: string;\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Current state of the panel animation.\n */\n_panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n/**\n * Parent menu of the current menu panel.\n */\nparentMenu: MdMenuPanel | undefined;\n/**\n * Layout direction of the menu.\n */\ndirection: Direction;\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = this._defaultOptions.overlapTrigger;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void | 'click' | 'keydown'>();\n/**\n * @param {?} _elementRef\n * @param {?} _defaultOptions\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _defaultOptions: MdMenuDefaultOptions) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MdMenuItem>(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.close.emit();\n    this.close.complete();\n  }\n/**\n * Stream that emits whenever the hovered menu item changes.\n * @return {?}\n */\nhover(): Observable<MdMenuItem> {\n    return RxChain.from(this.items.changes)\n      .call(startWith, this.items)\n      .call(switchMap, (items: MdMenuItem[]) => merge(...items.map(item => item.hover)))\n      .result();\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.close.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.close.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.close.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n/**\n * Sets the menu panel elevation.\n * @param {?} depth Number of parent menus that come before the menu.\n * @return {?}\n */\nsetElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const /** @type {?} */ newElevation = `mat-elevation-z${MD_MENU_BASE_ELEVATION + depth}`;\n    const /** @type {?} */ customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n/**\n * Starts the enter animation.\n * @return {?}\n */\n_startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n/**\n * Resets the panel animation to its initial state.\n * @return {?}\n */\n_resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n/**\n * Callback that is invoked when the panel animation completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu, matMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_DEFAULT_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/** @type {?} */\nMdMenu.prototype._previousElevation;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/**\n * Current state of the panel animation.\n * @type {?}\n */\nMdMenu.prototype._panelAnimationState;\n/**\n * Parent menu of the current menu panel.\n * @type {?}\n */\nMdMenu.prototype.parentMenu;\n/**\n * Layout direction of the menu.\n * @type {?}\n */\nMdMenu.prototype.direction;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n/** @type {?} */\nMdMenu.prototype._defaultOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: any): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar], [mdGridAvatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdGridList} from './grid-list';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] | null { return null; }\n/**\n * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n * \\@docs-private\n * @abstract\n * @param {?} list Grid list that the styler was attached to.\n * @return {?}\n */\nreset(list: MdGridList) {}\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    const /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Directionality) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    const /** @type {?} */ newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`md-grid-list: must pass in number of columns. ` +\n                  `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @param {?} rowHeight\n * @return {?}\n */\nprivate _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    const /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    const /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdCommonModule} from '@angular/material/core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdCommonModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    MdCommonModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdGridTile,MdGridListModule,MdGridList,MatGridList,MatGridListModule,MatGridTile} from './public_api';\n\nexport {MdGridAvatarCssMatStyler as ɵb,MdGridTileFooterCssMatStyler as ɵd,MdGridTileHeaderCssMatStyler as ɵc,MdGridTileText as ɵa} from './grid-tile';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Platform, getSupportedInputTypes} from '@angular/cdk/platform';\nimport {getMdInputUnsupportedTypeError} from './input-errors';\nimport {\n  defaultErrorStateMatcher,\n  ErrorOptions,\n  ErrorStateMatcher,\n  MD_ERROR_GLOBAL_OPTIONS\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MdFormFieldControl} from '@angular/material/form-field';\n\n// Invalid input type. Using one of these will throw an MdInputUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Directive that allows a native input to work inside a `MdFormField`.\n */\nexport class MdInput implements MdFormFieldControl<any>, OnChanges, OnDestroy, DoCheck {\n/**\n * Variables used as cache for getters and setters.\n */\nprotected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `md-input-${nextUniqueId++}`;\n  protected _errorOptions: ErrorOptions;\n  protected _previousNativeValue = this.value;\n/**\n * Whether the input is focused.\n */\nfocused = false;\n/**\n * Whether the input is in an error state.\n */\nerrorState = false;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) { this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n */\nplaceholder: string = '';\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * A function used to control when error messages are shown.\n */\nerrorStateMatcher: ErrorStateMatcher;\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) {\n    if (value !== this.value) {\n      this._elementRef.nativeElement.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} errorOptions\n */\nconstructor(protected _elementRef: ElementRef,\n              protected _renderer: Renderer2,\n              protected _platform: Platform,\npublic ngControl: NgControl,\n               protected _parentForm: NgForm,\n               protected _parentFormGroup: FormGroupDirective,\n                errorOptions: ErrorOptions) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n    this._errorOptions = errorOptions ? errorOptions : {};\n    this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnChanges() {\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.stateChanges.complete();\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this._updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n/**\n * Callback for the cases where the focused state of the input changes.\n * @param {?} isFocused\n * @return {?}\n */\n_focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Re-evaluates the error state. This is only relevant with \\@angular/forms.\n * @return {?}\n */\nprotected _updateErrorState() {\n    const /** @type {?} */ oldState = this.errorState;\n    const /** @type {?} */ ngControl = this.ngControl;\n    const /** @type {?} */ parent = this._parentFormGroup || this._parentForm;\n    const /** @type {?} */ newState = ngControl && this.errorStateMatcher( /** @type {?} */((ngControl.control as FormControl)), parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Does some manual dirty checking on the native input `value` property.\n * @return {?}\n */\nprotected _dirtyCheckNativeValue() {\n    const /** @type {?} */ newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprotected _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMdInputUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * Checks whether the input type is one of the types that are never empty.\n * @return {?}\n */\nprotected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n/**\n * Checks whether the input is invalid based on the native validation.\n * @return {?}\n */\nprotected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let /** @type {?} */ validity = ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity;\n    return validity && validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprotected _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n/**\n * @return {?}\n */\nget empty(): boolean {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    'class': 'mat-input-element',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MdFormFieldControl, useExisting: MdInput}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'errorStateMatcher': [{ type: Input },],\n};\n}\n\nfunction MdInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInput.ctorParameters;\n/** @type {?} */\nMdInput.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInput.prototype._type;\n/** @type {?} */\nMdInput.prototype._disabled;\n/** @type {?} */\nMdInput.prototype._required;\n/** @type {?} */\nMdInput.prototype._id;\n/** @type {?} */\nMdInput.prototype._uid;\n/** @type {?} */\nMdInput.prototype._errorOptions;\n/** @type {?} */\nMdInput.prototype._previousNativeValue;\n/**\n * Whether the input is focused.\n * @type {?}\n */\nMdInput.prototype.focused;\n/**\n * Whether the input is in an error state.\n * @type {?}\n */\nMdInput.prototype.errorState;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInput.prototype._ariaDescribedby;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdInput.prototype.stateChanges;\n/**\n * Placeholder attribute of the element.\n * @type {?}\n */\nMdInput.prototype.placeholder;\n/**\n * A function used to control when error messages are shown.\n * @type {?}\n */\nMdInput.prototype.errorStateMatcher;\n/** @type {?} */\nMdInput.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInput.prototype._elementRef;\n/** @type {?} */\nMdInput.prototype._renderer;\n/** @type {?} */\nMdInput.prototype._platform;\n/** @type {?} */\nMdInput.prototype.ngControl;\n/** @type {?} */\nMdInput.prototype._parentForm;\n/** @type {?} */\nMdInput.prototype._parentFormGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit, DoCheck} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit, DoCheck {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} _platform\n */\nconstructor(private _elementRef: ElementRef,\nprivate _platform: Platform) {}\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._cacheTextareaLineHeight();\n      this.resizeToFitContent();\n    }\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden'; /** @type {?} */((\n\n    textarea.parentNode)).appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\n    textarea.parentNode)).removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    this.resizeToFitContent();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    const /** @type {?} */ value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue) {\n      return;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n\n    this._previousValue = value;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `textarea[md-autosize], textarea[mdTextareaAutosize],\n             textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'mdTextareaAutosize, matTextareaAutosize',\n  host: {\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Platform, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMinRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMdTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n/** @type {?} */\nMdTextareaAutosize.prototype._platform;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdInput} from './input';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '@angular/material/core';\nimport {MdFormFieldModule} from '@angular/material/form-field';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdInput,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MdFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MdFormFieldModule` since `MdInput` will almost always be used together with\n    // `MdFormField`.\n    MdFormFieldModule,\n    MdInput,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdInputModule,MdTextareaAutosize,MdInput,getMdInputUnsupportedTypeError,MatInput,MatInputModule,MatTextareaAutosize} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MdDialog, MdDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MdDatepickerInput} from './datepicker-input';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MdCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\n  datepicker: MdDatepicker<D>;\n\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-content, mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D | null) { this._startAt = date; }\nprivate _startAt: D | null;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Whether the datepicker pop-up should be disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this._datepickerInput.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\nprivate _disabled: boolean;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n * @return {?}\n */\nget _selected(): D | null { return this._validSelected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _selected(value: D | null) { this._validSelected = value; }\nprivate _validSelected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription = Subscription.EMPTY;\n/**\n * The input element this datepicker is associated with.\n */\n_datepickerInput: MdDatepickerInput<D>;\n/**\n * Emits when the datepicker is disabled.\n */\n_disabledChange = new Subject<boolean>();\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n/**\n * Selects the given date\n * @param {?} date\n * @return {?}\n */\n_select(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('An MdDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n\n      this._focusedElementBeforeOpen.focus();\n      this._focusedElementBeforeOpen = null;\n    }\n\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MdDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayState = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'md-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._popupRef = this._overlay.create(overlayState);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker, mat-datepicker',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DATEPICKER_SCROLL_STRATEGY, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/** @type {?} */\nMdDatepicker.prototype._disabled;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/** @type {?} */\nMdDatepicker.prototype._validSelected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMdDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/**\n * Emits when the datepicker is disabled.\n * @type {?}\n */\nMdDatepicker.prototype._disabledChange;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._scrollStrategy;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n/** @type {?} */\nMdDatepicker.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\nimport {MdFormField} from '@angular/material/form-field';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MdDatepickerInputEvent instead.\n */\nexport class MdDatepickerInputEvent<D> {\n/**\n * The new value for the target datepicker input.\n */\nvalue: D | null;\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nconstructor(public target: MdDatepickerInput<D>,\npublic targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\nfunction MdDatepickerInputEvent_tsickle_Closure_declarations() {\n/**\n * The new value for the target datepicker input.\n * @type {?}\n */\nMdDatepickerInputEvent.prototype.value;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.target;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.targetElement;\n}\n\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nprivate registerDatepicker(value: MdDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) {\n    // Note that we don't set `this.mdDatepicker = value` here,\n    // because that line gets stripped by the JS compiler.\n    this.registerDatepicker(value);\n  }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this.mdDatepickerFilter = filter;\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\n    if (value != null && !this._dateAdapter.isDateInstance(value)) {\n      throw Error('Datepicker: value not recognized as a date object by DateAdapter.');\n    }\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n\n    let /** @type {?} */ oldDate = this.value;\n    this._value = value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\nprivate _value: D | null;\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D | null { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D | null) {\n    this._min = value;\n    this._validatorOnChange();\n  }\nprivate _min: D | null;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D | null { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D | null) {\n    this._max = value;\n    this._validatorOnChange();\n  }\nprivate _max: D | null;\n/**\n * Whether the datepicker-input is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\nprivate _disabled: boolean;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n */\ndateChange = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when an `input` event is fired on this `<input>`.\n */\ndateInput = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n/**\n * Emits when the disabled state has changed\n */\n_disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription = Subscription.EMPTY;\nprivate _localeSubscription = Subscription.EMPTY;\n/**\n * The form control validator for whether the input parses.\n */\nprivate _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'mdDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.min || !control.value ||\n        this._dateAdapter.compareDate(this.min, control.value) <= 0) ?\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': control.value}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.max || !control.value ||\n        this._dateAdapter.compareDate(this.max, control.value) >= 0) ?\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': control.value}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return !this._dateFilter || !control.value || this._dateFilter(control.value) ?\n        null : {'mdDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * Whether the last value set on the input was valid.\n */\nprivate _lastValueValid = false;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdFormField\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdFormField: MdFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._mdFormField ? this._mdFormField.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @return {?}\n */\n_onChange() {\n    this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @param {?} obj The object to check.\n * @return {?} The given object if it is both a date instance and valid, otherwise null.\n */\nprivate _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdDatepicker], input[matDatepicker]',\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.getISODateString(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.getISODateString(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'mdDatepickerInput, matDatepickerInput',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'disabled': [{ type: Input },],\n'dateChange': [{ type: Output },],\n'dateInput': [{ type: Output },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._value;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/** @type {?} */\nMdDatepickerInput.prototype._disabled;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateChange;\n/**\n * Emits when an `input` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateInput;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/**\n * Emits when the disabled state has changed\n * @type {?}\n */\nMdDatepickerInput.prototype._disabledChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/** @type {?} */\nMdDatepickerInput.prototype._localeSubscription;\n/**\n * The form control validator for whether the input parses.\n * @type {?}\n */\nMdDatepickerInput.prototype._parseValidator;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/**\n * Whether the last value set on the input was valid.\n * @type {?}\n */\nMdDatepickerInput.prototype._lastValueValid;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdFormField;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ViewEncapsulation,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nexport class MdDatepickerToggle<D> implements OnChanges, OnDestroy {\nprivate _stateChanges = Subscription.EMPTY;\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * Whether the toggle button is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this.datepicker.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\nprivate _disabled: boolean;\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic _intl: MdDatepickerIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      const /** @type {?} */ datepicker: MdDatepicker<D> = changes.datepicker.currentValue;\n      const /** @type {?} */ datepickerDisabled = datepicker ? datepicker._disabledChange : observableOf();\n      const /** @type {?} */ inputDisabled = datepicker && datepicker._datepickerInput ?\n        datepicker._datepickerInput._disabledChange :\n        observableOf();\n\n      this._stateChanges.unsubscribe();\n      this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-toggle, mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['for', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/** @type {?} */\nMdDatepickerToggle.prototype._stateChanges;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._disabled;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n/** @type {?} */\nMdDatepickerToggle.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const /** @type {?} */ selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const /** @type {?} */ selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const /** @type {?} */ selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this.userSelection.emit();\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D): number | null {\n    return this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D, d2: D): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdMonthView.prototype.userSelection;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MdCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-year-view, mat-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MdButtonModule} from '@angular/material/button';\nimport {MdDialogModule} from '@angular/material/dialog';\nimport {MdIconModule} from '@angular/material/icon';\nimport {MdCalendar} from './calendar';\nimport {MdCalendarBody} from './calendar-body';\nimport {\n  MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MdDatepicker,\n  MdDatepickerContent,\n} from './datepicker';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {MdDatepickerToggle} from './datepicker-toggle';\nimport {MdMonthView} from './month-view';\nimport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdDialogModule,\n    MdIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  declarations: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  providers: [\n    MdDatepickerIntl,\n    MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MdDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdDatepickerModule,MdCalendar,MdCalendarCell,MdCalendarBody,MD_DATEPICKER_SCROLL_STRATEGY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,MdDatepickerContent,MdDatepicker,MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInputEvent,MdDatepickerInput,MdDatepickerIntl,MdDatepickerToggle,MdMonthView,MdYearView,MAT_DATEPICKER_SCROLL_STRATEGY,MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_DATEPICKER_VALIDATORS,MAT_DATEPICKER_VALUE_ACCESSOR,MatCalendar,MatCalendarBody,MatCalendarCell,MatDatepicker,MatDatepickerContent,MatDatepickerInput,MatDatepickerInputEvent,MatDatepickerIntl,MatDatepickerModule,MatDatepickerToggle,MatMonthView,MatYearView} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** MdAccordion's display modes. */\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-accordion, [cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion, md-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Output,\n  EventEmitter,\n  Input,\n  Injectable,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the AccordionItem is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the AccordionItem is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the AccordionItem is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique AccordionItem id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the AccordionItem is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n * the name value is the id of the accordion.\n */\nconst accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\nprivate _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n  }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the AccordionItem is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the AccordionItem is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the AccordionItem is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique AccordionItem id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._changeDetectorRef;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled, UniqueSelectionDispatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MdAccordion} from './accordion';\nimport {AccordionItem} from './accordion-item';\n/**\n * \\@docs-private\n */\nexport class MdExpansionPanelBase extends AccordionItem {\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(accordion: MdAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const /** @type {?} */ _MdExpansionPanelMixinBase = mixinDisabled(MdExpansionPanelBase);\n\n/** MdExpansionPanel's states. */\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends _MdExpansionPanelMixinBase\n    implements CanDisable, OnChanges, OnDestroy {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n */\n_inputChanges = new Subject<SimpleChanges>();\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Determines whether the expansion panel should have spacing between it and its siblings.\n * @return {?}\n */\n_hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._inputChanges.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'md-expansion-panel, mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n * @type {?}\n */\nMdExpansionPanel.prototype._inputChanges;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row, md-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  Input,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {SPACE, ENTER} from '@angular/material/core';\nimport {MdExpansionPanel, EXPANSION_PANEL_ANIMATION_TIMING} from './expansion-panel';\nimport {filter} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * <md-expansion-panel-header> component.\n * \n * This component corresponds to the header element of an <md-expansion-panel>.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader implements OnDestroy {\nprivate _parentChangeSubscription = Subscription.EMPTY;\n/**\n * @param {?} renderer\n * @param {?} panel\n * @param {?} _element\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(\n    renderer: Renderer2,\npublic panel: MdExpansionPanel,\nprivate _element: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      filter.call(panel._inputChanges, changes => !!(changes.hideToggle || changes.disabled))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement, renderer, false);\n  }\n/**\n * Height of the header while the panel is expanded.\n */\nexpandedHeight: string;\n/**\n * Height of the header while the panel is collapsed.\n */\ncollapsedHeight: string;\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\n    return this.panel.id;\n  }\n/**\n * Gets whether the expand indicator should be shown.\n * @return {?}\n */\n_showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({\n        height: '{{collapsedHeight}}',\n      }), {\n        params: {collapsedHeight: '48px'},\n      }),\n      state('expanded', style({\n        height: '{{expandedHeight}}'\n      }), {\n        params: {expandedHeight: '64px'}\n      }),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'expandedHeight': [{ type: Input },],\n'collapsedHeight': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.propDecorators;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._parentChangeSubscription;\n/**\n * Height of the header while the panel is expanded.\n * @type {?}\n */\nMdExpansionPanelHeader.prototype.expandedHeight;\n/**\n * Height of the header while the panel is collapsed.\n * @type {?}\n */\nMdExpansionPanelHeader.prototype.collapsedHeight;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._element;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._focusMonitor;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._changeDetectorRef;\n}\n\n/**\n * <md-panel-description> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-description, mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-title, mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CompatibilityModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CdkAccordion, MdAccordion} from './accordion';\nimport {MdExpansionPanel, MdExpansionPanelActionRow} from './expansion-panel';\nimport {\n  MdExpansionPanelDescription,\n  MdExpansionPanelHeader,\n  MdExpansionPanelTitle,\n} from './expansion-panel-header';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, CommonModule, A11yModule],\n  exports: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  declarations: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdExpansionModule,MatAccordion,MatAccordionDisplayMode,MatExpansionModule,MatExpansionPanel,MatExpansionPanelActionRow,MatExpansionPanelDescription,MatExpansionPanelHeader,MatExpansionPanelState,MatExpansionPanelTitle} from './public_api';\n\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵc,MdExpansionPanelBase as ɵa,_MdExpansionPanelMixinBase as ɵb} from './expansion-panel';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {filter, first, RxChain} from '@angular/cdk/rxjs';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n */\nprivate _afterOpen = new Subject<void>();\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed = new Subject<any>();\n/**\n * Subject for notifying the user that the dialog has started closing.\n */\nprivate _beforeClose = new Subject<any>();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer,\npublic readonly id: string = `md-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'enter')\n      .call(first)\n      .subscribe(() => {\n        this._afterOpen.next();\n        this._afterOpen.complete();\n      });\n\n    // Dispose overlay when closing animation is complete\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\n      .call(first)\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    RxChain.from(this._containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'start')\n      .call(first)\n      .subscribe(() => {\n        this._beforeClose.next(dialogResult);\n        this._beforeClose.complete();\n        this._overlayRef.detachBackdrop();\n      });\n\n    this._containerInstance._startExitAnimation();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished opening.\n * @return {?}\n */\nafterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog has started closing.\n * @return {?}\n */\nbeforeClose(): Observable<any> {\n    return this._beforeClose.asObservable();\n  }\n/**\n * Gets an observable that emits when the overlay's backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\n    return this._containerInstance._isAnimating;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n * @type {?}\n */\nMdDialogRef.prototype._afterOpen;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the dialog has started closing.\n * @type {?}\n */\nMdDialogRef.prototype._beforeClose;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n/** @type {?} */\nMdDialogRef.prototype.id;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {extendObject, PortalInjector} from '@angular/material/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogContainer} from './dialog-container';\nimport {MdDialogRef} from './dialog-ref';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MD_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n */\nexport const MD_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\n    const /** @type {?} */ parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} location\n * @param {?} _scrollStrategy\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\n       location: Location,\nprivate _scrollStrategy,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\n\n    // If there's a dialog that is in the process of being opened, return it instead.\n    if (inProgressDialog) {\n      return inProgressDialog;\n    }\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this.openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n/**\n * Finds an open dialog by its id.\n * @param {?} id ID to use when looking up the dialog.\n * @return {?}\n */\ngetDialogById(id: string): MdDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    const /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayConfig {\n    const /** @type {?} */ state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, /** @type {?} */(( null)), /** @type {?} */((\n          <any>{ $implicit: config.data, dialogRef }))));\n    } else {\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MdDialogConfig,\n      dialogRef: MdDialogRef<T>,\n      dialogContainer: MdDialogContainer): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdDialogRef, dialogRef);\n    injectionTokens.set(MdDialogContainer, dialogContainer);\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this.openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._scrollStrategy;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n\n   _matDialogClose: any;\n   _mdDialogClose: any;\n   _matDialogCloseResult: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._mdDialogClose ||\n        changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `button[md-dialog-close], button[mat-dialog-close],\n             button[mdDialogClose], button[matDialogClose]`,\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n'_mdDialogClose': [{ type: Input, args: ['mdDialogClose', ] },],\n'_matDialogCloseResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._mdDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._matDialogCloseResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,\n             [mdDialogContent], [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,\n             [mdDialogActions], [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdDialog, MD_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MdCommonModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n    MD_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdDialogModule,MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MAT_DIALOG_DATA,MAT_DIALOG_SCROLL_STRATEGY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MatDialog,MatDialogActions,MatDialogClose,MatDialogConfig,MatDialogContainer,MatDialogContent,MatDialogModule,MatDialogRef,MatDialogTitle} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {\n  catchOperator,\n  doOperator,\n  finallyOperator,\n  map,\n  RxChain,\n  share,\n} from '@angular/material/core';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<md-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMdIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MdIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMdIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMdIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {MdIconRegistry} from './icon-registry';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {first} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return /** @type {?} */(( <[string, string]>parts));\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        first.call(this._mdIconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._renderer.appendChild(this._elementRef.nativeElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _clearSvgElement() {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MdIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdIcon, MdCommonModule],\n  declarations: [MdIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MatIcon,MatIconBase,MatIconModule,MatIconRegistry} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdDatepickerIntl.prototype.changes;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MATERIAL_COMPATIBILITY_MODE,\n  MD_DATE_FORMATS,\n  MdDateFormats,\n} from '@angular/material/core';\nimport {first} from 'rxjs/operator/first';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MdDatepickerIntl} from './datepicker-intl';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit, OnDestroy {\nprivate _intlChanges: Subscription;\n/**\n * A date representing the period (month or year) to start the calendar in.\n */\nstartAt: D;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n */\nselected: D | null;\n/**\n * The minimum selectable date.\n */\nminDate: D | null;\n/**\n * The maximum selectable date.\n */\nmaxDate: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _isCompatibilityMode\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} changeDetectorRef\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\npublic _isCompatibilityMode: boolean,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * @return {?}\n */\n_userSelected(): void {\n    this.userSelection.emit();\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-calendar, mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/** @type {?} */\nMdCalendar.prototype._intlChanges;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @type {?}\n */\nMdCalendar.prototype.startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdCalendar.prototype.selected;\n/**\n * The minimum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.minDate;\n/**\n * The maximum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdCalendar.prototype.userSelection;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._isCompatibilityMode;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n */\ncellAspectRatio = 1;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-calendar-body], [mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'cellAspectRatio': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n * @type {?}\n */\nMdCalendarBody.prototype.cellAspectRatio;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MdRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleRef,\n} from '@angular/material/core';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdCheckboxMixinBase =\n  mixinColor(mixinDisableRipple(mixinDisabled(MdCheckboxBase)), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase implements ControlValueAccessor, AfterViewInit,\n    OnDestroy, CanColor, CanDisable, CanDisableRipple {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\nprivate _uniqueId: string = `md-checkbox-${++nextUniqueId}`;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/** @type {?} */\nMdCheckbox.prototype._uniqueId;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const /** @type {?} */ _MdCheckboxRequiredValidator = CheckboxRequiredValidator;\n\nexport const /** @type {?} */ MD_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdCheckboxRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `md-checkbox`.\n */\nexport class MdCheckboxRequiredValidator extends _MdCheckboxRequiredValidator {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-checkbox[required][formControlName],\n             mat-checkbox[required][formControlName],\n             md-checkbox[required][formControl], md-checkbox[required][ngModel],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MD_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxRequiredValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MdRippleModule, MdCommonModule} from '@angular/material/core';\nimport {MdCheckbox} from './checkbox';\nimport {MdCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserversModule, A11yModule],\n  exports: [MdCheckbox, MdCheckboxRequiredValidator, MdCommonModule],\n  declarations: [MdCheckbox, MdCheckboxRequiredValidator],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,MdCheckboxModule,_MdCheckboxRequiredValidator,MD_CHECKBOX_REQUIRED_VALIDATOR,MdCheckboxRequiredValidator,MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR,MAT_CHECKBOX_REQUIRED_VALIDATOR,MatCheckbox,MatCheckboxBase,MatCheckboxChange,MatCheckboxModule,MatCheckboxRequiredValidator} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport {\n  BACKSPACE,\n  CanColor,\n  CanDisable,\n  DELETE,\n  mixinColor,\n  mixinDisabled,\n  SPACE,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * Event object emitted by MdChip when selected or deselected.\n */\nexport class MdChipSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdChip,\npublic isUserInput = false) { }\n}\n\nfunction MdChipSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipSelectionChange.prototype.source;\n/** @type {?} */\nMdChipSelectionChange.prototype.isUserInput;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n  CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.onSelectionChange.emit({source: this, isUserInput: false});\n  }\n/**\n * The value of the chip. Defaults to the content inside <md-chip> tags.\n * @return {?}\n */\nget value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) { this._value = newValue; }\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\n * changes to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean { return this._removable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) { this._removable = coerceBooleanProperty(value); }\n/**\n * Emits when the chip is focused.\n */\n_onFocus = new Subject<MdChipEvent>();\n/**\n * Emits when the chip is blured.\n */\n_onBlur = new Subject<MdChipEvent>();\n/**\n * Emitted when the chip is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdChipSelectionChange>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when a chip is to be removed.\n */\nonRemove = new EventEmitter<MdChipEvent>();\n/**\n * @return {?}\n */\nget ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n */\nconstructor(renderer: Renderer2,\npublic _elementRef: ElementRef) {\n    super(renderer, _elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Selects the chip.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this.onSelectionChange.emit({source: this, isUserInput: false});\n  }\n/**\n * Deselects the chip.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this.onSelectionChange.emit({source: this, isUserInput: false});\n  }\n/**\n * Select this chip and emit selected event\n * @return {?}\n */\nselectViaInteraction() {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.onSelectionChange.emit({source: this, isUserInput: true});\n  }\n/**\n * Toggles the current selected state of this chip.\n * @param {?=} isUserInput\n * @return {?}\n */\ntoggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this.onSelectionChange.emit({source: this, isUserInput});\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\n * BACKSPACE keys are pressed.\n * \n * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\n    if (this.removable) {\n      this.onRemove.emit({chip: this});\n    }\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n/**\n * @return {?}\n */\n_blur() {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'mdChip, matChip',\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'value': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n'destroy': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._value;\n/** @type {?} */\nMdChip.prototype._selected;\n/** @type {?} */\nMdChip.prototype._selectable;\n/** @type {?} */\nMdChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emits when the chip is focused.\n * @type {?}\n */\nMdChip.prototype._onFocus;\n/**\n * Emits when the chip is blured.\n * @type {?}\n */\nMdChip.prototype._onBlur;\n/**\n * Emitted when the chip is selected or deselected.\n * @type {?}\n */\nMdChip.prototype.onSelectionChange;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n/** @type {?} */\nMdChip.prototype._elementRef;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n * \n * Example:\n * \n *     <md-chip>\n *       <md-icon mdChipRemove>cancel</md-icon>\n *     </md-chip>\n * \n * You *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\n * to properly center the icon within the chip.\n */\nexport class MdChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MdChip) {}\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick() {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdChipRemove], [matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  BACKSPACE,\n  DELETE,\n  Directionality,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '@angular/material/core';\nimport {MdFormFieldControl} from '@angular/material/form-field';\n\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {MdChip, MdChipEvent, MdChipSelectionChange} from './chip';\nimport {MdChipInput} from './chip-input';\n\n// Increasing integer for generating unique ids for chip-list components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nexport class MdChipListChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdChipList,\npublic value: any) { }\n}\n\nfunction MdChipListChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipListChange.prototype.source;\n/** @type {?} */\nMdChipListChange.prototype.value;\n}\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport class MdChipList implements MdFormFieldControl<any>, ControlValueAccessor,\n    AfterContentInit, OnInit, OnDestroy {\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _lastDestroyedIndex: number|null = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _chipSet: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the chip list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to focus changes in the chips.\n */\nprivate _chipFocusSubscription: Subscription|null;\n/**\n * Subscription to blur changes in the chips.\n */\nprivate _chipBlurSubscription: Subscription|null;\n/**\n * Subscription to selection changes in chips.\n */\nprivate _chipSelectionSubscription: Subscription|null;\n/**\n * Subscription to remove changes in chips.\n */\nprivate _chipRemoveSubscription: Subscription|null;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * The chip input to add more chips\n */\nprotected _chipInput: MdChipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n */\nprotected _ariaDescribedby: string;\n/**\n * Id of the chip list\n */\nprotected _id: string;\n/**\n * Uid of the chip list\n */\nprotected _uid: string = `md-chip-list-${nextUniqueId++}`;\n/**\n * Whether this is required\n */\nprotected _required: boolean = false;\n/**\n * Whether this is disabled\n */\nprotected _disabled: boolean = false;\n\n  protected _value: any;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n */\nprotected _placeholder: string;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n */\n_userTabIndex: number | null = null;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdChip>;\n/**\n * Function when touched\n */\n_onTouched = () => {};\n/**\n * Function when changed\n */\n_onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MdChip>;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * The array of selected chips inside chip list.\n * @return {?}\n */\nget selected(): MdChip[] | MdChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * Whether the user should be allowed to select multiple chips.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\n * is a value from an option. The second is a value from the selection. A boolean\n * should be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n/**\n * Required for FormFieldControl\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n/**\n * Required for FormFieldControl. The ID of the chip list\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget id() { return this._id || this._uid; }\n/**\n * Required for FormFieldControl. Whether the chip list is required.\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget required() {\n    return this._required;\n  }\n/**\n * For FormFieldControl. Use chip input's placholder if there's a chip input\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n/**\n * Whether any chips or the mdChipInput inside of this chip-list has focus.\n * @return {?}\n */\nget focused() {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n/**\n * Whether this chip-list contains no chips and no mdChipInput.\n * @return {?}\n */\nget empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n/**\n * Whether this chip-list is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the chip list is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n      (this._parentForm && this._parentForm.submitted);\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Orientation of the chip list.\n */\nariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * its selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n/**\n * Combined stream of all of the child chips' selection change events.\n * @return {?}\n */\nget chipSelectionChanges(): Observable<MdChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.onSelectionChange));\n  }\n/**\n * Combined stream of all of the child chips' focus change events.\n * @return {?}\n */\nget chipFocusChanges(): Observable<MdChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n/**\n * Combined stream of all of the child chips' blur change events.\n * @return {?}\n */\nget chipBlurChanges(): Observable<MdChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n/**\n * Combined stream of all of the child chips' remove change events.\n * @return {?}\n */\nget chipRemoveChanges(): Observable<MdChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n */\nchange: EventEmitter<MdChipListChange> = new EventEmitter<MdChipListChange>();\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nconstructor(protected _renderer: Renderer2,\n              protected _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic ngControl: NgControl) {\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MdChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = startWith.call(this.chips.changes, null).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n  }\n/**\n * Associates an HTML input element with this chip list.\n * @param {?} inputElement\n * @return {?}\n */\nregisterInput(inputElement: MdChipInput) {\n    this._chipInput = inputElement;\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n    this.stateChanges.next();\n  }\n/**\n * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n * are no eligible chips.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\n_focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ code = event.keyCode;\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n    let /** @type {?} */ isInputEmpty = this._isInputEmpty(target);\n    let /** @type {?} */ isRtl = this._dir && this._dir.value == 'rtl';\n\n    let /** @type {?} */ isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let /** @type {?} */ isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let /** @type {?} */ isBackKey = (code === BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n/**\n * Update key manager's active item when chip is deleted.\n * If the deleted chip is the last chip in chip list, focus the new last chip.\n * Otherwise focus the next chip in the list.\n * Save `_lastDestroyedIndex` so we can set the correct focus.\n * @param {?} chip\n * @return {?}\n */\nprotected _updateKeyManager(chip: MdChip) {\n    let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n * one.\n * @return {?}\n */\nprotected _updateFocusForDestroyedChips() {\n    let /** @type {?} */ chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let /** @type {?} */ focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    } else if (chipsArray.length === 0) {\n      this._focusInput();\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\n\n      return !input.value;\n    }\n\n    return false;\n  }\n/**\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\n_setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        this._keyManager.setActiveItem(this.chips.toArray().indexOf(correspondingChip));\n      }\n    }\n  }\n/**\n * Finds and selects the chip based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Chip that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput: boolean = true): MdChip | undefined {\n\n    const /** @type {?} */ correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n      this.stateChanges.next();\n    });\n  }\n/**\n * Deselects every chip in the list.\n * @param {?=} skip Chip that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MdChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * When blurred, mark the field as touched when focus moved outside the chip list.\n * @return {?}\n */\n_blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n/**\n * Mark the field as touched\n * @return {?}\n */\n_markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nprivate _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n/**\n * @return {?}\n */\nprivate _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n/**\n * @return {?}\n */\nprivate _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'mdChipList, matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    'role': 'listbox',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MdFormFieldControl, useExisting: MdChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'ariaOrientation': [{ type: Input, args: ['aria-orientation', ] },],\n'selectable': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n'chips': [{ type: ContentChildren, args: [MdChip, ] },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdChipList.prototype.stateChanges;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMdChipList.prototype._lastDestroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._chipSet;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Subscription to changes in the chip list.\n * @type {?}\n */\nMdChipList.prototype._changeSubscription;\n/**\n * Subscription to focus changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipFocusSubscription;\n/**\n * Subscription to blur changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipBlurSubscription;\n/**\n * Subscription to selection changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipSelectionSubscription;\n/**\n * Subscription to remove changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipRemoveSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdChipList.prototype._multiple;\n/**\n * The chip input to add more chips\n * @type {?}\n */\nMdChipList.prototype._chipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n * @type {?}\n */\nMdChipList.prototype._ariaDescribedby;\n/**\n * Id of the chip list\n * @type {?}\n */\nMdChipList.prototype._id;\n/**\n * Uid of the chip list\n * @type {?}\n */\nMdChipList.prototype._uid;\n/**\n * Whether this is required\n * @type {?}\n */\nMdChipList.prototype._required;\n/**\n * Whether this is disabled\n * @type {?}\n */\nMdChipList.prototype._disabled;\n/** @type {?} */\nMdChipList.prototype._value;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n * @type {?}\n */\nMdChipList.prototype._placeholder;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n * @type {?}\n */\nMdChipList.prototype._userTabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * Function when touched\n * @type {?}\n */\nMdChipList.prototype._onTouched;\n/**\n * Function when changed\n * @type {?}\n */\nMdChipList.prototype._onChange;\n/** @type {?} */\nMdChipList.prototype._selectionModel;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdChipList.prototype._compareWith;\n/**\n * Orientation of the chip list.\n * @type {?}\n */\nMdChipList.prototype.ariaOrientation;\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n * @type {?}\n */\nMdChipList.prototype.change;\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMdChipList.prototype.valueChange;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._renderer;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n/** @type {?} */\nMdChipList.prototype._changeDetectorRef;\n/** @type {?} */\nMdChipList.prototype._dir;\n/** @type {?} */\nMdChipList.prototype._parentForm;\n/** @type {?} */\nMdChipList.prototype._parentFormGroup;\n/** @type {?} */\nMdChipList.prototype.ngControl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Output,\n  EventEmitter,\n  Input,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/material/core';\nimport {MdChipList} from './chip-list';\n\nexport interface MdChipInputEvent {\n  input: HTMLInputElement;\n  value: string;\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside <md-form-field>.\n * May be placed inside or outside of an <md-chip-list>.\n */\nexport class MdChipInput {\n  focused: boolean = false;\n  _chipList: MdChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MdChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MdChipInputEvent>();\n\n   _matChipInputTokenEnd = this.chipEnd;\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MdChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\n\n   placeholder: string = '';\n/**\n * @return {?}\n */\nget empty(): boolean {\n    let /** @type {?} */ value: string | null = this._inputElement.value;\n    return value == null || value === '';\n  }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n/**\n * @return {?}\n */\n_focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nfocus() { this._inputElement.focus(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdChipInputFor], input[matChipInputFor]',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['mdChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['mdChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['mdChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['mdChipInputTokenEnd', ] },],\n'_matChipInputTokenEnd': [{ type: Output, args: ['matChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n'placeholder': [{ type: Input },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/** @type {?} */\nMdChipInput.prototype.focused;\n/** @type {?} */\nMdChipInput.prototype._chipList;\n/** @type {?} */\nMdChipInput.prototype._addOnBlur;\n/** @type {?} */\nMdChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipEnd;\n/** @type {?} */\nMdChipInput.prototype._matChipInputTokenEnd;\n/** @type {?} */\nMdChipInput.prototype.placeholder;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdBasicChip, MdChip, MdChipRemove} from './chip';\nimport {MdChipInput} from './chip-input';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdChipInput, MdChipRemove, MdChipRemove, MdBasicChip],\n  declarations: [MdChipList, MdChip, MdChipInput, MdChipRemove,  MdChipRemove, MdBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdChipsModule,MdChipListChange,MdChipList,MdChipEvent,MdChipSelectionChange,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove,MdChipInputEvent,MdChipInput,MatBasicChip,MatChip,MatChipBase,MatChipEvent,MatChipInput,MatChipInputEvent,MatChipListChange,MatChipList,MatChipRemove,MatChipsModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\n\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMdDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.ariaDescribedBy;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MdDialogConfig} from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @template C\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If we didn't find any focusable elements inside the dialog, focus the\n      // container so the user can't tab into other elements behind it.\n      if (!hasMovedFocus) {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n    this._isAnimating = false;\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n    this._animationStateChanged.emit(event);\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMdDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMdDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMdDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdDialogContainer.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MdMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonBase.prototype._renderer;\n/** @type {?} */\nMdButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MdButtonBase)));\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor) {\n    super(renderer, elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `button[md-button], button[md-raised-button], button[md-icon-button],\n             button[md-fab], button[md-mini-fab],\n             button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusMonitor, },\n];\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} platform\n * @param {?} focusMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusMonitor);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, MdRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MdAnchor,\n  MdButton,\n  MdMiniFab,\n  MdButtonCssMatStyler,\n  MdFab,\n  MdIconButtonCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdCommonModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MatButton,MatButtonBase,MatButtonCssMatStyler,MatButtonModule,MatAnchor,MatIconButtonCssMatStyler,MatFab,MatMiniFab,MatRaisedButtonCssMatStyler} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MdButtonToggleGroupBase {}\nexport const /** @type {?} */ _MdButtonToggleGroupMixinBase = mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle | null;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup extends _MdButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle | null = null;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle>;\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup, matButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n/** @type {?} */\nMdButtonToggleGroup.prototype._changeDetector;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple extends _MdButtonToggleGroupMixinBase\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup, matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit, OnDestroy {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _changeDetectorRef\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let /** @type {?} */ groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabelledby;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMdButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._changeDetectorRef;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER, MdCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, A11yModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    MdCommonModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdButtonToggleModule,MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MatButtonToggle,MatButtonToggleChange,MatButtonToggleGroup,MatButtonToggleGroupBase,MatButtonToggleGroupMultiple,MatButtonToggleModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {'class': 'mat-card-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-card-title, mat-card-title, [md-card-title], [mat-card-title],\n             [mdCardTitle], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle],\n             [mdCardSubtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {\n/**\n * Position of the actions inside the card.\n */\nalign: 'start' | 'end' = 'start';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n};\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n/** @type {?} */\nMdCardActions.propDecorators;\n/**\n * Position of the actions inside the card.\n * @type {?}\n */\nMdCardActions.prototype.align;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image], [mdCardImage], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image], [mdCardImageSmall], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image], [mdCardImageMedium], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image], [mdCardImageLarge], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image], [mdCardImageXLarge], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar], [mdCardAvatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdCardModule,MatCard,MatCardActions,MatCardAvatar,MatCardContent,MatCardFooter,MatCardHeader,MatCardImage,MatCardLgImage,MatCardMatImage,MatCardModule,MatCardSmImage,MatCardSubtitle,MatCardTitle,MatCardTitleGroup,MatCardXlImage} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  QueryList,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\n    return this.viewValue;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MdOption>,\n    optionGroups: QueryList<MdOptgroup>): number {\n\n    if (optionGroups.length) {\n      let /** @type {?} */ optionsArray = options.toArray();\n      let /** @type {?} */ groups = optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdPseudoCheckboxModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdPseudoCheckboxModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '@angular/core';\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nexport class PortalInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _customTokens\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _customTokens: WeakMap<any, any>) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    const /** @type {?} */ value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction PortalInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalInjector.prototype._parentInjector;\n/** @type {?} */\nPortalInjector.prototype._customTokens;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\n/**\n * @deprecated\n */\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [A11yModule],\n  exports: [A11yModule],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\nexport {\n  CdkMonitorFocus,\n  FocusMonitor,\n  FOCUS_MONITOR_PROVIDER,\n  FocusOrigin,\n} from '@angular/cdk/a11y';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MdError {\n   id: string = `mat-error-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdError_tsickle_Closure_declarations() {\n/** @type {?} */\nMdError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdError.ctorParameters;\n/** @type {?} */\nMdError.propDecorators;\n/** @type {?} */\nMdError.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MdFormField`.\n * @abstract\n */\nexport abstract class MdFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\n * needs to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Focuses this control.\n * @abstract\n * @return {?}\n */\nfocus() {}\n}\n\nfunction MdFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMdFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMdFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMdFormFieldControl.prototype.empty;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMdFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMdFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMdFormFieldControl.prototype.errorState;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MdFormField`.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {first, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  FloatPlaceholderType,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  PlaceholderOptions,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MdError} from './error';\nimport {MdFormFieldControl} from './form-field-control';\nimport {\n  getMdFormFieldDuplicatedHintError,\n  getMdFormFieldMissingControlError,\n  getMdFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MdHint} from './hint';\nimport {MdPlaceholder} from './placeholder';\nimport {MdPrefix} from './prefix';\nimport {MdSuffix} from './suffix';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MdFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n */\nprivate _showAlwaysAnimate = false;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() {\n    return this._floatPlaceholder === 'always' && !this._showAlwaysAnimate;\n  }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    if (value !== this._floatPlaceholder) {\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\n   _connectionContainerRef: ElementRef;\nprivate _placeholder: ElementRef;\n   _control: MdFormFieldControl<any>;\n   _placeholderChild: MdPlaceholder;\n   _errorChildren: QueryList<MdError>;\n   _hintChildren: QueryList<MdHint>;\n   _prefixChildren: QueryList<MdPrefix>;\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\n        placeholderOptions: PlaceholderOptions) {\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateControlChild();\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let /** @type {?} */ ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateControlChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n/**\n * Animates the placeholder up and locks it in position.\n * @return {?}\n */\n_animateAndLockPlaceholder(): void {\n    if (this._placeholder && this._canPlaceholderFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatPlaceholder = 'always';\n\n      first.call(fromEvent(this._placeholder.nativeElement, 'transitionend')).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n * or child element with the `md-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMdFormFieldPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint;\n      let /** @type {?} */ endHint: MdHint;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\n * its `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\n    if (this._control) {\n      let /** @type {?} */ ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let /** @type {?} */ startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let /** @type {?} */ endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(mdError => mdError.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\n    if (!this._control) {\n      throw getMdFormFieldMissingControlError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'md-input-container, mat-input-container, md-form-field, mat-form-field',\n  templateUrl: 'form-field.html',\n  // MdInput is a directive and can't have styles, so we need to include its styles here.\n  // The MdInput styles are fairly minimal so it shouldn't be a big deal for people who aren't using\n  // MdInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n      ]),\n    ]),\n  ],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_control.focus()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_placeholder': [{ type: ViewChild, args: ['placeholder', ] },],\n'_control': [{ type: ContentChild, args: [MdFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormField.ctorParameters;\n/** @type {?} */\nMdFormField.propDecorators;\n/** @type {?} */\nMdFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMdFormField.prototype.color;\n/** @type {?} */\nMdFormField.prototype._hideRequiredMarker;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n * @type {?}\n */\nMdFormField.prototype._showAlwaysAnimate;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMdFormField.prototype._hintLabel;\n/** @type {?} */\nMdFormField.prototype._hintLabelId;\n/** @type {?} */\nMdFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMdFormField.prototype.underlineRef;\n/** @type {?} */\nMdFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMdFormField.prototype._placeholder;\n/** @type {?} */\nMdFormField.prototype._control;\n/** @type {?} */\nMdFormField.prototype._placeholderChild;\n/** @type {?} */\nMdFormField.prototype._errorChildren;\n/** @type {?} */\nMdFormField.prototype._hintChildren;\n/** @type {?} */\nMdFormField.prototype._prefixChildren;\n/** @type {?} */\nMdFormField.prototype._suffixChildren;\n/** @type {?} */\nMdFormField.prototype._elementRef;\n/** @type {?} */\nMdFormField.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdError} from './error';\nimport {MdFormField} from './form-field';\nimport {MdHint} from './hint';\nimport {MdPlaceholder} from './placeholder';\nimport {MdPrefix} from './prefix';\nimport {MdSuffix} from './suffix';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '@angular/material/core';\nexport class MdFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdError,\n    MdHint,\n    MdFormField,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdError,\n    MdHint,\n    MdFormField,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormFieldModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdFormFieldModule,MdError,MdFormField,MdFormFieldControl,getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError,MdHint,MdPlaceholder,MdPrefix,MdSuffix,MatFormFieldModule,MatError,MatFormField,MatFormFieldControl,MatHint,MatPlaceholder,MatPrefix,MatSuffix} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {MdOption, MdOptgroup} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected\n */\nexport class MdAutocompleteSelectedEvent {\n/**\n * @param {?} source\n * @param {?} option\n */\nconstructor(public source: MdAutocomplete,\npublic option: MdOption) { }\n}\n\nfunction MdAutocompleteSelectedEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteSelectedEvent.prototype.source;\n/** @type {?} */\nMdAutocompleteSelectedEvent.prototype.option;\n}\n\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager<MdOption>;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * \\@docs-private\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Event that is emitted whenever an option from the list is selected.\n */\noptionSelected: EventEmitter<MdAutocompleteSelectedEvent> =\n      new EventEmitter<MdAutocompleteSelectedEvent>();\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MdOption>(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\n * above or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility(): void {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Emits the `select` event.\n * @param {?} option\n * @return {?}\n */\n_emitSelectEvent(option: MdOption): void {\n    const /** @type {?} */ event = new MdAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n/**\n * Sets a class on the panel based on whether it is visible.\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'mdAutocomplete, matAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'displayWith': [{ type: Input },],\n'optionSelected': [{ type: Output },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.optionGroups;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Event that is emitted whenever an option from the list is selected.\n * @type {?}\n */\nMdAutocomplete.prototype.optionSelected;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, first, map, RxChain, switchMap} from '@angular/cdk/rxjs';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MdOption, MdOptionSelectionChange} from '@angular/material/core';\nimport {MdFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdAutocomplete} from './autocomplete';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal<any>;\nprivate _panelOpen: boolean = false;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n * @param {?} _formField\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality,\nprivate _formField: MdFormField,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    this._attachOverlay();\n    this._floatPlaceholder();\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    this._resetPlaceholder();\n\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the placeholder is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return RxChain.from(merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n      const /** @type {?} */ formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n             clickTarget !== this._element.nativeElement &&\n             (!formField || !formField.contains(clickTarget)) &&\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }).result();\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this.closePanel();\n      event.stopPropagation();\n    } else if (this.activeOption && event.keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      if (this.panelOpen) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * @return {?}\n */\n_handleFocus(): void {\n    this._attachOverlay();\n    this._floatPlaceholder(true);\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @param {?=} shouldAnimate Whether the placeholder should be animated when it is floated.\n * @return {?}\n */\nprivate _floatPlaceholder(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatPlaceholder === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockPlaceholder();\n      } else {\n        this._formField.floatPlaceholder = 'always';\n      }\n\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._formField.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n * the panel height + the option height, so the active option will be just visible at the\n * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n * will become the offset. If that offset is visible within the panel already, the scrollTop is\n * not adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const /** @type {?} */ labelCount = MdOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const /** @type {?} */ optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const /** @type {?} */ newScrollTop =\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollTop);\n    }\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\n    const /** @type {?} */ firstStable = first.call(this._zone.onStable.asObservable());\n    const /** @type {?} */ optionChanges = map.call(this.autocomplete.options.changes, () =>\n      this._positionStrategy.recalculateLastPosition());\n\n    // When the zone is stable initially, and when the option list changes...\n    return RxChain.from(merge(firstStable, optionChanges))\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      .call(switchMap, () => {\n        this._resetActiveItem();\n        this.autocomplete._setVisibility();\n        return this.panelClosingActions;\n      })\n      // when the first closing event occurs...\n      .call(first)\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MdFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._panelOpen = true;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n/**\n * @return {?}\n */\nprivate _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdAutocomplete], input[matAutocomplete],\n             textarea[mdAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_AUTOCOMPLETE_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._formField;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdOptionModule, MdCommonModule} from '@angular/material/core';\nimport {MdAutocomplete} from './autocomplete';\nimport {\n  MdAutocompleteTrigger,\n  MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n  providers: [MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdAutocompleteSelectedEvent,MdAutocomplete,MdAutocompleteModule,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MAT_AUTOCOMPLETE_SCROLL_STRATEGY,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_AUTOCOMPLETE_VALUE_ACCESSOR,MatAutocomplete,MatAutocompleteModule,MatAutocompleteTrigger} from './public_api';\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matCellDef],\n  [matColumnDef],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matHeaderCellDef],\n  [matHeaderRowDef],\n  [matLine],\n  [matRowDef],\n  [matStepLabel],\n  [matStepperNext],\n  [matStepperPrevious],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  [matInput],\n  [matPrefix],\n  [matSuffix],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-header-row,\n  mat-hint,\n  mat-horizontal-stepper,\n  mat-icon,\n  mat-input-container,\n  mat-form-field,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-step,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar,\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdCellDef],\n  [mdColumnDef],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdHeaderCellDef],\n  [mdHeaderRowDef],\n  [mdLine],\n  [mdRowDef],\n  [mdStepLabel],\n  [mdStepperNext],\n  [mdStepperPrevious],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  [mdInput],\n  [mdPrefix],\n  [mdSuffix],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-header-row,\n  md-hint,\n  md-horizontal-stepper,\n  md-icon,\n  md-input-container,\n  md-form-field,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-step,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar,\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldMissingControlError(): Error {\n  return Error('md-form-field must contain a MdFormFieldControl. ' +\n      'Did you forget to add mdInput to the native input or textarea element?');\n}\n","\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MdDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MdNativeDateModule, or provide a custom implementation.`);\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by mdInput.`);\n}\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nexport function getMdSelectNonFunctionValueError(): Error {\n  return Error('Cannot assign a non-function value to `compareWith`.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nexport class MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdCommonModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MatProgressSpinner,MatProgressSpinnerBase,MatProgressSpinnerCssMatStyler,MatProgressSpinnerModule,MatSpinner} from './public_api';\n","\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getMdSortDuplicateMdSortableIdError(id: string): Error {\n  return Error(`Cannot have two MdSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderNotContainedWithinMdSortError(): Error {\n  return Error(`MdSortHeader must be placed within a parent element with the MdSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderMissingIdError(): Error {\n  return Error(`MdSortHeader must be provided with a unique id.`);\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * @return {?}\n */\nget _matRippleTrigger() { return this.trigger; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleTrigger(v) { this.trigger = v; }\n/**\n * @return {?}\n */\nget _matRippleCentered() { return this.centered; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleCentered(v) { this.centered = v; }\n/**\n * @return {?}\n */\nget _matRippleDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matRippleRadius() { return this.radius; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleRadius(v) { this.radius = v; }\n/**\n * @return {?}\n */\nget _matRippleSpeedFactor() { return this.speedFactor; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleSpeedFactor(v) { this.speedFactor = v; }\n/**\n * @return {?}\n */\nget _matRippleColor() { return this.color; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleColor(v) { this.color = v; }\n/**\n * @return {?}\n */\nget _matRippleUnbounded() { return this.unbounded; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleUnbounded(v) { this.unbounded = v; }\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple, matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n'_matRippleTrigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'_matRippleCentered': [{ type: Input, args: ['matRippleCentered', ] },],\n'_matRippleDisabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'_matRippleRadius': [{ type: Input, args: ['matRippleRadius', ] },],\n'_matRippleSpeedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'_matRippleColor': [{ type: Input, args: ['matRippleColor', ] },],\n'_matRippleUnbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {MdRipple} from './ripple';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["changeDetection","ChangeDetectionStrategy","OnPush","MdTabHeader","ctorParameters","type","ElementRef","propDecorators","selectedIndex","Input","selectFocusedIndex","Output","indexFocused","MdTabNavBase","_renderer","_elementRef","this","MdTabNav","_super","_this","_ngZone","_changeDetectorRef","_onDestroy","Subject","observableOf","Object","defineProperty","prototype","set","value","nativeElement","removeClass","backgroundColor","enumerable","configurable","get","_disableRipple","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","markForCheck","ngOnDestroy","Component","args","selector","inputs","template","styles","NgZone","ChangeDetectorRef","_tabLinks","ContentChildren","forwardRef","MdTabLink","descendants","MdTabLinkBase","_MdTabLinkMixinBase","mixinDisabled","_mdTabNavBar","ngZone","ruler","platform","globalOptions","call","_isActive","_tabLinkRipple","MdRipple","MdToolbarRow","decorators","Directive","MdToolbarBase","MdToolbar","renderer","elementRef","tslib_1.__extends","_MdToolbarMixinBase","host","class","role","Renderer2","MdToolbarModule","imports","MdCommonModule","declarations","VERSION","_angular_core","Version","MdHorizontalStepper","apply","arguments","animations","trigger","state","style","transform","visibility","transition","animate","providers","provide","MdStepper","useExisting","MdVerticalStepper","height","encapsulation","ViewEncapsulation","None","preserveWhitespaces","_MdStepperPrevious","CdkStepperPrevious","MdStepperNext","_MdStepperNext","(click)","CdkStepper","MdStepperPrevious","_MdTable","CdkTable","MdTable","CDK_TABLE_TEMPLATE","_MdCellDef","CdkCellDef","MdCellDef","MdHeaderCellDef","MdColumnDef","name","CdkColumnDef","_matColumnDefName","MdHeaderCell","columnDef","MdCell","addClass","cssClassFriendlyName","_MdHeaderRowDef","CdkHeaderRowDef","_MdCdkRowDef","CdkRowDef","_MdHeaderRow","CdkHeaderRow","_MdRow","CdkRow","MdHeaderRowDef","MatHeaderRowDef","MdRowDef","MatRowDef","MdHeaderRow","MdInkBar","alignToElement","show","requestAnimationFrame","runOutsideAngular","_setStyles","setStyle","hide","left","offsetLeft","width","offsetWidth","MdTabLabel","templateRef","viewContainerRef","_MdTabLabelBaseClass","ViewContainerRef","MdTabBase","_MdTabMixinBase","MdTab","_viewContainerRef","_contentPortal","ngOnChanges","changes","hasOwnProperty","_labelChange","next","_disableChange","complete","ngOnInit","TemplatePortal","_content","exportAs","textLabel","MdTabBody","_dir","onCentering","EventEmitter","onCentered","position","_getLayoutDirection","origin","dir","_position","_origin","_isCenterPosition","_portalHost","hasAttached","attach","detach","e","toState","emit","Directionality","Optional","ViewChild","PortalHostDirective","nextId","MdTabGroupBase","MdTabGroup","_tabsSubscription","Subscription","EMPTY","_dynamicHeight","headerPosition","_indexToSelect","_backgroundColor","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","Promise","resolve","then","selectedIndexChange","_selectedIndex","tab","ngAfterContentInit","unsubscribe","_tabLabelSubscription","ngAfterViewChecked","_isInitialized","_focusChanged","index","focusChange","_createChangeEvent","event","toArray","merge","map","concat","subscribe","_getTabLabelId","i","_groupId","_setTabBodyWrapperHeight","tabHeight","_tabBodyWrapperHeight","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","dynamicHeight","_dynamicHeightDeprecated","selectChange","MdTabLabelWrapperBase","_MdTabLabelWrapperMixinBase","MdTabLabelWrapper","focus","getOffsetWidth","MdTabHeaderBase","_scrollDistance","_selectedIndexChanged","_realignInkBar","_disableScrollAfter","_focusIndex","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","dirChange","change","of","resize","window","auditTime","fromEvent","startWith","_checkPaginationEnabled","_isValidIndex","disabled","_setTabFocus","tabIndex","_showPaginationControls","containerEl","_tabListContainer","scrollLeft","focusIndex","_moveFocus","scrollDistance","translateX","_tabList","labelBeforePos","labelAfterPos","viewLength","selectedLabel","getOffsetLeft","beforeVisiblePos","afterVisiblePos","isEnabled","scrollWidth","selectedLabelWrapper","_inkBar","oldValue","_updateValueFromPosition","x","center","y","_emitInputEvent","preventDefault","MdSlider","_onSlideEnd","_isSliding","_valueOnSlideStart","_emitChangeEvent","_onFocus","_onKeydown","PAGE_UP","_increment","END","HOME","_direction","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","_sliderDimensions","_invertMouseCoords","percent","closestValue","pixelsPerStep","trackSize","stepsPerTick","ceil","pixelsPerTick","_tickIntervalPercent","tickInterval","MdSliderChange","source","_calculatePercentage","_calculateValue","percentage","_getSliderDimensions","_sliderWrapper","getBoundingClientRect","_focusHostElement","writeValue","MD_SNACK_BAR_DATA","InjectionToken","MdSnackBarConfig","politeness","announcementMessage","duration","direction","data","horizontalPosition","verticalPosition","MdSnackBarRef","containerInstance","_overlayRef","_onAction","onAction","dismiss","_onExit","_finishDismiss","_afterClosed","closed","exit","clearTimeout","_durationTimeoutId","closeWithAction","_dismissAfter","_open","_afterOpened","dispose","afterDismissed","afterOpened","asObservable","MdSnackBarContainer","attachComponentPortal","portal","snackBarConfig","extraClasses","_i","_a","cssClass","_completeExit","startsWith","onEnter_1","_onEnter","run","enter","first","onMicrotaskEmpty","BasePortalHost","[@state]","(@state.done)","HIDE_ANIMATION","SHOW_ANIMATION","SimpleSnackBar","snackBarRef","action","MdSnackBar","_overlay","_live","_injector","_parentSnackBar","parent","_openedSnackBarRef","_snackBarRefAtThisLevel","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","undefined","injector","contentRef","state$$1","OverlayConfig","isRtl","isLeft","isRight","positionStrategy","top","bottom","_createInjector","userInjector","injectionTokens","WeakMap","Injectable","Overlay","LiveAnnouncer","Injector","SkipSelf","MdSnackBarModule","MdSort","v","disableClear","sortable","id","getMdSortHeaderMissingIdError","sortables","has","getMdSortDuplicateMdSortableIdError","delete","active","start","getNextSortDirection","sortChange","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","_matSortStart","_matSortChange","MdSortHeaderIntl","_sort","_rerenderSubscription","_intl","MdSortHeader","_disableClear","_cdkColumnDef","register","deregister","_isSorted","[class.mat-sort-header-sorted]","SORT_ANIMATION_TRANSITION","_MdStepLabel","CdkStepLabel","MdStepLabel","MdStepHeader","_active","_stringLabel","label","MATERIAL_COMPATIBILITY_MODE","useValue","selected","_MdStep","CdkStep","_MdStepper","MdStep","mdStepper","errorStateMatcher","control","form","originalErrorState","_originalErrorStateMatcher","errorOptions","defaultErrorStateMatcher","Inject","MD_ERROR_GLOBAL_OPTIONS","stepLabel","ContentChild","MdDrawerToggleResult","animationFinished","MdDrawer","_focusTrapFactory","_doc","onAlignChanged","onOpen","_elementFocusedBeforeDrawerWasOpened","activeElement","isFocusTrapEnabled","_focusTrap","focusInitialElementWhenReady","_disableClose","opened","mode","_restoreFocus","activeEl","blur","_opened","toggle","close","isOpen","_animationState","_enableAnimations","enabled","handleKeydown","_onAnimationEnd","fromState","onClose","_isAnimating","_currentTogglePromise","[@transform]","(@transform.start)","(@transform.done)","(keydown)","[attr.align]","[class.mat-drawer-end]","FocusTrapFactory","DOCUMENT","backdropClick","MdDrawerContainer","_drawers","_validateDrawers","forEach","drawer","_watchDrawerToggle","_watchDrawerPosition","takeUntil","_animationStarted","_setContainerClass","onPositionChanged","_element","_end","throwMdDuplicatedDrawerError","_start","_left","_onBackdropClicked","_closeModalDrawer","filter","disableClose","_isShowingBackdrop","_isDrawerOpen","_getDrawerEffectiveWidth","_width","_updateStyles","marginLeft","marginRight","_right","leftWidth","rightWidth","_styles","MdSidenav","[class.mat-drawer-over]","[class.mat-drawer-side]","nextUniqueId","MD_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MdSlideToggle","multi","MdSlideToggleChange","MdSlideToggleBase","_MdSlideToggleMixinBase","mixinTabIndex","mixinColor","mixinDisableRipple","_platform","_focusMonitor","_required","ariaLabelledby","_checked","_uniqueId","focusOrigin","_onInputFocusChange","_slideRenderer","dragging","registerOnChange","fn","focusVia","_inputElement","checked","_focusRipple","fadeOut","_ripple","launch","persistent","centered","_onDragStart","startThumbDrag","_onDrag","dragPercentage","_previousChecked","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","SlideToggleRenderer","updateThumbPosition","distance","dragX","_thumbBarWidth","applyCssTransform","_thumbEl","_getDragPercentage","MD_SLIDER_VALUE_ACCESSOR","MdSliderBase","_invert","_max","_min","_value","input","_percent","_controlValueAccessorChangeFn","_roundLabelTo","_step","toString","split","pop","_thumbLabel","coerceNumberProperty","_vertical","toFixed","vertical","invert","_isMinValue","thumbLabel","axis","backgroundSize","sign","tickSize","rotate","_thumbGap","_invertAxis","monitor","_dirChangeSubscription","stopMonitoring","_updateTickIntervalPercent","_onClick","_onSlide","_onSlideStart","overlayX","overlayY","isLtr","getMdTooltipInvalidPositionError","MdTooltip","_updateTooltipMessage","_tooltipInstance","_markForCheck","updatePosition","tooltipClass","(focus)","MD_TOOLTIP_SCROLL_STRATEGY","_positionDeprecated","showDelay","_deprecatedMessage","_matMessage","TooltipComponent","_visibility","_transformOrigin","delay","_hideTimeoutId","_setTransformOrigin","_showTimeoutId","_animationDone","_handleBodyInteraction","_closeOnInteraction","MdPaginatorIntl","pageSize","startIndex","page","PageEvent","MdPaginator","_length","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","_initialized","_intlChanges","pageIndex","_emitPageEvent","previousPage","hasPreviousPage","hasNextPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","sort","a","b","MdPaginatorModule","MdProgressBar","_bufferValue","clamp","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.aria-valuenow]","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MdProgressBarModule","CommonModule","DEGREE_IN_RADIANS","PI","MAX_ANGLE","HAS_RAF","PROGRESS_SPINNER_STROKE_WIDTH","MdProgressSpinnerCssMatStyler","MdProgressSpinnerBase","_MdProgressSpinnerMixinBase","_lastAnimationId","_mode","MdProgressSpinner","clearInterval","_interdeterminateInterval","interval","_cleanupIndeterminateAnimation","newValue","_animateCircle","_startIndeterminateAnimation","rotation","startTime","Date","now","changeInValue","animateTo","animateFrom","_renderArc","animation_1","elapsedTime","ease","end","materialEase","rotationStartPoint","temp","interdeterminateInterval","setInterval","currentValue","_path","svgArc","getSvgArc","strokeWidth","setAttribute","MdSpinner","MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MdRadioGroup","MdRadioChange","MdRadioGroupBase","_changeDetector","onTouched","labelPosition","_labelPosition","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_selected","registerOnTouched","_MdRadioGroupMixinBase","MdRadioButton","align","MdRadioButtonBase","_MdRadioButtonMixinBase","radioGroup","_removeUniqueSelectionListener","_radioDispatcher","listen","ngAfterViewInit","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","menu","MdMenuTrigger","_checkMenu","reason","closeMenu","triggersSubmenu","openMenu","_menuItemInstance","_parentMenu","_closeSubscription","_menuClosingActions","_initMenu","MdMenu","_startAnimation","_resetAnimation","_setMenuElevation","_setIsMenuOpen","setElevation","depth","_openedByMouse","_menuOpen","onMenuOpen","onMenuClose","_highlighted","_getOverlayConfig","hasBackdrop","backdropClass","_subscribeToPositions","_positionSubscription","onPositionChange","posX","connectionPair","posY","_getPosition","offsetY","overlayFallbackX","originX","xPosition","originFallbackX","connectedTo","originY","withDirection","withFallbackPosition","originFallbackY","overlayFallbackY","result","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","LEFT_ARROW$1","_handleClick","toggleMenu","aria-haspopup","(mousedown)","MD_MENU_SCROLL_STRATEGY","MdMenuItem","Self","_deprecatedMdMenuTriggerFor","_matMenuTriggerFor","transformPlaceholder","transformPanel","opacity","minWidth","fadeInContent","deps","useFactory","MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MdSelectChange","MdSelectBase","_MdSelectMixinBase","MdSelectTrigger","MdSelect","_viewportRuler","_parentForm","_parentFormGroup","_control","placeholderOptions","_scrollStrategyFactory","_panelOpen","_optionSubscription","_changeSubscription","_tabSubscription","_scrollTop","_multiple","_compareWith","o1","o2","_placeholderState","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_positions","ariaLabel","valueChange","valueAccessor","_placeholder","getMdSelectDynamicMultipleError","getMdSelectNonFunctionValueError","_initializeSelection","_setOptionDisableRipple","_selectionModel","SelectionModel","multiple","_resetOptions","_dropSubscriptions","panelOpen","_calculateOverlayPosition","_floatPlaceholderState","isEmpty","isDisabled","selectedOptions","option","viewValue","_isRtl","reverse","join","_setTriggerWidth","_triggerWidth","isBrowser","_getTriggerRect","_handleClosedKeydown","UP_ARROW","_handleArrowKey","_handlePanelKeydown","_keyManager","setFirstItemActive","_onPanelDone","_focusCorrectOption","_onBlur","_onAttached","_calculateOverlayOffsetX","_setScrollTop","_hasValue","hasValue","_isErrorState","isInvalid","invalid","isTouched","touched","isSubmitted","submitted","overlayDir","overlayElement","querySelector","scrollTop","_setSelectionByValue","isArray","Array","getMdSelectNonArrayValueError","_clearSelection","_selectValue","isUserInput","_sortValues","correspondingOption","options","find","error","isDevMode","console","warn","skip","clear","deselect","tabOut","_listenToOptions","_setOptionIds","_onSelect","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","disableRipple","_setValueWidth","_selectedValueWidth","setActiveItem","_getOptionIndex","reduce","current","scrollContainerHeight","items","maxScroll","panelHeight","_offsetY","_calculateOverlayOffsetY","selectedOptionOffset","scrollBuffer","_checkOverlayWithinViewport","_calculateOverlayScroll","clampValue","SELECT_ITEM_HEIGHT","_getPlaceholderAnimationState","floatPlaceholder","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","offsetX","group","leftOverflow","overlayRect","rightOverflow","right","viewportRect","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","SELECT_MAX_OPTIONS_DISPLAYED","selectedDisplayIndex","topSpaceAvailable","triggerRect","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","_adjustPanelDown","_adjustPanelUp","panelHeightBottom","distanceBelowViewport","_getOriginBasedOnOption","distanceAboveViewport","prevActiveItem","activeItem","onKeydown","currentActiveItem","optionGroups","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-owns]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","(blur)","MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_disabled","hideDelay","_message","IOS","_enterListener","_leaveListener","_disposeTooltip","trim","describe","removeDescription","_createTooltip","_setTooltipClass","_tooltipClass","_isTooltipVisible","isVisible","afterHidden","_getOrigin","_getOverlayPosition","strategy","withScrollableContainers","getScrollContainers","scrollableViewProperties","isOverlayClipped","panelClass","scrollStrategy","create","isDirectionLtr","MdNavListCssMatStyler","MdDividerCssMatStyler","MdListAvatarCssMatStyler","MdListIconCssMatStyler","MdListSubheaderCssMatStyler","MdListItem","_list","_isNavList","_lineSetter","MdLineSetter","_lines","_handleFocus","_handleBlur","_getHostElement","_MdListItemMixinBase","MdList","_hasAvatar","MdSelectionListBase","MdListOption","_hasFocus","checkboxPosition","deselected","destroyed","selectionList","onFocus","[attr.aria-selected]","MdSelectionList","_tabIndex","_optionFocusSubscription","FocusKeyManager","withWrap","_onFocusSubscription","_optionDestroyStream","_onDestroySubscription","deselectAll","RxChain","from","switchMap","optionIndex","updateActiveItemIndex","_keydown","_toggleSelectOnFocusedOption","focusedIndex","activeItemIndex","focusedOption","_MdSelectionListMixinBase","MdMenuItemBase","_MdMenuItemMixinBase","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.tabindex]","[attr.disabled]","(mouseenter)","MD_MENU_DEFAULT_OPTIONS","_xPosition","_defaultOptions","_yPosition","yPosition","throwMdMenuInvalidPositionX","setPositionClasses","throwMdMenuInvalidPositionY","classes","_classList","obj","className","item","ESCAPE","parentMenu","focusFirstItem","customElevation","_previousElevation","_panelAnimationState","_onAnimationDone","transformMenu","fadeInItems","classList","_hoverSubscription","MdGridTile","colspan","MdGridTileText","MdLine","MdGridAvatarCssMatStyler","MdGridTileHeaderCssMatStyler","TileCoordinator","numColumns","tiles","tracker","fill","rowIndex","lastRowMax","rowCount","_trackTile","tile","gapStartIndex","_findMatchingGap","_markTilePosition","columnIndex","TilePosition","tileCols","Error","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","_rows","_gutterSize","normalizeUnits","gutterSize","_cols","cols","TileStyler","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","getTileSize","span","gutterWidthFractionPerTile","setRowStyles","percentWidth","gutterWidth","FixedTileStyler","fixedRowHeight","init","reset","list","_setStyle","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","calc","getTileSpan","getGutterSpan","_setListStyle","ratioParts","parseFloat","_rowspan","_tiles","MdGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_layoutTiles","_checkRowHeight","rowHeight","_tileStyler","FitTileStyler","pos","positions","getComputedHeight","ngControl","_uid","_previousNativeValue","t","getSupportedInputTypes","_errorOptions","el","target","selectionStart","selectionEnd","MdInput","_type","stateChanges","ngDoCheck","_updateErrorState","_onInput","oldState","errorState","_validateType","MD_INPUT_INVALID_TYPES","getMdInputUnsupportedTypeError","validity","badInput","_isTextarea","nodeName","_isNeverEmpty","_isBadInput","setDescribedByIds","ids","_ariaDescribedby","[placeholder]","[disabled]","[required]","[attr.aria-describedby]","[attr.aria-invalid]","(input)","Platform","NgControl","NgForm","FormGroupDirective","MdTextareaAutosize","_minRows","_maxRows","_setMaxHeight","minRows","maxRows","_setTextareaStyle","maxHeight","property","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","minHeight","overflow","appendChild","_cachedLineHeight","_setMinHeight","resizeToFitContent","scrollHeight","_previousValue","MdListBase","MdListItemBase","MdListDivider","MdListCssMatStyler","_inputSubscription","MdDatepicker","_datepickerInput","_dateFilter","_disabledChange","_popupRef","_select","date","_dateAdapter","sameDate","selectedChanged","_valueChange","_document","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","isAttached","_dialog","MdDatepickerContent","afterClosed","componentInstance","datepicker","_createPopup","first$1","onStable","overlayState","_createPopupPositionStrategy","getPopupConnectionElementRef","MdDialog","startView","MD_DATEPICKER_VALIDATORS","NG_VALIDATORS","MdDatepickerInput","MdDatepickerInputEvent","targetElement","_dateFormats","_mdFormField","dateChange","dateInput","_validatorOnChange","_datepickerSubscription","_localeSubscription","_lastValueValid","mdDatepickerParse","text","_maxValidator","_filterValidator","_validator","Validators","compose","_parseValidator","_minValidator","createMissingDateImplError","localeChanges","registerDatepicker","_datepicker","_registerInput","isDateInstance","isValid","oldDate","registerOnValidatorChange","validate","c","underlineRef","_cvaOnChange","setDisabledState","_getValidDateOrNull","MD_DATEPICKER_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","(change)","DateAdapter","MD_DATE_FORMATS","MdFormField","matDatepicker","MdDatepickerToggle","datepickerDisabled","inputDisabled","_stateChanges","MdMonthView","selectedChange","userSelection","firstDayOfWeek","getFirstDayOfWeek","_weekdays","weekdays","slice","_activeDate","today","_hasSameMonthAndYear","oldActiveDate","_init","_selectedDate","_getDateInCurrentMonth","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_todayDate","_firstWeekOffset","getDayOfWeek","firstOfMonth","_createWeekCells","dateNames","getDateNames","cell","dateFilter","MdCalendarCell","getDate","d1","d2","MdYearView","_selectedMonth","_getMonthInCurrentYear","_monthSelected","month","daysInMonth","getNumDaysInMonth","_yearLabel","getYearName","CdkAccordion","_multi","_hideToggle","displayMode","hideToggle","MdAccordion","nextId$1","AccordionItem","accordion","accordionId","_expanded","expanded","_expansionDispatcher","notify","UniqueSelectionDispatcher","_MdExpansionPanelMixinBase","MdExpansionPanelBase","MdExpansionPanel","_uniqueSelectionDispatcher","_inputChanges","_getHideToggle","_getExpandedState","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MdExpansionPanelActionRow","MdExpansionPanelHeader","panel","_parentChangeSubscription","_getPanelId","_showToggle","_keyup","SPACE","ENTER","_toggle","[attr.aria-controls]","[attr.aria-expanded]","(keyup)","[@expansionHeight]","params","collapsedHeight","expandedHeight","Host","FocusMonitor","MdExpansionPanelDescription","MdExpansionPanelTitle","MdExpansionModule","CompatibilityModule","A11yModule","_colspan","coerceToNumber","_beforeClose","_containerInstance","_animationStateChanged","phaseName","_afterOpen","MdDialogRef","dialogResult","_result","_startExitAnimation","_getPositionStrategy","centerHorizontally","getState","MD_DIALOG_SCROLL_STRATEGY","MD_DIALOG_SCROLL_STRATEGY_PROVIDER","location","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","afterAllClosed","defer","openDialogs","closeAll","_afterAllClosed","inProgressDialog","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","componentOrTemplateRef","afterOpen","getDialogById","dialog","_getOverlayState","dialogConfig","global","overlay","MdDialogContainer","TemplateRef","attachTemplatePortal","$implicit","_removeOpenDialog","splice","topDialog","dialogElementUid","MdDialogClose","proxiedChange","_matDialogClose","_mdDialogClose","_matDialogCloseResult","MdDialogTitle","_container","_ariaLabelledBy","MdDialogContent","MdDialogActions","MdDialogModule","OverlayModule","SvgIconConfig","url","svgElement","MdIconRegistry","_http","_sanitizer","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","key","iconKey","_svgIconConfigs","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","_iconSetConfigs","registerFontClassAlias","alias","_fontCssClassesByAlias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMdIconFailedToSanitizeError","cachedIcon","_cachedIconsByUrl","cloneSvg","_loadSvgIconFromConfig","doOperator","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","_loadSvgIconSetFromConfig","iconSetConfig","catchOperator","err","log","forkJoin","Observable","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_svgElementFromString","iconSet","iconNode","tagName","toLowerCase","_setSvgAttributes","cloneNode","_toSvgElement","str","div","document","createElement","getAttribute","inProgressFetch","_inProgressUrlFetches","response","finallyOperator","share","DomSanitizer","Http","ICON_REGISTRY_PROVIDER_FACTORY","MdIconBase","MdIcon","parts","svgIcon","_usingFontIcon","_updateFontIconClasses","_setSvgElement","_clearSvgElement","layoutElement","childCount","childNodes","removeChild","elem","fontSetClass","fontSet","_mdIconRegistry","_previousFontSetClass","fontIcon","_previousFontIconClass","_MdIconMixinBase","Attribute","MdIconModule","MdDatepickerIntl","_isCompatibilityMode","minDate","compareDate","maxDate","changeDetectorRef","MdCalendar","_clampedActiveDate","clampDate","_monthView","switchToYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","startAt","_dateSelected","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_isSameView","_handleCalendarBodyKeydown","date1","date2","_handleCalendarBodyKeydownInMonthView","addCalendarDays","altKey","_dateFilterForViews","_focusActiveCell","_handleCalendarBodyKeydownInYearView","_prevMonthInSameCol","increment","displayValue","MdCalendarBody","allowDisabledSelection","cellAspectRatio","selectedValueChange","numCols","_isActiveCell","colIndex","cellNumber","_firstRowOffset","activeCell","MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MD_DATEPICKER_SCROLL_STRATEGY","MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MD_CHECKBOX_CONTROL_VALUE_ACCESSOR","MdCheckbox","indeterminateChange","indeterminate","_MdCheckboxRequiredValidator","CheckboxRequiredValidator","MdCheckboxRequiredValidator","MdChipSelectionChange","MdChipBase","MdBasicChip","MdChip","onSelectionChange","select","remove","removable","DELETE","BACKSPACE","selectable","toggleSelected","_blur","chip","_MdChipMixinBase","tabindex","destroy","onRemove","MdChipRemove","_parentChip","MdChipListChange","MdChipList","_userTabIndex","_id","_selectable","chips","_resetChips","_updateFocusForDestroyedChips","registerInput","inputElement","_chipInput","setProperty","focused","_focusInput","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","contains","setPreviousItemActive","_updateTabIndex","chipIndex","focusChip","chipsArray","_lastDestroyedIndex","correspondingChip","selectViaInteraction","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","[class.mat-chip-list-disabled]","MdFormFieldControl","compareWith","placeholder","MdChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_matChipInputTokenEnd","_chipList","chipList","MdDialogConfig","ariaDescribedBy","throwMdDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","_trapFocus","hasMovedFocus","toFocus","_elementFocusedBeforeDialogWasOpened","_onAnimationStart","_state","[attr.role]","[attr.aria-labelledby]","[@slideDialog]","(@slideDialog.start)","MdButton","MdAnchor","focusMonitor","_haltDisabledEvents","stopImmediatePropagation","MdButtonModule","NgModule","MdRippleModule","exports","MdFab","MdButtonCssMatStyler","MdIconButtonCssMatStyler","MdButtonToggleGroupBase","MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MdButtonToggleGroup","_name","_updateSelectedButtonToggleFromValue","_updateButtonToggleNames","matchingButtonToggle","_MdButtonToggleGroupMixinBase","MdButtonToggleGroupMultiple","MdButtonToggle","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-disabled]","MdCardContent","MdCardTitle","MdCardSubtitle","MdCardActions","[class.mat-card-actions-align-end]","MdCardFooter","MdCardImage","MdCardSmImage","MdCardMdImage","MdCardLgImage","MdCardXlImage","MdCardAvatar","MdCard","MdCardHeader","MdCardTitleGroup","MdCardModule","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MdCheckboxChange","MdCheckboxBase","_currentAnimationClass","_indeterminate","changed","_isRippleDisabled","newState","_getAnimationClassForCheckStateTransition","_currentCheckState","_removeFocusRipple","_onInteractionEvent","animSuffix","_MdCheckboxMixinBase","_uniqueIdCounter","MdOptionSelectionChange","MdOption","_emitSelectionChangeEvent","_selectViaInteraction","countGroupLabelsBeforeOption","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MdOptgroup","MdOptionModule","MdPseudoCheckboxModule","MD_PLACEHOLDER_GLOBAL_OPTIONS","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","StyleModule","MdError","[attr.id]","MdHint","nextUniqueId$2","[class.mat-right]","MdPlaceholder","MdPrefix","MdSuffix","_subscriptAnimationState","_placeholderOptions","float","_hintLabel","_processHints","_floatPlaceholder","_syncDescribedByIds","_hintChildren","_validateControlChild","detectChanges","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_errorChildren","_canPlaceholderFloat","_showAlwaysAnimate","_validatePlaceholders","getMdFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMdFormFieldDuplicatedHintError","_getDisplayedMessages","startHint","_hintLabelId","endHint","mdError","getMdFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-invalid]","color","dividerColor","hideRequiredMarker","_connectionContainerRef","_suffixChildren","MdFormFieldModule","MdAutocompleteSelectedEvent","MdAutocomplete","showPanel","displayWith","optionSelected","_uniqueAutocompleteIdCounter","ActiveDescendantKeyManager","_getScrollTop","_setVisibility","_emitSelectEvent","_getClassList","mat-autocomplete-visible","mat-autocomplete-hidden","MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MD_AUTOCOMPLETE_SCROLL_STRATEGY","MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MD_AUTOCOMPLETE_VALUE_ACCESSOR","MdAutocompleteTrigger","_zone","_formField","autocomplete","_destroyPanel","openPanel","_attachOverlay","_closingActionsSubscription","_resetPlaceholder","clickTarget","formField","closePanel","activeOption","_resetActiveItem","isArrowKey_1","_handleInput","shouldAnimate","_animateAndLockPlaceholder","_manuallyFloatingPlaceholder","_scrollToOption","activeOptionIndex","labelCount","optionOffset","panelTop","newScrollTop","_subscribeToClosingActions","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","_setTriggerValue","inputValue","_clearPreviousSelectedOption","_portal","_getHostWidth","_getConnectedElement","aria-autocomplete","aria-multiline","[attr.aria-activedescendant]","(focusin)","DEFAULT_ROUND_BUTTON_COLOR","MdRaisedButtonCssMatStyler","button","anchor","MdMiniFab","_MdButtonMixinBase","MdButtonBase","_isIconButton","_hasAttributeWithPrefix","unprefixedAttributeNames","some","suffix","hasAttribute","__extends","d","__","constructor","extendStatics","base","class_1","class_2","_color","colorPalette","defaultColor","class_3","defaultTabIndex","class_4","UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","sources","valuesArray","getComputedStyle","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","getMdAutocompleteMissingPanelError","MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","block","getMdIconNameNotFoundError","getMdIconNoHttpProviderError","parentRegistry","http","sanitizer","provider","parseInt","throwMdMenuMissingError","scrollThrottle","SCROLL_THROTTLE_MS","linearEase","currentTime","startValue","time","timeQuad","pow","timeCubed","startAngle","startPoint","polarToCartesian","pathRadius","arcSweep","endAngle","extendObject","sortOrder","setPrototypeOf","__proto__","p","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","AnimationDurations","NoConflictStyleCompatibilityMode","MATERIAL_SANITY_CHECKS","_listeners","listener","registered","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MAT_DATE_LOCALE_PROVIDER","MAT_DATE_LOCALE","LOCALE_ID","getDayOfWeekNames","format","displayFormat","first$$1","second","long","DEFAULT_DAY_OF_WEEK_NAMES","NativeDateAdapter","getFullYear","getDay","getMonthNames","SUPPORTS_INTL_API","range","_stripDirectionalityCharacters","dtf_1","dtf_2","Intl","DateTimeFormat","locale","day","DEFAULT_DATE_NAMES","dtf_3","weekday","dtf","String","clone","year","parse","toDateString","years","_createDateWithOverflow","days","_2digit","getUTCMonth","setFullYear","n","replace","monthYearA11yLabel","NativeDateModule","useClass","MdNativeDateModule","MD_NATIVE_DATE_FORMATS","GestureConfig","_hammer","buildHammer","mc","pan","Pan","press","Press","slide","_createRecognizer","threshold","swipe","longpress","recognizeWith","add","inheritances","recognizer","HammerGestureConfig","_resetClasses","count","_setClass","MdLineModule","RippleState","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","fadeOutRipple","RippleRef","RippleRenderer","_ruler","_triggerEvents","Map","rippleDisabled","_containerElement","onMousedown","bind","setTriggerElement","containerRect","scrollPosition","getViewportScrollPosition","pageX","ripple","radius","_activeRipples","rippleRef","_isMousedown","rippleEl","runTimeoutOutsideZone","_triggerElement","addEventListener","MD_RIPPLE_GLOBAL_OPTIONS","_rippleRenderer","_globalOptions","_updateRippleRenderer","speedFactor","fadeInRipple","pageY","ViewportRuler","unbounded","_matRippleTrigger","_matRippleCentered","_matRippleUnbounded","PlatformModule","ScrollDispatchModule","VIEWPORT_RULER_PROVIDER","MdPseudoCheckbox","[class.mat-pseudo-checkbox-checked]","MdOptgroupBase","_MdOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":"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"}