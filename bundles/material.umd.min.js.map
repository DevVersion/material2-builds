{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/select/select.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/dialog/index.ts","../../src/lib/core/a11y/activedescendant-key-manager.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/index.ts","../../src/lib/module.ts","../../src/lib/public_api.ts","../../src/lib/index.ts","../../src/lib/core/observe-content/observe-content.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/core/rtl/dir.ts","../../src/lib/toolbar/index.ts","../../src/lib/tooltip/tooltip-errors.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tooltip/index.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/menu/index.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog-injector.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-errors.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-errors.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/snack-bar/index.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/index.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/index.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/index.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/input/input-container-errors.ts","../../src/lib/input/input-container.ts","../../src/lib/input/autosize.ts","../../src/lib/input/index.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/list/index.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/grid-list-errors.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/index.ts","../../src/lib/card/card.ts","../../src/lib/card/index.ts","../../src/lib/chips/chip.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slider/slider.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/slider/index.ts","../../src/lib/sidenav/index.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/index.ts","../../src/lib/core/a11y/list-key-manager.ts","../../src/lib/core/a11y/focus-key-manager.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/index.ts","../../src/lib/button/button.ts","../../src/lib/button/index.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/index.ts","../../src/lib/core/overlay/overlay-ref.ts","../../src/lib/core/overlay/position/connected-position.ts","../../src/lib/core/overlay/position/connected-position-strategy.ts","../../src/lib/core/overlay/position/global-position-strategy.ts","../../src/lib/core/overlay/overlay-container.ts","../../src/lib/core/overlay/position/overlay-position-builder.ts","../../src/lib/core/overlay/overlay.ts","../../src/lib/core/overlay/scroll/scrollable.ts","../../src/lib/core/overlay/overlay-directives.ts","../../src/lib/core/platform/platform.ts","../../src/lib/core/a11y/interactivity-checker.ts","../../src/lib/core/a11y/focus-trap.ts","../../src/lib/core/a11y/live-announcer.ts","../../src/lib/core/platform/features.ts","../../src/lib/core/a11y/index.ts","../../src/lib/core/platform/index.ts","../../src/lib/core/overlay/fullscreen-overlay-container.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/selection/selection.ts","../../src/lib/core/a11y/fake-mousedown.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/core.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/core/style/index.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/coercion/number-property.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/overlay/scroll/scroll-dispatcher.ts","../../src/lib/core/overlay/position/viewport-ruler.ts","../../src/lib/core/errors/error.ts","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/line/line.ts","../../src/lib/core/keyboard/keycodes.ts","../../src/lib/core/coercion/boolean-property.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/option/option.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/portal/portal-errors.ts","../../src/lib/core/portal/portal.ts","../../src/lib/core/portal/portal-directives.ts","../../src/lib/core/overlay/overlay-state.ts","../../src/lib/core/portal/dom-portal-host.ts"],"sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n  OnInit,\n} from '@angular/core';\nimport {MdOption, MdOptionSelectionChange} from '../core/option/option';\nimport {ENTER, SPACE} from '../core/keyboard/keycodes';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Dir} from '../core/rtl/dir';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {ConnectedOverlayDirective} from '../core/overlay/overlay-directives';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport {SelectionModel} from '../core/selection/selection';\nimport {MdSelectDynamicMultipleError, MdSelectNonArrayValueError} from './select-errors';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The fixed height of every option element. */\nexport const /** @type {?} */ SELECT_OPTION_HEIGHT = 48;\n\n/** The max height of the select's overlay panel */\nexport const /** @type {?} */ SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The max number of options visible at once in the select panel. */\nexport const /** @type {?} */ SELECT_MAX_OPTIONS_DISPLAYED = 5;\n\n/** The fixed height of the select's trigger element. */\nexport const /** @type {?} */ SELECT_TRIGGER_HEIGHT = 30;\n\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n * (SELECT_OPTION_HEIGHT (48) - SELECT_TRIGGER_HEIGHT (30)) / 2 = 9\n */\nexport const /** @type {?} */ SELECT_OPTION_HEIGHT_ADJUSTMENT = 9;\n\n/** The panel's padding on the x-axis */\nexport const /** @type {?} */ SELECT_PANEL_PADDING_X = 16;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const /** @type {?} */ SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const /** @type {?} */ SELECT_PANEL_PADDING_Y = 16;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const /** @type {?} */ SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n\n/** Allowed values for the floatPlaceholder option. */\nexport type MdSelectFloatPlaceholderType = 'always' | 'never' | 'auto';\nexport class MdSelect implements AfterContentInit, OnDestroy, OnInit, ControlValueAccessor {\nprivate _panelOpen = false;\nprivate _optionSubscription: Subscription;\nprivate _changeSubscription: Subscription;\nprivate _tabSubscription: Subscription;\nprivate _required: boolean = false;\nprivate _disabled: boolean = false;\nprivate _scrollTop = 0;\nprivate _placeholder: string;\nprivate _multiple: boolean = false;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MdOption>;\nprivate _placeholderState = '';\nprivate _tabIndex: number;\n\n  /**\n   * The width of the trigger. Must be saved to set the min width of the overlay panel\n   * and the width of the selected value.\n   */\n  _triggerWidth: number;\n\n  /**\n   * The width of the selected option's value. Must be set programmatically\n   * to ensure its overflow is clipped, as it's absolutely positioned.\n   */\n  _selectedValueWidth: number;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: FocusKeyManager;\n\n  /** View -> model callback called when value changes */\n  _onChange = (value: any) => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /**\n   * The x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction.\n   */\n  _offsetX = 0;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Trigger that opens the select. */\n   trigger: ElementRef;\n\n  /** Overlay pane containing the options. */\n   overlayDir: ConnectedOverlayDirective;\n\n  /** All of the defined select options. */\n   options: QueryList<MdOption>;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw new MdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): MdSelectFloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: MdSelectFloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\nprivate _floatPlaceholder: MdSelectFloatPlaceholderType = 'auto';\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this._disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n   ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n   ariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.options.map(option => option.onSelectionChange));\n  }\n\n  /** Event emitted when the select has been opened. */\n   onOpen: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the select has been closed. */\n   onClose: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the selected value has been changed by the user. */\n   change: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _control\n * @param {?} tabIndex\n */\nconstructor(private _element: ElementRef,\nprivate _renderer: Renderer,\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Dir,\npublic _control: NgControl,\n               tabIndex: string) {\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, null, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = this.options.changes.startWith(null).subscribe(() => {\n      this._resetOptions();\n\n      if (this._control) {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve(null).then(() => this._setSelectionByValue(this._control.value));\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n      this._focusHost();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._getTriggerRect().width;\n  }\n/**\n * Ensures the panel opens if activated by the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this.open();\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.panelOpen) {\n      this._onTouched();\n    }\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\n_setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel');\n    scrollContainer.scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[]): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw new MdSelectNonArrayValueError();\n    }\n\n    if (isArray) {\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else if (!this._selectValue(value)) {\n      this._clearSelection();\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any): MdOption {\n    let /** @type {?} */ correspondingOption = this.options.find(option => option.value === value);\n\n    if (correspondingOption) {\n      correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = this.optionSelectionChanges\n      .filter(event => event.isUserInput)\n      .subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option);\n      this._selectionModel.select(option);\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @return {?}\n */\nprivate _propagateChanges(): void {\n    let /** @type {?} */ valueToEmit = Array.isArray(this.selected) ?\n      this.selected.map(option => option.value) :\n      this.selected.value;\n\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * TODO: there should be a better way of doing this.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth =  this._triggerWidth - 13;\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0]));\n    }\n  }\n/**\n * Focuses the host element when the panel closes.\n * @return {?}\n */\nprivate _focusHost(): void {\n    this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    this._offsetX = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X : SELECT_PANEL_PADDING_X;\n\n    if (!this._isRtl()) {\n      this._offsetX *= -1;\n    }\n\n    const /** @type {?} */ panelHeight =\n        Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = this.options.length * SELECT_OPTION_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._selectionModel.hasValue()) {\n      const /** @type {?} */ selectedIndex = this._getOptionIndex(this._selectionModel.selected[0]);\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffset(selectedIndex, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_OPTION_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_OPTION_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_OPTION_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `visibility` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderVisibility(): 'visible'|'hidden' {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n        'visible' : 'hidden';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffset(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_OPTION_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this.options.length - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_OPTION_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_OPTION_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_OPTION_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n    '[attr.aria-owns]': '_optionIds',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select]': 'true',\n    '(keydown)': '_handleKeydown($event)',\n    '(blur)': '_onBlur()'\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * Whether the select is disabled.\n * @type {?}\n */\nMdSelect.prototype._disabled;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * The x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction.\n * @type {?}\n */\nMdSelect.prototype._offsetX;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/** @type {?} */\nMdSelect.prototype._element;\n/** @type {?} */\nMdSelect.prototype._renderer;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._control;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  ViewEncapsulation,\n  Directive,\n  NgZone,\n  Inject,\n  Optional,\n  OnDestroy,\n} from '@angular/core';\nimport {MdInkBar} from '../ink-bar';\nimport {MdRipple} from '../../core/ripple/index';\nimport {ViewportRuler} from '../../core/overlay/position/viewport-ruler';\nimport {MD_RIPPLE_GLOBAL_OPTIONS, RippleGlobalOptions, Dir} from '../../core';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNavBar implements OnDestroy {\nprivate _directionChange: Subscription;\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * @param {?} _dir\n */\nconstructor(\nprivate _dir: Dir) {\n    if (_dir) {\n      this._directionChange = _dir.dirChange.subscribe(() => this._alignInkBar());\n    }\n  }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._directionChange) {\n      this._directionChange.unsubscribe();\n      this._directionChange = null;\n    }\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\nprivate _alignInkBar(): void {\n    this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {\n    '[class.mat-tab-nav-bar]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n};\n}\n\nfunction MdTabNavBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNavBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNavBar.ctorParameters;\n/** @type {?} */\nMdTabNavBar.propDecorators;\n/** @type {?} */\nMdTabNavBar.prototype._directionChange;\n/** @type {?} */\nMdTabNavBar.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNavBar.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNavBar.prototype._inkBar;\n/** @type {?} */\nMdTabNavBar.prototype._dir;\n}\n\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink {\nprivate _isActive: boolean = false;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n */\nconstructor(private _mdTabNavBar: MdTabNavBar,\nprivate _elementRef: ElementRef) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link]',\n  host: {\n    '[class.mat-tab-link]': 'true',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNavBar, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/** @type {?} */\nMdTabLink.prototype._isActive;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n/**\n * Simple directive that extends the ripple and matches the selector of the MdTabLink. This\n * adds the ripple behavior to nav bar labels.\n */\nexport class MdTabLinkRipple extends MdRipple {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} globalOptions\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, ruler: ViewportRuler,\n                globalOptions: RippleGlobalOptions) {\n    super(elementRef, ngZone, ruler, globalOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link]',\n  host: {\n    '[class.mat-tab-link]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\n}\n\nfunction MdTabLinkRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLinkRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLinkRipple.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Renderer,\n    ViewContainerRef,\n} from '@angular/core';\nimport {MdMenuPanel} from './menu-panel';\nimport {MdMenuMissingError} from './menu-errors';\nimport {\n    isFakeMousedownFromScreenReader,\n    Dir,\n    LayoutDirection,\n    Overlay,\n    OverlayState,\n    OverlayRef,\n    TemplatePortal,\n    ConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    VerticalConnectionPos,\n} from '../core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal;\nprivate _overlayRef: OverlayRef;\nprivate _menuOpen: boolean = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n\n  /** References the menu instance that the trigger is associated with. */\n   menu: MdMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n   onMenuOpen = new EventEmitter<void>();\n\n  /** Event emitted when the associated menu is closed. */\n   onMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _renderer\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _renderer: Renderer,\nprivate _dir: Dir) {}\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n    this.menu.close.subscribe(() => this.closeMenu());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() { this.destroyMenu(); }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean { return this._menuOpen; }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay();\n      this._overlayRef.attach(this._portal);\n      this._subscribeToBackdrop();\n      this._initMenu();\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this._backdropSubscription.unsubscribe();\n      this._resetMenu();\n    }\n  }\n/**\n * Removes the menu from the DOM.\n * @return {?}\n */\ndestroyMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n\n      this._cleanUpSubscriptions();\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * This method ensures that the menu closes when the overlay backdrop is clicked.\n * We do not use first() here because doing so would not catch clicks from within\n * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe\n * explicitly when the menu is closed or destroyed.\n * @return {?}\n */\nprivate _subscribeToBackdrop(): void {\n    this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n      this.menu._emitCloseEvent();\n    });\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n  }\n/**\n *  This method checks that a valid instance of MdMenu has been passed into\n *  mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throw new MdMenuMissingError();\n    }\n  }\n/**\n *  This method creates the overlay from the provided menu's template and saves its\n *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): void {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayState\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getPosition()\n                                        .withDirection(this.dir);\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n    overlayState.direction = this.dir;\n    return overlayState;\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe((change) => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.originX === 'start' ? 'after' : 'before';\n      let /** @type {?} */ posY: MenuPositionY = change.connectionPair.originY === 'top' ? 'below' : 'above';\n\n      if (!this.menu.overlapTrigger) {\n        posY = posY === 'below' ? 'above' : 'below';\n      }\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy  {\n    const [posX, fallbackX]: HorizontalConnectionPos[] =\n      this.menu.positionX === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    const [overlayY, fallbackOverlayY]: VerticalConnectionPos[] =\n      this.menu.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let /** @type {?} */ originY = overlayY;\n    let /** @type {?} */ fallbackOriginY = fallbackOverlayY;\n\n    if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n      .connectedTo(this._element,\n          {originX: posX, originY: originY}, {overlayX: posX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: originY},\n          {overlayX: fallbackX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: posX, originY: fallbackOriginY},\n          {overlayX: posX, overlayY: fallbackOverlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: fallbackOriginY},\n          {overlayX: fallbackX, overlayY: fallbackOverlayY});\n  }\n/**\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(click)': 'toggleMenu()',\n  },\n  exportAs: 'mdMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: Renderer, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._backdropSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._renderer;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {\n  OverlayModule,\n  PortalModule,\n  A11yModule,\n  CompatibilityModule,\n} from '../core';\nimport {MdDialog} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdDialogModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    CompatibilityModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    CompatibilityModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\nexport {MdDialog} from './dialog';\nexport {MdDialogContainerAnimationState,MdDialogContainer} from './dialog-container';\nexport {MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions} from './dialog-content-directives';\nexport {DialogRole,DialogPosition,MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\nexport {MD_DIALOG_DATA} from './dialog-injector';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends CanDisable {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Highlightable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet /** @type {?} */ _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\nexport class MdAutocomplete implements AfterContentInit {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager;\n\n  /** Whether the autocomplete panel displays above or below its trigger. */\n  positionY: AutocompletePositionY = 'below';\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n   template: TemplateRef<any>;\n   panel: ElementRef;\n   options: QueryList<MdOption>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n   displayWith: (value: any) => string;\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display\n * options below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => this.showPanel = !!this.options.length);\n  }\n/**\n * Sets a class on the panel based on its position (used to set y-offset).\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-panel-below': this.positionY === 'below',\n      'mat-autocomplete-panel-above': this.positionY === 'above',\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdAutocomplete',\n  host: {\n    '[class.mat-autocomplete]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.positionY;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/** @type {?} */\nMdAutocomplete.prototype.template;\n/** @type {?} */\nMdAutocomplete.prototype.panel;\n/** @type {?} */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Input,\n    NgZone,\n    Optional,\n    OnDestroy,\n    ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {Dir} from '../core/rtl/dir';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Subject} from 'rxjs/Subject';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/switchMap';\nimport {MdInputContainer} from '../input/input-container';\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const /** @type {?} */ AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const /** @type {?} */ AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\nprivate _panelPositionSubscription: Subscription;\nprivate _positionStrategy: ConnectedPositionStrategy;\nprivate _blurStream = new Subject<any>();\nprivate _manuallyFloatingPlaceholder = false;\n\n  /** View -> model callback called when value changes */\n  _onChange = (value: any) => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _dir\n * @param {?} _zone\n * @param {?} _inputContainer\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dir: Dir,\nprivate _zone: NgZone,\nprivate _inputContainer: MdInputContainer) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._panelOpen = false;\n    this._resetPlaceholder();\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(\n        this.optionSelections,\n        this._blurStream.asObservable(),\n        this.autocomplete._keyManager.tabOut\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption {\n    if (this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      this.autocomplete._keyManager.onKeydown(event);\n      if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this.openPanel();\n        Promise.resolve().then(() => this._scrollToOption());\n      }\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * @param {?} newlyFocusedTag\n * @return {?}\n */\n_handleBlur(newlyFocusedTag: string): void {\n    this._onTouched();\n\n    // Only emit blur event if the new focus is *not* on an option.\n    if (newlyFocusedTag !== 'MD-OPTION') {\n      this._blurStream.next(null);\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. The new scrollTop will be that offset - the panel height + the option\n * height, so the active option will be just visible at the bottom of the panel.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset =\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ newScrollTop =\n        Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n    this.autocomplete._setScrollTop(newScrollTop);\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): void {\n    // When the zone is stable initially, and when the option list changes...\n    Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        .switchMap(() => {\n          this._resetPanel();\n          return this.panelClosingActions;\n        })\n        // when the first closing event occurs...\n        .first()\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    this._element.nativeElement.value = toDisplay || '';\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to null so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(null);\n  }\n/**\n * Resets the active item and re-calculates alignment of the panel in case its size\n * has changed due to fewer or greater number of options.\n * @return {?}\n */\nprivate _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    '(focus)': 'openPanel()',\n    '(blur)': '_handleBlur($event.relatedTarget?.tagName)',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Stream of blur events that should close the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._blurStream;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {MdOptionModule, OverlayModule, OVERLAY_PROVIDERS, CompatibilityModule} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdAutocomplete} from './autocomplete';\nimport {MdAutocompleteTrigger} from './autocomplete-trigger';\nexport class MdAutocompleteModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdAutocompleteModule,\n      providers: [OVERLAY_PROVIDERS]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, CompatibilityModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, CompatibilityModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {AutocompletePositionY,MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\n\nimport {\n  MdRippleModule,\n  RtlModule,\n  ObserveContentModule,\n  PortalModule,\n  OverlayModule,\n  A11yModule,\n  CompatibilityModule,\n} from './core/index';\n\nimport {MdButtonToggleModule} from './button-toggle/index';\nimport {MdButtonModule} from './button/index';\nimport {MdCheckboxModule} from './checkbox/index';\nimport {MdRadioModule} from './radio/index';\nimport {MdSelectModule} from './select/index';\nimport {MdSlideToggleModule} from './slide-toggle/index';\nimport {MdSliderModule} from './slider/index';\nimport {MdSidenavModule} from './sidenav/index';\nimport {MdListModule} from './list/index';\nimport {MdGridListModule} from './grid-list/index';\nimport {MdCardModule} from './card/index';\nimport {MdChipsModule} from './chips/index';\nimport {MdIconModule} from './icon/index';\nimport {MdProgressSpinnerModule} from './progress-spinner/index';\nimport {MdProgressBarModule} from './progress-bar/index';\nimport {MdInputModule} from './input/index';\nimport {MdSnackBarModule} from './snack-bar/index';\nimport {MdTabsModule} from './tabs/index';\nimport {MdToolbarModule} from './toolbar/index';\nimport {MdTooltipModule} from './tooltip/index';\nimport {MdMenuModule} from './menu/index';\nimport {MdDialogModule} from './dialog/index';\nimport {PlatformModule} from './core/platform/index';\nimport {MdAutocompleteModule} from './autocomplete/index';\nimport {StyleModule} from './core/style/index';\n\nconst /** @type {?} */ MATERIAL_MODULES = [\n  MdAutocompleteModule,\n  MdButtonModule,\n  MdButtonToggleModule,\n  MdCardModule,\n  MdChipsModule,\n  MdCheckboxModule,\n  MdDialogModule,\n  MdGridListModule,\n  MdIconModule,\n  MdInputModule,\n  MdListModule,\n  MdMenuModule,\n  MdProgressBarModule,\n  MdProgressSpinnerModule,\n  MdRadioModule,\n  MdRippleModule,\n  MdSelectModule,\n  MdSidenavModule,\n  MdSliderModule,\n  MdSlideToggleModule,\n  MdSnackBarModule,\n  MdTabsModule,\n  MdToolbarModule,\n  MdTooltipModule,\n  OverlayModule,\n  PortalModule,\n  RtlModule,\n  StyleModule,\n  A11yModule,\n  PlatformModule,\n  CompatibilityModule,\n  ObserveContentModule\n];\n/**\n * @deprecated\n */\nexport class MaterialRootModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdAutocompleteModule.forRoot(),\n    MdButtonModule.forRoot(),\n    MdCardModule.forRoot(),\n    MdChipsModule.forRoot(),\n    MdCheckboxModule.forRoot(),\n    MdGridListModule.forRoot(),\n    MdInputModule.forRoot(),\n    MdListModule.forRoot(),\n    MdProgressBarModule.forRoot(),\n    MdProgressSpinnerModule.forRoot(),\n    MdRippleModule.forRoot(),\n    MdSelectModule.forRoot(),\n    MdSidenavModule.forRoot(),\n    MdTabsModule.forRoot(),\n    MdToolbarModule.forRoot(),\n    PortalModule.forRoot(),\n    RtlModule.forRoot(),\n    ObserveContentModule.forRoot(),\n\n    // These modules include providers.\n    A11yModule.forRoot(),\n    MdButtonToggleModule.forRoot(),\n    MdDialogModule.forRoot(),\n    MdIconModule.forRoot(),\n    MdMenuModule.forRoot(),\n    MdRadioModule.forRoot(),\n    MdSliderModule.forRoot(),\n    MdSlideToggleModule.forRoot(),\n    MdSnackBarModule.forRoot(),\n    MdTooltipModule.forRoot(),\n    PlatformModule.forRoot(),\n    OverlayModule.forRoot(),\n    CompatibilityModule.forRoot(),\n  ],\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialRootModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialRootModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialRootModule.ctorParameters;\n}\n\n/**\n * @deprecated\n */\nexport class MaterialModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {ngModule: MaterialRootModule};\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: MATERIAL_MODULES,\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @module\n * @description\n * Entry point for all public APIs of Angular Material.\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,MdOptionModule,MdOption,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ScrollDispatcher,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,MdError,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCoreModule,PlatformModule,Platform,getSupportedInputTypes,GlobalPositionStrategy,ElementBoundingPositions,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,MdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox} from './core';\nexport {MaterialRootModule,MaterialModule} from './module';\n\nexport {MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,MdAutocompleteTrigger} from './autocomplete/index';\nexport {MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFabCssMatStyler,MdMiniFabCssMatStyler,MdButton,MdAnchor} from './button/index';\nexport {MdButtonToggleModule,ToggleType,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle/index';\nexport {MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card/index';\nexport {MdChipsModule,MdChipList,MdChipEvent,MdChip} from './chips/index';\nexport {MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckbox} from './checkbox/index';\nexport {MdDialogModule,MD_DIALOG_DATA,MdDialog,MdDialogContainerAnimationState,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef} from './dialog/index';\nexport {MdGridListModule,MdGridTile,MdGridList} from './grid-list/index';\nexport {MdIconModule,MdIconRegistry,MdIconInvalidNameError,MdIcon,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon/index';\nexport {MdInputModule,MdTextareaAutosize,FloatPlaceholderType,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,MdInputContainerPlaceholderConflictError,MdInputContainerUnsupportedTypeError,MdInputContainerDuplicatedHintError,MdInputContainerMissingMdInputError} from './input/index';\nexport {MdListModule,MdListDivider,LIST_TYPE_TOKEN,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdNavListTokenSetter,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list/index';\nexport {MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu/index';\nexport {MdProgressBarModule,MdProgressBar} from './progress-bar/index';\nexport {MdProgressSpinnerModule,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinner,MdSpinner} from './progress-spinner/index';\nexport {MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroup,MdRadioButton} from './radio/index';\nexport {MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_OPTION_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectFloatPlaceholderType,MdSelect} from './select/index';\nexport {MdSidenavModule,MdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav/index';\nexport {MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSlider,SliderRenderer} from './slider/index';\nexport {MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggle} from './slide-toggle/index';\nexport {MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar} from './snack-bar/index';\nexport {MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup} from './tabs/index';\nexport {MdTabNavBar,MdTabLink,MdTabLinkRipple} from './tabs/tab-nav-bar/index';\nexport {MdToolbarModule,MdToolbarRow,MdToolbar} from './toolbar/index';\nexport {MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Dir,LayoutDirection,RtlModule,ObserveContentModule,ObserveContent,MdOptionModule,MdOption,Portal,PortalHost,BasePortalHost,ComponentPortal,TemplatePortal,PortalHostDirective,TemplatePortalDirective,PortalModule,DomPortalHost,Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ScrollDispatcher,GestureConfig,HammerInput,HammerManager,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_ELEMENT_TOKEN,LIVE_ANNOUNCER_PROVIDER,InteractivityChecker,isFakeMousedownFromScreenReader,A11yModule,UniqueSelectionDispatcher,UniqueSelectionDispatcherListener,UNIQUE_SELECTION_DISPATCHER_PROVIDER,MdLineModule,MdLine,MdLineSetter,MdError,ComponentType,coerceBooleanProperty,coerceNumberProperty,CompatibilityModule,NoConflictStyleCompatibilityMode,MdCoreModule,PlatformModule,Platform,getSupportedInputTypes,GlobalPositionStrategy,ElementBoundingPositions,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule,SelectionModel,SelectionChange,FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective,StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform,UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE,MATERIAL_COMPATIBILITY_MODE,MdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector,AnimationCurves,AnimationDurations,MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox,MaterialRootModule,MaterialModule,MdAutocompleteModule,AutocompletePositionY,MdAutocomplete,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,MdAutocompleteTrigger,MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFabCssMatStyler,MdMiniFabCssMatStyler,MdButton,MdAnchor,MdButtonToggleModule,ToggleType,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdCardModule,MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdChipsModule,MdChipList,MdChipEvent,MdChip,MdCheckboxModule,MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckbox,MdDialogModule,MD_DIALOG_DATA,MdDialog,MdDialogContainerAnimationState,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MdGridListModule,MdGridTile,MdGridList,MdIconModule,MdIconRegistry,MdIconInvalidNameError,MdIcon,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MdInputModule,MdTextareaAutosize,FloatPlaceholderType,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer,MdInputContainerPlaceholderConflictError,MdInputContainerUnsupportedTypeError,MdInputContainerDuplicatedHintError,MdInputContainerMissingMdInputError,MdListModule,MdListDivider,LIST_TYPE_TOKEN,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdNavListTokenSetter,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdMenuModule,fadeInItems,transformMenu,MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MdProgressBarModule,MdProgressBar,MdProgressSpinnerModule,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinner,MdSpinner,MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroup,MdRadioButton,MdSelectModule,fadeInContent,transformPanel,transformPlaceholder,SELECT_OPTION_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectFloatPlaceholderType,MdSelect,MdSidenavModule,MdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer,MdSliderModule,MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSlider,SliderRenderer,MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggle,MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MdTabsModule,MdInkBar,MdTabBody,MdTabBodyOriginState,MdTabBodyPositionState,MdTabHeader,ScrollDirection,MdTabLabelWrapper,MdTab,MdTabLabel,MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup,MdTabNavBar,MdTabLink,MdTabLinkRipple,MdToolbarModule,MdToolbarRow,MdToolbar,MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,MdTooltip,TooltipVisibility,TooltipComponent} from './public_api';\n\nexport {LIVE_ANNOUNCER_PROVIDER_FACTORY as ɵf} from './core/a11y/live-announcer';\nexport {UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY as ɵg} from './core/coordination/unique-selection-dispatcher';\nexport {OVERLAY_CONTAINER_PROVIDER as ɵb,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa} from './core/overlay/overlay-container';\nexport {OverlayPositionBuilder as ɵo} from './core/overlay/position/overlay-position-builder';\nexport {VIEWPORT_RULER_PROVIDER as ɵn,VIEWPORT_RULER_PROVIDER_FACTORY as ɵm,ViewportRuler as ɵl} from './core/overlay/position/viewport-ruler';\nexport {SCROLL_DISPATCHER_PROVIDER as ɵd,SCROLL_DISPATCHER_PROVIDER_FACTORY as ɵc} from './core/overlay/scroll/scroll-dispatcher';\nexport {Scrollable as ɵp} from './core/overlay/scroll/scrollable';\nexport {RippleRenderer as ɵe} from './core/ripple/ripple-renderer';\nexport {MdGridAvatarCssMatStyler as ɵi,MdGridTileFooterCssMatStyler as ɵk,MdGridTileHeaderCssMatStyler as ɵj,MdGridTileText as ɵh} from './grid-list/grid-tile';","import {\n  Directive,\n  ElementRef,\n  NgModule,\n  ModuleWithProviders,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit\n} from '@angular/core';\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver;\n\n  /** Event emitted for each change in the element's content. */\n   event = new EventEmitter<void>();\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._observer = new MutationObserver(mutations => mutations.forEach(() => this.event.emit()));\n\n    this._observer.observe(this._elementRef.nativeElement, {\n      characterData: true,\n      childList: true,\n      subtree: true\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n}\n\nexport class ObserveContentModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ObserveContentModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserveContentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer,\n  SkipSelf\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program';\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\nprivate _origin: FocusOrigin = null;\nprivate _lastFocusOrigin: FocusOrigin;\nprivate _windowFocused = false;\nprivate _lastTouchTarget: EventTarget;\nprivate _touchTimeout: number;\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n */\nconstructor(private _ngZone: NgZone) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(element: Element, renderer: Renderer, checkChildren: boolean): Observable<FocusOrigin> {\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ info = this._elementInfo.get(element);\n      info.checkChildren = checkChildren;\n      return info.subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: null,\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: Element): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element, null);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} renderer The renderer to use to invoke the focus method on the element.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: Node, renderer: Renderer, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    renderer.invokeElementMethod(element, 'focus');\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: Element, origin: FocusOrigin): void {\n    let /** @type {?} */ renderer = this._elementInfo.get(element).renderer;\n    renderer.setElementClass(element, 'cdk-focused', !!origin);\n    renderer.setElementClass(element, 'cdk-touch-focused', origin === 'touch');\n    renderer.setElementClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n    renderer.setElementClass(element, 'cdk-mouse-focused', origin === 'mouse');\n    renderer.setElementClass(element, 'cdk-program-focused', origin === 'program');\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: Element) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    if (!this._elementInfo.get(element).checkChildren && element !== event.target) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    this._elementInfo.get(element).subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onBlur(event: FocusEvent, element: Element) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    if (this._elementInfo.get(element).checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget)) {\n      return;\n    }\n\n    this._setClasses(element, null);\n    this._elementInfo.get(element).subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\n  \n  cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer) {\n    this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(parentDispatcher: FocusOriginMonitor,\n                                                      ngZone: NgZone) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone);\n}\n\n\nexport const /** @type {?} */ FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Directive,\n  HostBinding,\n  Output,\n  Input,\n  EventEmitter\n} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n/**\n * Directive to listen for changes of direction of part of the DOM.\n * \n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\nexport class Dir {\n  /** Layout direction of the element. */\n   _dir: LayoutDirection = 'ltr';\n\n  /** Event emitted when the direction changes. */\n   dirChange = new EventEmitter<void>();\n/**\n * \\@docs-private\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset dir(v: LayoutDirection) {\n    let /** @type {?} */ old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit();\n    }\n  }\n/**\n * Current layout direction of the element.\n * @return {?}\n */\nget value(): LayoutDirection { return this.dir; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: LayoutDirection) { this.dir = v; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_dir': [{ type: Input, args: ['dir', ] },],\n'dirChange': [{ type: Output },],\n'dir': [{ type: HostBinding, args: ['attr.dir', ] },],\n};\n}\n\nfunction Dir_tsickle_Closure_declarations() {\n/** @type {?} */\nDir.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDir.ctorParameters;\n/** @type {?} */\nDir.propDecorators;\n/**\n * Layout direction of the element.\n * @type {?}\n */\nDir.prototype._dir;\n/**\n * Event emitted when the direction changes.\n * @type {?}\n */\nDir.prototype.dirChange;\n}\n\nexport class RtlModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: RtlModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [Dir],\n  declarations: [Dir]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RtlModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRtlModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRtlModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CompatibilityModule} from '../core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdToolbarModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [MdToolbar, MdToolbarRow, CompatibilityModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\n\nexport {MdToolbarRow,MdToolbar} from './toolbar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdError} from '../core';\n/**\n * Exception thrown when a tooltip has an invalid position.\n * \\@docs-private\n */\nexport class MdTooltipInvalidPositionError extends MdError {\n/**\n * @param {?} position\n */\nconstructor(position: string) {\n    super(`Tooltip position \"${position}\" is invalid.`);\n  }\n}\n","import {\n  Component,\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  NgZone,\n  Optional,\n  OnDestroy,\n  Renderer,\n  OnInit,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  style,\n  trigger,\n  state,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  ComponentPortal,\n  OverlayConnectionPosition,\n  OriginConnectionPosition,\n} from '../core';\nimport {MdTooltipInvalidPositionError} from './tooltip-errors';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Dir} from '../core/rtl/dir';\nimport {Platform} from '../core/platform/index';\nimport'rxjs/add/operator/first';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to delay before changing the tooltip visibility to hidden */\nexport const /** @type {?} */ TOUCHEND_HIDE_DELAY  = 1500;\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const /** @type {?} */ SCROLL_THROTTLE_MS = 20;\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnInit, OnDestroy {\n  _overlayRef: OverlayRef;\n  _tooltipInstance: TooltipComponent;\n  scrollSubscription: Subscription;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n   showDelay = 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n   hideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    if (this._tooltipInstance) {\n      this._setTooltipMessage(this._message);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer,\nprivate _platform: Platform,\nprivate _dir: Dir) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // When a scroll on the page occurs, update the position in case this tooltip needs\n    // to be repositioned.\n    this.scrollSubscription = this._scrollDispatcher.scrolled(SCROLL_THROTTLE_MS, () => {\n      if (this._overlayRef) {\n        this._overlayRef.updatePosition();\n      }\n    });\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    if (this.scrollSubscription) {\n      this.scrollSubscription.unsubscribe();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipMessage(this._message);\n    this._tooltipInstance.show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = this._overlayRef.attach(portal).instance;\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance.afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): void {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n    let /** @type {?} */ config = new OverlayState();\n    config.positionStrategy = strategy;\n\n    this._overlayRef = this._overlay.create(config);\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    this._overlayRef.dispose();\n    this._overlayRef = null;\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throw new MdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throw new MdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    this._tooltipInstance.message = message;\n    this._tooltipInstance._markForCheck();\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      if (this._tooltipInstance) {\n        this._overlayRef.updatePosition();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer, },\n{type: Platform, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype.scrollSubscription;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: string = 'bottom';\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throw new MdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {OverlayModule, CompatibilityModule} from '../core';\nimport {PlatformModule} from '../core/platform/index';\nimport {MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdTooltipModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [OverlayModule, CompatibilityModule, PlatformModule],\n  exports: [MdTooltip, TooltipComponent, CompatibilityModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdError} from '../core';\n/**\n * Exception thrown when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n */\nexport class MdMenuMissingError extends MdError {\nconstructor() {\n    super(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>\n    `);\n  }\n}\n/**\n * Exception thrown when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n */\nexport class MdMenuInvalidPositionX extends MdError {\nconstructor() {\n    super(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>\n    `);\n  }\n}\n/**\n * Exception thrown when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n */\nexport class MdMenuInvalidPositionY extends MdError {\nconstructor() {\n    super(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>\n    `);\n  }\n}\n","import {Component, ElementRef, Input, Renderer} from '@angular/core';\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem implements Focusable {\nprivate _disabled: boolean = false;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef) {}\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n/**\n * Whether the menu item is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this._disabled ? '-1' : '0';\n  }\n/**\n * Used to set the HTML `disabled` attribute. Necessary for links to be disabled properly.\n * @return {?}\n */\n_getDisabledAttr(): boolean {\n    return this._disabled ? true : null;\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  host: {\n    'role': 'menuitem',\n    '[class.mat-menu-item]': 'true',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': '_getDisabledAttr()',\n    '(click)': '_checkDisabled($event)',\n  },\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/** @type {?} */\nMdMenuItem.propDecorators;\n/**\n * Whether the menu item is disabled\n * @type {?}\n */\nMdMenuItem.prototype._disabled;\n/** @type {?} */\nMdMenuItem.prototype._renderer;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on AngularJS Material.\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('showing', style({\n    opacity: 1,\n    transform: `scale(1)`\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      transform: `scale(0)`\n    }),\n    animate(`200ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\n  ]),\n  transition('* => void', [\n    animate('50ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const /** @type {?} */ fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate(`200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\n  ])\n]);\n","// TODO(kara): prevent-close functionality\n\n\nimport {\n  AfterContentInit,\n  Attribute,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {MdMenuInvalidPositionX, MdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager;\nprivate _tabSubscription: Subscription;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: any = {};\n\n  /** Position of the menu in the X axis. */\n  positionX: MenuPositionX = 'after';\n\n  /** Position of the menu in the Y axis. */\n  positionY: MenuPositionY = 'below';\n\n   templateRef: TemplateRef<any>;\n   items: QueryList<MdMenuItem>;\n   overlapTrigger = true;\n/**\n * @param {?} posX\n * @param {?} posY\n * @param {?} deprecatedPosX\n * @param {?} deprecatedPosY\n */\nconstructor( posX: MenuPositionX,\n               posY: MenuPositionY,\n               deprecatedPosX: MenuPositionX,\n               deprecatedPosY: MenuPositionY) {\n\n    // TODO(kara): Remove kebab-case attributes after next release\n    if (deprecatedPosX) { this._setPositionX(deprecatedPosX); }\n    if (deprecatedPosY) { this._setPositionY(deprecatedPosY); }\n\n    if (posX) { this._setPositionX(posX); }\n    if (posY) { this._setPositionY(posY); }\n    this.setPositionClasses(this.positionX, this.positionY);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._emitCloseEvent();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n      obj[className] = true;\n      return obj;\n    }, {});\n    this.setPositionClasses(this.positionX, this.positionY);\n  }\n\n  /** Event emitted when the menu is closed. */\n   close = new EventEmitter<void>();\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * This emits a close event to which the trigger is subscribed. When emitted, the\n * trigger will close the menu.\n * @return {?}\n */\n_emitCloseEvent(): void {\n    this.close.emit();\n  }\n/**\n * @param {?} pos\n * @return {?}\n */\nprivate _setPositionX(pos: MenuPositionX): void {\n    if (pos !== 'before' && pos !== 'after') {\n      throw new MdMenuInvalidPositionX();\n    }\n    this.positionX = pos;\n  }\n/**\n * @param {?} pos\n * @return {?}\n */\nprivate _setPositionY(pos: MenuPositionY): void {\n    if (pos !== 'above' && pos !== 'below') {\n      throw new MdMenuInvalidPositionY();\n    }\n    this.positionY = pos;\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?} posX\n * @param {?} posY\n * @return {?}\n */\nsetPositionClasses(posX: MenuPositionX, posY: MenuPositionY): void {\n    this._classList['mat-menu-before'] = posX == 'before';\n    this._classList['mat-menu-after'] = posX == 'after';\n    this._classList['mat-menu-above'] = posY == 'above';\n    this._classList['mat-menu-below'] = posY == 'below';\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  host: {'role': 'menu'},\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Attribute, args: ['xPosition', ] }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['yPosition', ] }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['x-position', ] }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['y-position', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/**\n * Position of the menu in the X axis.\n * @type {?}\n */\nMdMenu.prototype.positionX;\n/**\n * Position of the menu in the Y axis.\n * @type {?}\n */\nMdMenu.prototype.positionY;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/** @type {?} */\nMdMenu.prototype.items;\n/** @type {?} */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ComponentRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  Renderer,\n  ElementRef,\n  EventEmitter,\n} from '@angular/core';\nimport {\n  animate,\n  trigger,\n  state,\n  style,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogContentAlreadyAttachedError} from './dialog-errors';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport'rxjs/add/operator/first';\n\n\n/** Possible states for the dialog container animation. */\nexport type MdDialogContainerAnimationState = 'void' | 'enter' | 'exit' | 'exit-start';\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost implements OnDestroy {\n  /** The portal host inside of this container into which the dialog content will be loaded. */\n   _portalHost: PortalHostDirective;\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement = null;\n\n  /** The dialog configuration. */\n  dialogConfig: MdDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: MdDialogContainerAnimationState = 'enter';\n\n  /** Emits the current animation state whenever it changes. */\n  _onAnimationStateChange = new EventEmitter<MdDialogContainerAnimationState>();\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdDialogContentAlreadyAttachedError();\n    }\n\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( document.activeElement as HTMLElement));\n    this._focusTrap.focusFirstTabbableElementWhenReady();\n  }\n/**\n * Kicks off the leave animation.\n * \\@docs-private\n * @return {?}\n */\n_exit(): void {\n    this._state = 'exit';\n    this._onAnimationStateChange.emit('exit-start');\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    }\n\n    this._onAnimationStateChange.emit( /** @type {?} */((event.toState as MdDialogContainerAnimationState)));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // When the dialog is destroyed, return focus to the element that originally had it before\n    // the dialog was opened. Wait for the DOM to finish settling before changing the focus so\n    // that it doesn't end up back on the <body>. Also note that we need the extra check, because\n    // IE can set the `activeElement` to null in some cases.\n    let /** @type {?} */ toFocus = /** @type {?} */(( this._elementFocusedBeforeDialogWasOpened as HTMLElement));\n\n    // We shouldn't use `this` inside of the NgZone subscription, because it causes a memory leak.\n    let /** @type {?} */ animationStream = this._onAnimationStateChange;\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      if (toFocus && 'focus' in toFocus) {\n        toFocus.focus();\n      }\n\n      animationStream.complete();\n    });\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('enter', style({ transform: 'translate3d(0, 0, 0) scale(1)', opacity: 1 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    '[class.mat-dialog-container]': 'true',\n    '[attr.role]': 'dialogConfig?.role',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype.dialogConfig;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits the current animation state whenever it changes.\n * @type {?}\n */\nMdDialogContainer.prototype._onAnimationStateChange;\n/** @type {?} */\nMdDialogContainer.prototype._ngZone;\n/** @type {?} */\nMdDialogContainer.prototype._renderer;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, CompatibilityModule} from '../core';\nimport {MdMenu} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger} from './menu-trigger';\nimport {MdRippleModule} from '../core/ripple/index';\nexport class MdMenuModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdMenuModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    CompatibilityModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, CompatibilityModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\n\nexport {MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu';\nexport {fadeInItems, transformMenu} from './menu-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {OverlayRef, GlobalPositionStrategy} from '../core';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer, MdDialogContainerAnimationState} from './dialog-container';\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\nprivate _afterClosed: Subject<any> = new Subject();\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n */\nconstructor(private _overlayRef: OverlayRef,\npublic _containerInstance: MdDialogContainer) {\n    _containerInstance._onAnimationStateChange.subscribe(\n      (state: MdDialogContainerAnimationState) => {\n        if (state === 'exit-start') {\n          // Transition the backdrop in parallel with the dialog.\n          this._overlayRef.detachBackdrop();\n        } else if (state === 'exit') {\n          this._overlayRef.dispose();\n          this._afterClosed.next(this._result);\n          this._afterClosed.complete();\n          this.componentInstance = null;\n        }\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n    this._containerInstance._exit();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n}\n\n","import {Injector, OpaqueToken} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new OpaqueToken('MdDialogData');\n/**\n * Custom injector type specifically for instantiating components with a dialog.\n */\nexport class DialogInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _dialogRef\n * @param {?} _data\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _dialogRef: MdDialogRef<any>,\nprivate _data: any) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    if (token === MdDialogRef) {\n      return this._dialogRef;\n    }\n\n    if (token === MD_DIALOG_DATA && this._data) {\n      return this._data;\n    }\n\n    return this._parentInjector.get(token, notFoundValue);\n  }\n}\n\nfunction DialogInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogInjector.prototype._parentInjector;\n/** @type {?} */\nDialogInjector.prototype._dialogRef;\n/** @type {?} */\nDialogInjector.prototype._data;\n}\n\n","import {ViewContainerRef} from '@angular/core';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: any;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n}\n\n","import {MdError} from '../core';\n/**\n * Exception thrown when a ComponentPortal is attached to a DomPortalHost without an origin.\n * \\@docs-private\n */\nexport class MdDialogContentAlreadyAttachedError extends MdError {\nconstructor() {\n      super('Attempting to attach dialog content after content is already attached');\n  }\n}\n","import {Injector, ComponentRef, Injectable, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Overlay, OverlayRef, ComponentType, OverlayState, ComponentPortal} from '../core';\nimport {extendObject} from '../core/util/object-extend';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {DialogInjector} from './dialog-injector';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\nimport {TemplatePortal} from '../core/portal/portal';\nimport'rxjs/add/operator/first';\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget _openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Subject for notifying the user that a dialog has opened.\n * @return {?}\n */\nget _afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * Subject for notifying the user that all open dialogs have finished closing.\n * @return {?}\n */\nget _afterAllClosed(): Subject<void> {\n    return this._parentDialog ?\n      this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /** Gets an observable that is notified when a dialog has been opened. */\n  afterOpen: Observable<MdDialogRef<any>> = this._afterOpen.asObservable();\n\n  /** Gets an observable that is notified when all open dialog have finished closing. */\n  afterAllClosed: Observable<void> = this._afterAllClosed.asObservable();\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _parentDialog: MdDialog) { }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n    config = _applyConfigDefaults(config);\n\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    let /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this._openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this._openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this._afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this._openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this._openDialogs[i].close();\n    }\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    let /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let /** @type {?} */ overlayState = new OverlayState();\n    overlayState.hasBackdrop = true;\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ viewContainer = config ? config.viewContainerRef : null;\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);\n\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance.dialogConfig = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n\n    let /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer);\n\n    if (!config.disableClose) {\n      // When the dialog backdrop is clicked, we want to close it.\n      overlayRef.backdropClick().first().subscribe(() => dialogRef.close());\n    }\n\n    // We create an injector specifically for the component we're instantiating so that it can\n    // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself\n    // and, optionally, to return a value.\n    let /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    let /** @type {?} */ dialogInjector = new DialogInjector(userInjector || this._injector, dialogRef, config.data);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null));\n    } else {\n      let /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, null, dialogInjector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    let /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this._openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this._openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    let /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n    let /** @type {?} */ canClose = topDialog ? !topDialog._containerInstance.dialogConfig.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Gets an observable that is notified when a dialog has been opened.\n * @type {?}\n */\nMdDialog.prototype.afterOpen;\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, Input} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose {\n  /** Screenreader label for the button. */\n   ariaLabel: string = 'Close dialog';\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close]',\n  host: {\n    '(click)': 'dialogRef.close()',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title]',\n  host: {\n    '[class.mat-dialog-title]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content',\n  host: {\n    '[class.mat-dialog-content]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions',\n  host: {\n    '[class.mat-dialog-actions]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\nprivate _instance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * @return {?}\n */\nget instance(): T {\n    return this._instance;\n  }\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\nprivate _afterClosed: Subject<any> = new Subject();\nprivate _afterOpened: Subject<any>;\nprivate _onAction: Subject<any> = new Subject();\n/**\n * @param {?} instance\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(instance: T,\n              containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    // Sets the readonly instance of the snack bar content component.\n    this._instance = instance;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\n_action(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarRef.prototype._instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","import {MdError} from '../core';\n/**\n * Error that is thrown when attempting to attach a snack bar that is already attached.\n * \\@docs-private\n */\nexport class MdSnackBarContentAlreadyAttached extends MdError {\nconstructor() {\n    super('Attempting to attach snack bar content after content is already attached');\n  }\n}\n","import {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarContentAlreadyAttached} from './snack-bar-errors';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n  /** The portal host inside of this container into which the snack bar content will be loaded. */\n   _portalHost: PortalHostDirective;\nprivate onExit: Subject<any> = new Subject();\nprivate onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  animationState: SnackBarState = 'initial';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw new MdSnackBarContentAlreadyAttached();\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.setElementClass(this._elementRef.nativeElement, cssClass, true);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      this._ngZone.run(() => {\n        this.onEnter.next();\n        this.onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      this.onExit.next();\n      this.onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n  /** The message to be shown in the snack bar. */\n  message: string;\n\n  /** The label for the button in the snack bar. */\n  action: string;\n\n  /** The instance of the component making up the content of the snack bar. */\n  snackBarRef: MdSnackBarRef<SimpleSnackBar>;\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    this.snackBarRef._action();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean { return !!this.action; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  host: {\n    '[class.mat-simple-snackbar]': 'true',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * The message to be shown in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.message;\n/**\n * The label for the button in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.action;\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, ComponentRef, Optional, SkipSelf} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {extendObject} from '../core/util/object-extend';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any>;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> {\n    return this._parentSnackBar ?\n        this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any>) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    config = _applyConfigDefaults(config);\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n    let /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n    // animation is complete.\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    // If no snack bar is in view, enter the new snack bar.\n    } else {\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => {\n        setTimeout(() => snackBarRef.dismiss(), config.duration);\n      });\n    }\n\n    this._live.announce(config.announcementMessage, config.politeness);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config: MdSnackBarConfig = {}): MdSnackBarRef<SimpleSnackBar> {\n    config.announcementMessage = message;\n    let /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n    simpleSnackBarRef.instance.message = message;\n    simpleSnackBarRef.instance.action = action;\n    return simpleSnackBarRef;\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} container\n * @param {?} overlayRef\n * @return {?}\n */\nprivate _attachSnackbarContent<T>(component: ComponentType<T>,\n                                    container: MdSnackBarContainer,\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\n    let /** @type {?} */ portal = new ComponentPortal(component);\n    let /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n    return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    let /** @type {?} */ state = new OverlayState();\n    state.positionStrategy = this._overlay.position().global()\n        .centerHorizontally()\n        .bottom('0');\n    return this._overlay.create(state);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {OverlayModule, PortalModule, CompatibilityModule, LIVE_ANNOUNCER_PROVIDER} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSnackBarModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    CompatibilityModule,\n  ],\n  exports: [MdSnackBarContainer, CompatibilityModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\n\nexport {MdSnackBar} from './snack-bar';\nexport {SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer} from './snack-bar-container';\nexport {MdSnackBarConfig} from './snack-bar-config';\nexport {MdSnackBarRef} from './snack-bar-ref';\nexport {SimpleSnackBar} from './simple-snack-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '../core';\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends TemplatePortalDirective {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {TemplatePortal} from '../core/portal/portal';\nimport {\n  ViewContainerRef, Input, TemplateRef, ViewChild, OnInit, ContentChild,\n  Component\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nimport {MdTabLabel} from './tab-label';\nexport class MdTab implements OnInit {\n  /** Content for the tab label given by <ng-template md-tab-label>. */\n   templateLabel: MdTabLabel;\n\n  /** Template inside the MdTab view that contains an <ng-content>. */\n   _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n   textLabel: string = '';\nprivate _contentPortal: TemplatePortal = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal { return this._contentPortal; }\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number = null;\nprivate _disabled = false;\n/**\n * Whether the tab is disabled\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/** @type {?} */\nMdTab.prototype._disabled;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {MdTab} from './tab';\nimport'rxjs/add/operator/map';\n\n\n/** Used to generate unique ID's for each tab component */\nlet /** @type {?} */ nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup {\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\nprivate _isInitialized: boolean = false;\nprivate _indexToSelect = 0;\nprivate _tabBodyWrapperHeight: number = null;\nprivate _dynamicHeight: boolean = false;\n/**\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\nprivate _selectedIndex: number = null;\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n\n  /** Position of the tab header. */\n  \n  headerPosition: MdTabHeaderPosition = 'above';\n/**\n * Output to enable support for two-way binding on ([selectedIndex])\n * @return {?}\n */\nget selectedIndexChange(): Observable<number> {\n    return this.selectChange.map(event => event.index);\n  }\nprivate _onFocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when focus has changed within a tab group.\n * @return {?}\n */\nget focusChange(): Observable<MdTabChangeEvent> {\n    return this._onFocusChange.asObservable();\n  }\nprivate _onSelectChange: EventEmitter<MdTabChangeEvent> =\n      new EventEmitter<MdTabChangeEvent>(true);\n/**\n * Event emitted when the tab selection has changed.\n * @return {?}\n */\nget selectChange(): Observable<MdTabChangeEvent> {\n    return this._onSelectChange.asObservable();\n  }\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n */\nconstructor(private _renderer: Renderer) {\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n    // ensures that values like NaN can't get through and which would otherwise throw the\n    // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n    this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != this._indexToSelect && this._selectedIndex != null) {\n      this._onSelectChange.emit(this._createChangeEvent(this._indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - this._indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = this._indexToSelect - this._selectedIndex;\n      }\n    });\n\n    this._selectedIndex = this._indexToSelect;\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this._onFocusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  host: {\n    '[class.mat-tab-group]': 'true',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Whether the tab group should grow to the size of the active tab\n * @type {?}\n */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/** @type {?} */\nMdTabGroup.prototype._onFocusChange;\n/** @type {?} */\nMdTabGroup.prototype._onSelectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, ElementRef, Renderer, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper {\n/**\n * @param {?} elementRef\n * @param {?} _renderer\n */\nconstructor(public elementRef: ElementRef,\nprivate _renderer: Renderer) {}\nprivate _disabled: boolean = false;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this.elementRef.nativeElement, 'focus');\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.propDecorators;\n/**\n * Whether the tab label is disabled.\n * @type {?}\n */\nMdTabLabelWrapper.prototype._disabled;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n/** @type {?} */\nMdTabLabelWrapper.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, Renderer, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    this._ngZone.runOutsideAngular(() => {\n      requestAnimationFrame(() => {\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'left',\n            this._getLeftPosition(element));\n        this._renderer.setElementStyle(this._elementRef.nativeElement, 'width',\n            this._getElementWidth(element));\n      });\n    });\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Generates the pixel distance from the left based on the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getLeftPosition(element: HTMLElement): string {\n    return element ? element.offsetLeft + 'px' : '0';\n  }\n/**\n * Generates the pixel width from the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementWidth(element: HTMLElement): string {\n    return element ? element.offsetWidth + 'px' : '0';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    '[class.mat-ink-bar]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  ChangeDetectorRef,\n  AfterViewChecked,\n  AfterContentChecked,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective, Dir, LayoutDirection} from '../core';\nimport'rxjs/add/operator/map';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked, AfterContentChecked {\n  /** The portal host inside of this container into which the tab body content will be loaded. */\n   _portalHost: PortalHostDirective;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  \n  onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  \n  onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n   _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  _position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /** Whether the element is allowed to be animated. */\n  _canBeAnimated: boolean = false;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  _origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _dir\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * After the content has been checked, determines whether the element should be allowed to\n * animate. This has to be limited, because under a specific set of circumstances (see #2151),\n * the animations can be triggered too early, which either crashes Chrome by putting it into an\n * infinite loop (with Angular < 2.3.0) or throws an error because the element doesn't have a\n * computed style (with Angular > 2.3.0). This can alternatively be determined by checking the\n * transform: canBeAnimated = getComputedStyle(element) !== '', however document.contains should\n * be faster since it doesn't cause a reflow.\n * \n * TODO: This can safely be removed after we stop supporting Angular < 2.4.2. The fix landed via\n * https://github.com/angular/angular/commit/21030e9a1cf30e8101399d8535ed72d847a23ba6\n * @return {?}\n */\nngAfterContentChecked() {\n    if (!this._canBeAnimated) {\n      this._canBeAnimated = document.body.contains(this._elementRef.nativeElement);\n\n      if (this._canBeAnimated) {\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  host: {\n    '[class.mat-tab-body]': 'true',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * Whether the element is allowed to be animated.\n * @type {?}\n */\nMdTabBody.prototype._canBeAnimated;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._dir;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n/** @type {?} */\nMdTabBody.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ViewChild,\n  Component,\n  Input,\n  QueryList,\n  ElementRef,\n  ViewEncapsulation,\n  ContentChildren,\n  Output,\n  EventEmitter,\n  Optional,\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\nimport {RIGHT_ARROW, LEFT_ARROW, ENTER, Dir, LayoutDirection} from '../core';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdInkBar} from './ink-bar';\nimport {Subscription} from 'rxjs/Subscription';\nimport {applyCssTransform} from '../core/style/apply-transform';\nimport'rxjs/add/operator/map';\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst /** @type {?} */ EXAGGERATED_OVERSCROLL = 60;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader implements AfterContentChecked, AfterContentInit, OnDestroy {\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\nprivate _focusIndex: number = 0;\nprivate _scrollDistance = 0;\nprivate _selectedIndexChanged = false;\nprivate _directionChange: Subscription;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\nprivate _tabLabelCount: number;\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n\n  /** Event emitted when the option is selected. */\n   selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n   indexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _dir: Dir) {}\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    this._alignInkBarToSelectedTab();\n\n    if (this._dir) {\n      this._directionChange = this._dir.dirChange.subscribe(() => this._alignInkBarToSelectedTab());\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._directionChange) {\n      this._directionChange.unsubscribe();\n      this._directionChange = null;\n    }\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    let /** @type {?} */ translateX = this.scrollDistance + 'px';\n    if (this._getLayoutDirection() == 'ltr') {\n      translateX = '-' + translateX;\n    }\n\n    applyCssTransform(this._tabList.nativeElement, `translate3d(${translateX}, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance;  }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers\n        ? this._labelWrappers.toArray()[labelIndex]\n        :  null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    this._showPaginationControls =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!this._showPaginationControls) {\n      this.scrollDistance = 0;\n    }\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n        ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n        : null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Subscription to changes in the layout direction.\n * @type {?}\n */\nMdTabHeader.prototype._directionChange;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PortalModule} from '../core';\nimport {MdRippleModule} from '../core/ripple/index';\nimport {ObserveContentModule} from '../core/observe-content/observe-content';\nimport {MdTab} from './tab';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabNavBar, MdTabLink, MdTabLinkRipple} from './tab-nav-bar/tab-nav-bar';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabBody} from './tab-body';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {MdTabHeader} from './tab-header';\nimport {SCROLL_DISPATCHER_PROVIDER} from '../core/overlay/scroll/scroll-dispatcher';\nexport class MdTabsModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdTabsModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserveContentModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNavBar,\n    MdTabLink,\n    MdTabLinkRipple\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNavBar,\n    MdTabLink,\n    MdTabBody,\n    MdTabLinkRipple,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER, SCROLL_DISPATCHER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\n\nexport {MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup} from './tab-group';\nexport {MdInkBar} from './ink-bar';\nexport {MdTabBody, MdTabBodyOriginState, MdTabBodyPositionState} from './tab-body';\nexport {MdTabHeader, ScrollDirection} from './tab-header';\nexport {MdTabLabelWrapper} from './tab-label-wrapper';\nexport {MdTab} from './tab';\nexport {MdTabLabel} from './tab-label';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer\n} from '@angular/core';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {\n    '[class.mat-toolbar-row]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\nexport class MdToolbar {\nprivate _color: string;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(private elementRef: ElementRef,\nprivate renderer: Renderer) { }\n/**\n * The color of the toolbar. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string {\n    return this._color;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this.renderer.setElementClass(this.elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  host: {\n    '[class.mat-toolbar]': 'true',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n};\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n/** @type {?} */\nMdToolbar.propDecorators;\n/** @type {?} */\nMdToolbar.prototype._color;\n/** @type {?} */\nMdToolbar.prototype.elementRef;\n/** @type {?} */\nMdToolbar.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {SPACE, LEFT_ARROW, RIGHT_ARROW} from '../core/keyboard/keycodes';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n * \n * Example:\n * \n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nexport class MdChipList implements AfterContentInit {\nprivate _subscribed: WeakMap<MdChip, boolean> = new WeakMap();\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager;\n\n  /** The chip components contained within this chip list. */\n  chips: QueryList<MdChip>;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap();\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n    });\n  }\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * it's selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * Programmatically focus the chip list. This in turn focuses the first\n * non-disabled chip in this chip list.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip.\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager\n    if (target && target.classList.contains('mat-chip')) {\n      switch (event.keyCode) {\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this._toggleSelectOnFocusedChip();\n          }\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n          break;\n        case LEFT_ARROW:\n          this._keyManager.setPreviousItemActive();\n          event.preventDefault();\n          break;\n        case RIGHT_ARROW:\n          this._keyManager.setNextItemActive();\n          event.preventDefault();\n          break;\n        default:\n          this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Toggles the selected state of the currently focused chip.\n * @return {?}\n */\nprotected _toggleSelectOnFocusedChip(): void {\n    // Allow disabling of chip selection\n    if (!this.selectable) {\n      return;\n    }\n\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedChip: MdChip = this.chips.toArray()[focusedIndex];\n\n      if (focusedChip) {\n        focusedChip.toggleSelected();\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._subscribed.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip.onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and check focus\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        // Check whether the chip is the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n\n      this._subscribed.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._subscribed.set(chip, true);\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  host: {\n    // Properties\n    'tabindex': '0',\n    'role': 'listbox',\n    '[class.mat-chip-list]': 'true',\n\n    // Events\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectable': [{ type: Input },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._subscribed;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdChip} from './chip';\nexport class MdChipsModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdChipsModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip],\n  declarations: [MdChipList, MdChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\n\nexport {MdChipList} from './chip-list';\nexport {MdChipEvent,MdChip} from './chip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, SecurityContext} from '@angular/core';\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\nimport {Http} from '@angular/http';\nimport {MdError} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/observable/forkJoin';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/share';\nimport'rxjs/add/operator/finally';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/observable/throw';\n/**\n * Exception thrown when attempting to load an icon with a name that cannot be found.\n * \\@docs-private\n */\nexport class MdIconNameNotFoundError extends MdError {\n/**\n * @param {?} iconName\n */\nconstructor(iconName: string) {\n    super(`Unable to find icon with the name \"${iconName}\"`);\n  }\n}\n/**\n * Exception thrown when attempting to load SVG content that does not contain the expected\n * <svg> tag.\n * \\@docs-private\n */\nexport class MdIconSvgTagNotFoundError extends MdError {\nconstructor() {\n    super('<svg> tag not found');\n  }\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n\n/** Returns the cache key to use for an icon namespace and name. */\nconst /** @type {?} */ iconKey = (namespace: string, name: string) => namespace + ':' + name;\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\nprivate _fontCssClassesByAlias = new Map<string, string>();\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(private _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    if (this._iconSetConfigs.has(namespace)) {\n      this._iconSetConfigs.get(namespace).push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (this._cachedIconsByUrl.has(url)) {\n      return Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));\n    }\n    return this._loadSvgIconFromConfig(new SvgIconConfig(url))\n        .do(svg => this._cachedIconsByUrl.set(url, svg))\n        .map(svg => cloneSvg(svg));\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an MdIconNameNotFoundError.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    if (this._svgIconConfigs.has(key)) {\n      return this._getSvgFromConfig(this._svgIconConfigs.get(key));\n    }\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n    return Observable.throw(new MdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return Observable.of(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config)\n          .do(svg => config.svgElement = svg)\n          .map(svg => cloneSvg(svg));\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * MdIconNameNotFoundError if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return Observable.of(namedIcon);\n    }\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\n        .filter(iconSetConfig => !iconSetConfig.svgElement)\n        .map(iconSetConfig =>\n            this._loadSvgIconSetFromConfig(iconSetConfig)\n                .catch((err: any, caught: Observable<SVGElement>): Observable<SVGElement> => {\n                  let /** @type {?} */ url =\n                      this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n                  // Swallow errors fetching individual URLs so the combined Observable won't\n                  // necessarily fail.\n                  console.log(`Loading icon set URL: ${url} failed: ${err}`);\n                  return Observable.of(null);\n                })\n                .do(svg => {\n                  // Cache SVG element.\n                  if (svg) {\n                    iconSetConfig.svgElement = svg;\n                  }\n                }));\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return Observable.forkJoin(iconSetFetchRequests)\n        .map((ignoredResults: any) => {\n          const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n          if (!foundIcon) {\n            throw new MdIconNameNotFoundError(name);\n          }\n          return foundIcon;\n        });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .map(svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url)\n        .map(svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n    if (!iconNode) {\n      return null;\n    }\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() == 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw new MdIconSvgTagNotFoundError();\n    }\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    if (this._inProgressUrlFetches.has(url)) {\n      return this._inProgressUrlFetches.get(url);\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = /** @type {?} */(( <Observable<string>> this._http.get(url)\n        .map(response => response.text())\n        .finally(() => {\n          this._inProgressUrlFetches.delete(url);\n        })\n        .share()));\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer,\n  SimpleChange,\n  ViewEncapsulation,\n  AfterViewChecked,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {MdError} from '../core';\nimport {MdIconRegistry, MdIconNameNotFoundError} from './icon-registry';\n/**\n * Exception thrown when an invalid icon name is passed to an md-icon component.\n */\nexport class MdIconInvalidNameError extends MdError {\n/**\n * @param {?} iconName\n */\nconstructor(iconName: string) {\n      super(`Invalid icon name: \"${iconName}\"`);\n  }\n}\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon implements OnChanges, OnInit, AfterViewChecked {\nprivate _color: string;\n\n  /** Name of the icon in the SVG icon set. */\n   svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n   fontSet: string;\n\n  /** Name of an icon within a font set. */\n   fontIcon: string;\n\n  /** Alt label to be used for accessibility. */\n   alt: string;\n\n  /** Screenreader label for the icon. */\n   hostAriaLabel: string = '';\n/**\n * Color of the icon.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\nprivate _previousAriaLabel: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _mdIconRegistry\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _mdIconRegistry: MdIconRegistry) { }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws a MdIconInvalidNameError if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws MdIconInvalidNameError)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        // Use default namespace.\n        return ['', parts[0]];\n      case 2:\n        return /** @type {?} */(( <[string, string]>parts));\n      default:\n        throw new MdIconInvalidNameError(iconName);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n    const /** @type {?} */ changedInputs = Object.keys(changes);\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n        this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(\n            svg => this._setSvgElement(svg),\n            (err: MdIconNameNotFoundError) => console.log(`Error retrieving icon: ${err.message}`));\n      }\n    }\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n    this._updateAriaLabel();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewChecked() {\n    // Update aria label here because it may depend on the projected text content.\n    // (e.g. <md-icon>home</md-icon> should use 'home').\n    this._updateAriaLabel();\n  }\n/**\n * @return {?}\n */\nprivate _updateAriaLabel() {\n      const /** @type {?} */ ariaLabel = this._getAriaLabel();\n      if (ariaLabel && ariaLabel !== this._previousAriaLabel) {\n        this._previousAriaLabel = ariaLabel;\n        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', ariaLabel);\n      }\n  }\n/**\n * @return {?}\n */\nprivate _getAriaLabel() {\n    // If the parent provided an aria-label attribute value, use it as-is. Otherwise look for a\n    // reasonable value from the alt attribute, font icon name, SVG icon name, or (for ligatures)\n    // the text content of the directive.\n    const /** @type {?} */ label =\n        this.hostAriaLabel ||\n        this.alt ||\n        this.fontIcon ||\n        this._splitIconName(this.svgIcon)[1];\n    if (label) {\n      return label;\n    }\n    // The \"content\" of an SVG icon is not a useful label.\n    if (this._usingFontIcon()) {\n      const /** @type {?} */ text = this._elementRef.nativeElement.textContent;\n      if (text) {\n        return text;\n      }\n    }\n    // TODO: Warn here in dev mode.\n    return null;\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    // Remove existing child nodes and add the new SVG element.\n    // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n    // but it fails in IE11: https://github.com/angular/angular/issues/6327\n    layoutElement.innerHTML = '';\n    this._renderer.projectNodes(layoutElement, [svg]);\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.setElementClass(elem, this._previousFontSetClass, false);\n      }\n      if (fontSetClass) {\n        this._renderer.setElementClass(elem, fontSetClass, true);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.setElementClass(elem, this._previousFontIconClass, false);\n      }\n      if (this.fontIcon) {\n        this._renderer.setElementClass(elem, this.fontIcon, true);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  host: {\n    'role': 'img',\n    '[class.mat-icon]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: MdIconRegistry, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n'alt': [{ type: Input },],\n'hostAriaLabel': [{ type: Input, args: ['aria-label', ] },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/** @type {?} */\nMdIcon.prototype._color;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/**\n * Alt label to be used for accessibility.\n * @type {?}\n */\nMdIcon.prototype.alt;\n/**\n * Screenreader label for the icon.\n * @type {?}\n */\nMdIcon.prototype.hostAriaLabel;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._previousAriaLabel;\n/** @type {?} */\nMdIcon.prototype._elementRef;\n/** @type {?} */\nMdIcon.prototype._renderer;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n\nexport const /** @type {?} */ ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], Http, DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {HttpModule} from '@angular/http';\nimport {CompatibilityModule} from '../core';\nimport {MdIcon, ICON_REGISTRY_PROVIDER} from './icon';\nexport class MdIconModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdIconModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [HttpModule, CompatibilityModule],\n  exports: [MdIcon, CompatibilityModule],\n  declarations: [MdIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\n\n\nexport {MdIconInvalidNameError,MdIcon,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon';\nexport {MdIconRegistry} from './icon-registry';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  HostBinding,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer, Directive\n} from '@angular/core';\n\n\n// TODO(josephperrott): Benchpress tests.\n\n/** A single degree in radians. */\nconst /** @type {?} */ DEGREE_IN_RADIANS = Math.PI / 180;\n/** Duration of the indeterminate animation. */\nconst /** @type {?} */ DURATION_INDETERMINATE = 667;\n/** Duration of the indeterminate animation. */\nconst /** @type {?} */ DURATION_DETERMINATE = 225;\n/** Start animation value of the indeterminate animation */\nconst /** @type {?} */ startIndeterminate = 3;\n/** End animation value of the indeterminate animation */\nconst /** @type {?} */ endIndeterminate = 80;\n/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */\nconst /** @type {?} */ MAX_ANGLE = 359.99 / 100;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    '[class.mat-progress-spinner]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner implements OnDestroy {\nprivate _lastAnimationId: number = 0;\nprivate _interdeterminateInterval: number;\nprivate _path: SVGPathElement;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\nprivate _color: string = 'primary';\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number) {\n    clearInterval(this._interdeterminateInterval);\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * The color of the progress-spinner. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() {\n    return this._mode;\n  }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer\n  ) {}\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        let /** @type {?} */ elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    // Caches the path reference so it doesn't have to be looked up every time.\n    let /** @type {?} */ path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');\n\n    // Ensure that the path was found. This may not be the case if the\n    // animation function fires too early.\n    if (path) {\n      path.setAttribute('d', getSvgArc(currentValue, rotation));\n    }\n  }\n/**\n * Updates the color of the progress-spinner by adding the new palette class to the element\n * and removing the old one.\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * Sets the given palette class on the component element.\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax'\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/** @type {?} */\nMdProgressSpinner.prototype._color;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n/** @type {?} */\nMdProgressSpinner.prototype._elementRef;\n/** @type {?} */\nMdProgressSpinner.prototype._renderer;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer) {\n    super(ngZone, elementRef, renderer);\n    this.mode = 'indeterminate';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    '[class.mat-spinner]': 'true',\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number) {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = 40;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CompatibilityModule} from '../core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nclass MdProgressSpinnerModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdProgressSpinnerModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    CompatibilityModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\nexport {MdProgressSpinnerModule};\nexport {ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinner,MdSpinner} from './progress-spinner';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  HostBinding,\n  Input,\n} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n  /** Color of the progress bar. */\n   color: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  \n  \n  mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-progress-bar]': 'true',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },{ type: HostBinding, args: ['attr.mode', ] },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdError} from '../core/errors/error';\n/**\n * \\@docs-private\n */\nexport class MdInputContainerPlaceholderConflictError extends MdError {\nconstructor() {\n    super('Placeholder attribute and child element were both specified.');\n  }\n}\n/**\n * \\@docs-private\n */\nexport class MdInputContainerUnsupportedTypeError extends MdError {\n/**\n * @param {?} type\n */\nconstructor(type: string) {\n    super(`Input type \"${type}\" isn't supported by md-input-container.`);\n  }\n}\n/**\n * \\@docs-private\n */\nexport class MdInputContainerDuplicatedHintError extends MdError {\n/**\n * @param {?} align\n */\nconstructor(align: string) {\n    super(`A hint was already declared for 'align=\"${align}\"'.`);\n  }\n}\n/**\n * \\@docs-private\n */\nexport class MdInputContainerMissingMdInputError extends MdError {\nconstructor() {\n    super('md-input-container must contain an mdInput directive. Did you forget to add mdInput ' +\n          'to the native input or textarea element?');\n  }\n}\n","import {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  Renderer,\n  Self,\n  ViewEncapsulation\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '../core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  MdInputContainerDuplicatedHintError,\n  MdInputContainerMissingMdInputError,\n  MdInputContainerPlaceholderConflictError,\n  MdInputContainerUnsupportedTypeError\n} from './input-container-errors';\n\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n/**\n * Hint text to be shown underneath the input.\n */\nexport class MdHint {\n  // Whether to align the hint label at the start or end of the line.\n   align: 'start' | 'end' = 'start';\n\n  // Unique ID for the hint. Used for the aria-describedby on the input.\n   id: string = `md-input-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    '[class.mat-hint]': 'true',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/** @type {?} */\nMdHint.prototype.align;\n/** @type {?} */\nMdHint.prototype.id;\n}\n\n/**\n * Single error message to be shown underneath the input.\n */\nexport class MdErrorDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    '[class.mat-input-error]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdErrorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdErrorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdErrorDirective.ctorParameters;\n}\n\n/**\n * Prefix to be placed the the front of the input.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix], [md-prefix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n/**\n * Suffix to be placed at the end of the input.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix], [md-suffix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n/**\n * Marker for the input element that `MdInputContainer` is wrapping.\n */\nexport class MdInputDirective {\nprivate _type = 'text';\nprivate _placeholder: string = '';\nprivate _disabled = false;\nprivate _required = false;\nprivate _id: string;\nprivate _cachedUid: string;\n\n  /** Whether the element is focused or not. */\n  focused = false;\n\n  /** Sets the aria-describedby attribute on the input for improved a11y. */\n  ariaDescribedby: string;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._ngControl ? this._ngControl.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    if (this._placeholder !== value) {\n      this._placeholder = value;\n      this._placeholderChange.emit(this._placeholder);\n    }\n  }\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setElementProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) { this._elementRef.nativeElement.value = value; }\n\n  /**\n   * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n   */\n   _placeholderChange = new EventEmitter<string>();\n/**\n * @return {?}\n */\nget empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @return {?}\n */\nprivate get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _ngControl\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer,\npublic _ngControl: NgControl) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n/**\n * Focuses the input element.\n * @return {?}\n */\nfocus() { this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus'); }\n/**\n * @return {?}\n */\n_onFocus() { this.focused = true; }\n/**\n * @return {?}\n */\n_onBlur() { this.focused = false; }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n      throw new MdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; }\n/**\n * @return {?}\n */\nprivate _isBadInput() {\n    return ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n    return nativeElement ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    '[class.mat-input-element]': 'true',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '(blur)': '_onBlur()',\n    '(focus)': '_onFocus()',\n    '(input)': '_onInput()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'_placeholderChange': [{ type: Output },],\n};\n}\n\nfunction MdInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputDirective.ctorParameters;\n/** @type {?} */\nMdInputDirective.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInputDirective.prototype._type;\n/** @type {?} */\nMdInputDirective.prototype._placeholder;\n/** @type {?} */\nMdInputDirective.prototype._disabled;\n/** @type {?} */\nMdInputDirective.prototype._required;\n/** @type {?} */\nMdInputDirective.prototype._id;\n/** @type {?} */\nMdInputDirective.prototype._cachedUid;\n/**\n * Whether the element is focused or not.\n * @type {?}\n */\nMdInputDirective.prototype.focused;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInputDirective.prototype.ariaDescribedby;\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n * @type {?}\n */\nMdInputDirective.prototype._placeholderChange;\n/** @type {?} */\nMdInputDirective.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInputDirective.prototype._elementRef;\n/** @type {?} */\nMdInputDirective.prototype._renderer;\n/** @type {?} */\nMdInputDirective.prototype._ngControl;\n}\n\n/**\n * Container for text inputs that applies Material Design styling and behavior.\n */\nexport class MdInputContainer implements AfterViewInit, AfterContentInit {\n  /** Alignment of the input container's content. */\n   align: 'start' | 'end' = 'start';\n\n  /** Color of the input divider, based on the theme. */\n   color: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use color instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n\n  /** State of the md-hint and md-error animations. */\n  _subscriptAnimationState: string = '';\n/**\n * Text for the input hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType = 'auto';\n\n   _mdInputChild: MdInputDirective;\n\n   _placeholderChild: MdPlaceholder;\n\n   _errorChildren: QueryList<MdErrorDirective>;\n\n   _hintChildren: QueryList<MdHint>;\n\n   _prefixChildren: QueryList<MdPrefix>;\n\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _changeDetectorRef\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n */\nconstructor(\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (!this._mdInputChild) {\n      throw new MdInputContainerMissingMdInputError();\n    }\n\n    this._processHints();\n    this._validatePlaceholders();\n\n    // Re-validate when things change.\n    this._hintChildren.changes.subscribe(() => this._processHints());\n    this._mdInputChild._placeholderChange.subscribe(() => this._validatePlaceholders());\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && ( /** @type {?} */((control as any)))[prop];\n  }\n/**\n * Whether the input has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\n/**\n * Focuses the underlying input.\n * @return {?}\n */\n_focusInput() { this._mdInputChild.focus(); }\n/**\n * Whether the input container is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ control = this._mdInputChild._ngControl;\n    const /** @type {?} */ isInvalid = control && control.invalid;\n    const /** @type {?} */ isTouched = control && control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren.length > 0 && this._isErrorState()) ? 'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `input` attribute or child element with the\n * `md-placeholder` attribute.\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw new MdInputContainerPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint = null;\n      let /** @type {?} */ endHint: MdHint = null;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw new MdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw new MdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the child input's `aria-describedby` to a space-separated list of the ids\n * of the currently-specified hints, as well as a generated id for the hint label.\n * @return {?}\n */\nprivate _syncAriaDescribedby() {\n    let /** @type {?} */ ids: string[] = [];\n    let /** @type {?} */ startHint = this._hintChildren ?\n        this._hintChildren.find(hint => hint.align === 'start') : null;\n    let /** @type {?} */ endHint = this._hintChildren ?\n        this._hintChildren.find(hint => hint.align === 'end') : null;\n\n    if (startHint) {\n      ids.push(startHint.id);\n    } else if (this._hintLabel) {\n      ids.push(this._hintLabelId);\n    }\n\n    if (endHint) {\n      ids.push(endHint.id);\n    }\n\n    this._mdInputChild.ariaDescribedby = ids.join(' ');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  animations: [\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n      ])\n    ])\n  ],\n  host: {\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    '[class.mat-input-container]': 'true',\n    '[class.mat-input-invalid]': '_isErrorState()',\n    '[class.mat-focused]': '_mdInputChild.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'_mdInputChild': [{ type: ContentChild, args: [MdInputDirective, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdInputContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputContainer.ctorParameters;\n/** @type {?} */\nMdInputContainer.propDecorators;\n/**\n * Alignment of the input container's content.\n * @type {?}\n */\nMdInputContainer.prototype.align;\n/**\n * Color of the input divider, based on the theme.\n * @type {?}\n */\nMdInputContainer.prototype.color;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdInputContainer.prototype._subscriptAnimationState;\n/** @type {?} */\nMdInputContainer.prototype._hintLabel;\n/** @type {?} */\nMdInputContainer.prototype._hintLabelId;\n/** @type {?} */\nMdInputContainer.prototype._floatPlaceholder;\n/** @type {?} */\nMdInputContainer.prototype._mdInputChild;\n/** @type {?} */\nMdInputContainer.prototype._placeholderChild;\n/** @type {?} */\nMdInputContainer.prototype._errorChildren;\n/** @type {?} */\nMdInputContainer.prototype._hintChildren;\n/** @type {?} */\nMdInputContainer.prototype._prefixChildren;\n/** @type {?} */\nMdInputContainer.prototype._suffixChildren;\n/** @type {?} */\nMdInputContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdInputContainer.prototype._parentForm;\n/** @type {?} */\nMdInputContainer.prototype._parentFormGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements OnInit {\n/**\n * @deprecated Use mdAutosizeMinRows\n */\nminRows: number;\n/**\n * Minimum number of rows for this textarea.\n * @return {?}\n */\nget mdAutosizeMinRows(): number { return this.minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMinRows(value: number) { this.minRows = value; }\n/**\n * @deprecated Use mdAutosizeMaxRows\n */\nmaxRows: number;\n/**\n * Minimum number of rows for this textarea.\n * @return {?}\n */\nget mdAutosizeMaxRows(): number { return this.maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMaxRows(value: number) { this.maxRows = value; }\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * The minimum height of the textarea as determined by minRows.\n * @return {?}\n */\nget _minHeight() {\n    return this.minRows ? `${this.minRows * this._cachedLineHeight}px` : null;\n  }\n/**\n * The maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\nget _maxHeight() {\n    return this.maxRows ? `${this.maxRows * this._cachedLineHeight}px` : null;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    textarea.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.offsetHeight;\n    textarea.parentNode.removeChild(textareaClone);\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n    '[style.min-height]': '_minHeight',\n    '[style.max-height]': '_maxHeight',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input },],\n'mdAutosizeMinRows': [{ type: Input },],\n'maxRows': [{ type: Input },],\n'mdAutosizeMaxRows': [{ type: Input },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * @deprecated Use mdAutosizeMinRows\n * @type {?}\n */\nMdTextareaAutosize.prototype.minRows;\n/**\n * @deprecated Use mdAutosizeMaxRows\n * @type {?}\n */\nMdTextareaAutosize.prototype.maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {\n  MdErrorDirective,\n  MdHint,\n  MdInputContainer,\n  MdInputDirective,\n  MdPlaceholder,\n  MdPrefix,\n  MdSuffix\n} from './input-container';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdInputModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdInputModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\n\nexport {MdTextareaAutosize} from './autosize';\nexport {FloatPlaceholderType,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer} from './input-container';\nexport {MdInputContainerPlaceholderConflictError,MdInputContainerUnsupportedTypeError,MdInputContainerDuplicatedHintError,MdInputContainerMissingMdInputError} from './input-container-errors';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ViewContainerRef} from '@angular/core';\nimport {AriaLivePoliteness} from '../core';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n  /** The politeness level for the MdAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MdAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef = null;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  extraClasses?: string[];\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n}\n\n","import {\n  Component,\n  ViewEncapsulation,\n  ContentChildren,\n  ContentChild,\n  QueryList,\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  OpaqueToken,\n  Optional,\n  Renderer,\n  AfterContentInit,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\n\n/**\n * Token used to inject the list type into child MdListItem components so they can know whether\n * they're in a nav list (and thus should use an MdRipple).\n */\nexport const /** @type {?} */ LIST_TYPE_TOKEN = new OpaqueToken('list_type');\n\nconst /** @type {?} */ NORMAL_LIST_TYPE = 'normal_list_type';\nconst /** @type {?} */ NAV_LIST_TYPE = 'nav_list_type';\nexport class MdList {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {\n    'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  providers: [{ provide: LIST_TYPE_TOKEN, useValue: NORMAL_LIST_TYPE }],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {\n    '[class.mat-list]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {\n    '[class.mat-nav-list]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive to set the ListType token to NAV_LIST_TYPE.\n */\nexport class MdNavListTokenSetter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  providers: [{ provide: LIST_TYPE_TOKEN, useValue: NAV_LIST_TYPE }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListTokenSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListTokenSetter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListTokenSetter.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    '[class.mat-divider]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar]',\n  host: {\n    '[class.mat-list-avatar]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon]',\n  host: {\n    '[class.mat-list-icon]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader]',\n  host: {\n    '[class.mat-subheader]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\nexport class MdListItem implements AfterContentInit {\n  /**\n   * Whether the ripple effect on click should be disabled. This applies only to list items that\n   * are children of an md-nav-list; md-list items never have ripples.\n   */\n   disableRipple: boolean = false;\n  _hasFocus: boolean = false;\nprivate _lineSetter: MdLineSetter;\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    this._renderer.setElementClass(\n        this._element.nativeElement, 'mat-list-item-avatar', avatar != null);\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _listType\n */\nconstructor(private _renderer: Renderer,\nprivate _element: ElementRef,\nprivate _listType: string) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && (this._listType === NAV_LIST_TYPE);\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._hasFocus = true;\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._hasFocus = false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '[class.mat-list-item]': 'true',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIST_TYPE_TOKEN, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/**\n * Whether the ripple effect on click should be disabled. This applies only to list items that\n * are children of an md-nav-list; md-list items never have ripples.\n * @type {?}\n */\nMdListItem.prototype.disableRipple;\n/** @type {?} */\nMdListItem.prototype._hasFocus;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._listType;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  Renderer,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit, Directive\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: string): void {\n    this._renderer.setElementStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'role': 'listitem',\n    '[class.mat-grid-tile]': 'true',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar]',\n  host: {\n    '[class.mat-grid-avatar]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {\n    '[class.mat-grid-tile-header]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {\n    '[class.mat-grid-tile-footer]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {MdLineModule, MdRippleModule, CompatibilityModule} from '../core';\nimport {\n  MdList,\n  MdListItem,\n  MdListDivider,\n  MdListAvatarCssMatStyler,\n  MdListIconCssMatStyler,\n  MdListCssMatStyler,\n  MdNavListCssMatStyler,\n  MdDividerCssMatStyler,\n  MdListSubheaderCssMatStyler,\n  MdNavListTokenSetter,\n} from './list';\nexport class MdListModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdListModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, CompatibilityModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    CompatibilityModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n    MdNavListTokenSetter,\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n    MdNavListTokenSetter,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\n\nexport {MdListDivider,LIST_TYPE_TOKEN,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdNavListTokenSetter,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","import {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {MdGridTileTooWideError} from './grid-list-errors';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw new MdGridTileTooWideError(tileCols, this.tracker.length);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","import {MdError} from '../core';\n/**\n * Exception thrown when cols property is missing from grid-list\n * \\@docs-private\n */\nexport class MdGridListColsError extends MdError {\nconstructor() {\n    super(`md-grid-list: must pass in number of columns. Example: <md-grid-list cols=\"3\">`);\n  }\n}\n/**\n * Exception thrown when a tile's colspan is longer than the number of cols in list\n * \\@docs-private\n */\nexport class MdGridTileTooWideError extends MdError {\n/**\n * @param {?} cols\n * @param {?} listLength\n */\nconstructor(cols: number, listLength: number) {\n    super(`md-grid-list: tile with colspan ${cols} is wider than grid with cols=\"${listLength}\".`);\n  }\n}\n/**\n * Exception thrown when an invalid ratio is passed in as a rowHeight\n * \\@docs-private\n */\nexport class MdGridListBadRatioError extends MdError {\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n  }\n}\n","import {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {MdGridListBadRatioError} from './grid-list-errors';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n */\nexport class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number, gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height.*/\n  rowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use paddingTop and marginTop to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw new MdGridListBadRatioError(value);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","import {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer,\n  ElementRef,\n  Optional,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {MdGridListColsError} from './grid-list-errors';\nimport {Dir} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\nprivate _cols: number;\nprivate _rowHeight: string;\nprivate _gutter: string = '1px';\nprivate _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n   _tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer,\nprivate _element: ElementRef,\nprivate _dir: Dir) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw new MdGridListColsError();\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string]): void {\n    if (style) {\n      this._renderer.setElementStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'role': 'list',\n    '[class.mat-grid-list]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {MdLineModule, CompatibilityModule} from '../core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdGridListModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, CompatibilityModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    CompatibilityModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\n\nexport {MdGridList} from './grid-list';\nexport {MdGridTile} from './grid-tile';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {\n    '[class.mat-card-content]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-title, mat-card-title',\n  host: {\n    '[class.mat-card-title]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-subtitle, mat-card-subtitle',\n  host: {\n    '[class.mat-card-subtitle]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {\n    '[class.mat-card-actions]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {\n    '[class.mat-card-footer]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image]',\n  host: {\n    '[class.mat-card-sm-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image]',\n  host: {\n    '[class.mat-card-md-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image]',\n  host: {\n    'class.mat-card-lg-image': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image]',\n  host: {\n    '[class.mat-card-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image]',\n  host: {\n    '[class.mat-card-xl-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar]',\n  host: {\n    '[class.mat-card-avatar]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-card]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-card-header]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-card-title-group]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CompatibilityModule} from '../core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdCardModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    CompatibilityModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer\n} from '@angular/core';\n\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip implements Focusable, OnInit, OnDestroy {\n\n  /** Whether or not the chip is disabled. Disabled chips cannot be focused. */\n  protected _disabled: boolean = null;\n\n  /** Whether or not the chip is selected. */\n  protected _selected: boolean = false;\n\n  /** The palette color of selected chips. */\n  protected _color: string = 'primary';\n\n  /** Emitted when the chip is focused. */\n  onFocus = new EventEmitter<MdChipEvent>();\n\n  /** Emitted when the chip is selected. */\n   select = new EventEmitter<MdChipEvent>();\n\n  /** Emitted when the chip is deselected. */\n   deselect = new EventEmitter<MdChipEvent>();\n\n  /** Emitted when the chip is destroyed. */\n   destroy = new EventEmitter<MdChipEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(protected _renderer: Renderer, protected _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._addDefaultCSSClass();\n    this._updateColor(this._color);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Whether or not the chip is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * Sets the disabled state of the chip.\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value) ? true : null;\n  }\n/**\n * A String representation of the current disabled state.\n * @return {?}\n */\nget _isAriaDisabled(): string {\n    return String(coerceBooleanProperty(this.disabled));\n  }\n/**\n * Whether or not this chip is selected.\n * @return {?}\n */\nget selected(): boolean {\n    return this._selected;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n\n    if (this._selected) {\n      this.select.emit({chip: this});\n    } else {\n      this.deselect.emit({chip: this});\n    }\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?} Whether the chip is selected.\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * The color of the chip. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string {\n    return this._color;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');\n    this.onFocus.emit({chip: this});\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.focus();\n    }\n  }\n/**\n * Initializes the appropriate CSS classes based on the chip type (basic or standard).\n * @return {?}\n */\nprivate _addDefaultCSSClass() {\n    let /** @type {?} */ el: HTMLElement = this._elementRef.nativeElement;\n\n    // Always add the `mat-chip` class\n    el.classList.add('mat-chip');\n\n    // If we are a basic chip, also add the `mat-basic-chip` class for :not() targeting\n    if (el.nodeName.toLowerCase() == 'mat-basic-chip' || el.hasAttribute('mat-basic-chip') ||\n        el.nodeName.toLowerCase() == 'md-basic-chip' || el.hasAttribute('md-basic-chip')) {\n      el.classList.add('mat-basic-chip');\n    }\n  }\n/**\n * Updates the private _color variable and the native element.\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * Sets the mat-color on the native element.\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[class.mat-chip]': 'true',\n    'tabindex': '-1',\n    'role': 'option',\n\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n'disabled': [{ type: Input },],\n'selected': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/**\n * Whether or not the chip is disabled. Disabled chips cannot be focused.\n * @type {?}\n */\nMdChip.prototype._disabled;\n/**\n * Whether or not the chip is selected.\n * @type {?}\n */\nMdChip.prototype._selected;\n/**\n * The palette color of selected chips.\n * @type {?}\n */\nMdChip.prototype._color;\n/**\n * Emitted when the chip is focused.\n * @type {?}\n */\nMdChip.prototype.onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/** @type {?} */\nMdChip.prototype._renderer;\n/** @type {?} */\nMdChip.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  Renderer,\n  forwardRef,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n  AfterContentInit,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  HammerInput,\n  FocusOriginMonitor,\n  FocusOrigin,\n  MdRipple,\n  RippleRef\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextId = 0;\n/**\n * Two-state control, which can be also called `switch`.\n */\nexport class MdSlideToggle implements OnDestroy, AfterContentInit, ControlValueAccessor {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId = `md-slide-toggle-${++nextId}`;\nprivate _checked: boolean = false;\nprivate _color: string;\nprivate _isMousedown: boolean = false;\nprivate _slideRenderer: SlideToggleRenderer = null;\nprivate _disabled: boolean = false;\nprivate _required: boolean = false;\nprivate _disableRipple: boolean = false;\nprivate _focusRipple: RippleRef;\n\n  /** Name value will be applied to the input element if present */\n   name: string = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n   id: string = this._uniqueId;\n\n  /** Used to specify the tabIndex value for the underlying input element. */\n   tabIndex: number = 0;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n   labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n   ariaLabel: string = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n   ariaLabelledby: string = null;\n/**\n * Whether the slide-toggle is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the ripple effect for this slide-toggle is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _change: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n   change: Observable<MdSlideToggleChange> = this._change.asObservable();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n   _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n   _ripple: MdRipple;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _focusOriginMonitor\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusOriginMonitor: FocusOriginMonitor) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * The onChangeEvent method will be also called on click.\n * This is because everything for the slide-toggle is wrapped inside of a label,\n * which triggers a onChange event on click.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n    if (!this.disabled && !this._slideRenderer.dragging) {\n      this.toggle();\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    this.onTouched();\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * @return {?}\n */\n_setMousedown() {\n    // We only *show* the focus style when focus has come to the button via the keyboard.\n    // The Material Design spec is silent on this topic, and without doing this, the\n    // button continues to look :active after clicking.\n    // @see http://marcysutton.com/button-focus-hell/\n    this._isMousedown = true;\n    setTimeout(() => this._isMousedown = false, 100);\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n  }\n/**\n * Whether the slide-toggle is checked.\n * @return {?}\n */\nget checked() { return !!this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    if (this.checked !== !!value) {\n      this._checked = value;\n      this.onChange(this._checked);\n    }\n  }\n/**\n * The color of the slide-toggle. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n/**\n * Emits the change event to the `change` output EventEmitter\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this._change.emit(event);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    '[class.mat-slide-toggle]': 'true',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '(mousedown)': '_setMousedown()'\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/** @type {?} */\nMdSlideToggle.prototype._color;\n/** @type {?} */\nMdSlideToggle.prototype._isMousedown;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._disabled;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._disableRipple;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/** @type {?} */\nMdSlideToggle.prototype._change;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._elementRef;\n/** @type {?} */\nMdSlideToggle.prototype._renderer;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\nprivate _thumbEl: HTMLElement;\nprivate _thumbBarEl: HTMLElement;\nprivate _thumbBarWidth: number;\nprivate _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n    this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MdSlideToggle} from './slide-toggle';\nimport {\n  GestureConfig, CompatibilityModule, MdRippleModule, FOCUS_ORIGIN_MONITOR_PROVIDER\n} from '../core';\nexport class MdSlideToggleModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSlideToggleModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdRippleModule, CompatibilityModule],\n  exports: [MdSlideToggle, CompatibilityModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    FOCUS_ORIGIN_MONITOR_PROVIDER,\n    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggle} from './slide-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Dir} from '../core/rtl/dir';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst /** @type {?} */ MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst /** @type {?} */ DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst /** @type {?} */ MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst /** @type {?} */ MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const /** @type {?} */ MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n  /** The MdSlider that changed. */\n  source: MdSlider;\n\n  /** Thew new value of the source slider. */\n  value: number;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * Thew new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider implements ControlValueAccessor, OnDestroy {\n/**\n * Whether or not the slider is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) { this._disabled = coerceBooleanProperty(value); }\nprivate _disabled: boolean = false;\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) { this._invert = coerceBooleanProperty(value); }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() {\n    return this._max;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() {\n    return this._min;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop().length;\n    }\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    this._value = coerceNumberProperty(v, this._value);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _value: number = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) { this._vertical = coerceBooleanProperty(value); }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n\n  /** Event emitted when the slider value has changed. */\n   change = new EventEmitter<MdSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n   input = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string|number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value;\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\nprivate _tickIntervalPercent: number = 0;\nprivate _renderer: SliderRenderer = null;\nprivate _sliderDimensions: ClientRect = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\nprivate _lastChangeValue: number = null;\nprivate _lastInputValue: number = null;\nprivate _roundLabelTo: number;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _dir\n */\nconstructor(renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _dir: Dir) {\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n    this._renderer = new SliderRenderer(this._elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emits a change and input event if the value changed. */\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    this._emitInputEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    event.preventDefault();\n    this._isSliding = true;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitValueIfChanged() {\n    if (this.value != this._lastChangeValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastChangeValue = this.value;\n      this._controlValueAccessorChangeFn(this.value);\n      this.change.emit(event);\n    }\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    if (this.value != this._lastInputValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastInputValue = this.value;\n      this.input.emit(event);\n    }\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number) {\n    return (value - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '[class.mat-slider]': 'true',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._disabled;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._renderer;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * The last value for which a change event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastChangeValue;\n/**\n * The last value for which an input event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastInputValue;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nexport class SliderRenderer {\nprivate _sliderElement: HTMLElement;\n/**\n * @param {?} elementRef\n */\nconstructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\ngetSliderDimensions() {\n    let /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n    return wrapperElement.getBoundingClientRect();\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\naddFocus() {\n    this._sliderElement.focus();\n  }\n}\n\nfunction SliderRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderRenderer.prototype._sliderElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport {Dir, MdError, coerceBooleanProperty} from '../core';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport'rxjs/add/operator/first';\n/**\n * Exception thrown when two MdSidenav are matching the same side.\n */\nexport class MdDuplicatedSidenavError extends MdError {\n/**\n * @param {?} align\n */\nconstructor(align: string) {\n    super(`A sidenav was already declared for 'align=\"${align}\"'`);\n  }\n}\n/**\n * Sidenav toggle promise result.\n */\nexport class MdSidenavToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdSidenavToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavToggleResult.prototype.type;\n/** @type {?} */\nMdSidenavToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-sidenav> component.\n * \n * This component corresponds to the drawer of the sidenav.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdSidenav implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _align: 'start' | 'end' = 'start';\n/**\n * Direction which the sidenav is aligned in.\n * @return {?}\n */\nget align() { return this._align; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) {\n    // Make sure we have a valid value.\n    value = (value == 'end') ? 'end' : 'start';\n    if (value != this._align) {\n      this._align = value;\n      this.onAlignChanged.emit();\n    }\n  }\n\n  /** Mode of the sidenav; one of 'over', 'push' or 'side'. */\n   mode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the sidenav can be closed with the escape key or not.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n\n  /** Whether the sidenav is opened. */\n  _opened: boolean = false;\n\n  /** Event emitted when the sidenav is being opened. Use this to synchronize animations. */\n   onOpenStart = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav is fully opened. */\n   onOpen = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav is being closed. Use this to synchronize animations. */\n   onCloseStart = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav is fully closed. */\n   onClose = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav alignment changes. */\n   onAlignChanged = new EventEmitter<void>();\nprivate _toggleAnimationPromise: Promise<MdSidenavToggleResult> = null;\nprivate _resolveToggleAnimationPromise: (animationFinished: boolean) => void = null;\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the sidenav is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n *     If not available we do not hook on transitions.\n * @param {?} _renderer\n * @param {?} _focusTrapFactory\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusTrapFactory: FocusTrapFactory) {\n\n    this.onOpen.subscribe(() => {\n      this._elementFocusedBeforeSidenavWasOpened = document.activeElement as HTMLElement;\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusFirstTabbableElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => {\n      if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n        this._renderer.invokeElementMethod(this._elementFocusedBeforeSidenavWasOpened, 'focus');\n      } else {\n        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'blur');\n      }\n\n      this._elementFocusedBeforeSidenavWasOpened = null;\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n\n    // This can happen when the sidenav is set to opened in\n    // the template and the transition hasn't ended.\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(true);\n      this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the sidenav is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n * rejected if it didn't).\n * @return {?}\n */\nopen(): Promise<MdSidenavToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n * rejected if it didn't).\n * @return {?}\n */\nclose(): Promise<MdSidenavToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n * close() when it's closed.\n * @param {?=} isOpen Whether the sidenav should be open.\n * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdSidenavToggleResult> {\n    // Shortcut it if we're already opened.\n    if (isOpen === this.opened) {\n      return this._toggleAnimationPromise ||\n          Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n    }\n\n    this._opened = isOpen;\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this.isFocusTrapEnabled;\n    }\n\n    if (isOpen) {\n      this.onOpenStart.emit();\n    } else {\n      this.onCloseStart.emit();\n    }\n\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(false);\n    }\n    this._toggleAnimationPromise = new Promise<MdSidenavToggleResult>(resolve => {\n      this._resolveToggleAnimationPromise = animationFinished =>\n          resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));\n    });\n    return this._toggleAnimationPromise;\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * When transition has finished, set the internal state for classes and emit the proper event.\n * The event passed is actually of type TransitionEvent, but that type is not available in\n * Android so we use any.\n * @param {?} transitionEvent\n * @return {?}\n */\n_onTransitionEnd(transitionEvent: TransitionEvent) {\n    if (transitionEvent.target == this._elementRef.nativeElement\n        // Simpler version to check for prefixes.\n        && transitionEvent.propertyName.endsWith('transform')) {\n      if (this._opened) {\n        this.onOpen.emit();\n      } else {\n        this.onClose.emit();\n      }\n\n      if (this._toggleAnimationPromise) {\n        this._resolveToggleAnimationPromise(true);\n        this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nget _isClosing() {\n    return !this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpening() {\n    return this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isClosed() {\n    return !this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpened() {\n    return this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isEnd() {\n    return this.align == 'end';\n  }\n/**\n * @return {?}\n */\nget _modeSide() {\n    return this.mode == 'side';\n  }\n/**\n * @return {?}\n */\nget _modeOver() {\n    return this.mode == 'over';\n  }\n/**\n * @return {?}\n */\nget _modePush() {\n    return this.mode == 'push';\n  }\n/**\n * @return {?}\n */\nget _width() {\n    if (this._elementRef.nativeElement) {\n      return this._elementRef.nativeElement.offsetWidth;\n    }\n    return 0;\n  }\nprivate _elementFocusedBeforeSidenavWasOpened: HTMLElement = null;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  // TODO(mmalerba): move template to separate file.\n  templateUrl: 'sidenav.html',\n  host: {\n    '[class.mat-sidenav]': 'true',\n    '(transitionend)': '_onTransitionEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-sidenav-closed]': '_isClosed',\n    '[class.mat-sidenav-closing]': '_isClosing',\n    '[class.mat-sidenav-end]': '_isEnd',\n    '[class.mat-sidenav-opened]': '_isOpened',\n    '[class.mat-sidenav-opening]': '_isOpening',\n    '[class.mat-sidenav-over]': '_modeOver',\n    '[class.mat-sidenav-push]': '_modePush',\n    '[class.mat-sidenav-side]': '_modeSide',\n    'tabIndex': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpenStart': [{ type: Output, args: ['open-start', ] },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onCloseStart': [{ type: Output, args: ['close-start', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._focusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n * @type {?}\n */\nMdSidenav.prototype._align;\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdSidenav.prototype.mode;\n/** @type {?} */\nMdSidenav.prototype._disableClose;\n/**\n * Whether the sidenav is opened.\n * @type {?}\n */\nMdSidenav.prototype._opened;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onOpenStart;\n/**\n * Event emitted when the sidenav is fully opened.\n * @type {?}\n */\nMdSidenav.prototype.onOpen;\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onCloseStart;\n/**\n * Event emitted when the sidenav is fully closed.\n * @type {?}\n */\nMdSidenav.prototype.onClose;\n/**\n * Event emitted when the sidenav alignment changes.\n * @type {?}\n */\nMdSidenav.prototype.onAlignChanged;\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._toggleAnimationPromise;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._resolveToggleAnimationPromise;\n/** @type {?} */\nMdSidenav.prototype._elementFocusedBeforeSidenavWasOpened;\n/** @type {?} */\nMdSidenav.prototype._elementRef;\n/** @type {?} */\nMdSidenav.prototype._renderer;\n/** @type {?} */\nMdSidenav.prototype._focusTrapFactory;\n}\n\n/**\n * <md-sidenav-container> component.\n * \n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdSidenavContainer implements AfterContentInit {\n   _sidenavs: QueryList<MdSidenav>;\n/**\n * The sidenav child with the `start` alignment.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The sidenav child with the `end` alignment.\n * @return {?}\n */\nget end() { return this._end; }\n\n  /** Event emitted when the sidenav backdrop is clicked. */\n   backdropClick = new EventEmitter<void>();\nprivate _start: MdSidenav;\nprivate _end: MdSidenav;\nprivate _left: MdSidenav;\nprivate _right: MdSidenav;\n\n  /** Whether to enable open/close trantions. */\n  _enableTransitions = false;\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Dir,\nprivate _element: ElementRef,\nprivate _renderer: Renderer,\nprivate _ngZone: NgZone) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.dirChange.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // On changes, assert on consistency.\n    this._sidenavs.changes.subscribe(() => this._validateDrawers());\n    this._sidenavs.forEach((sidenav: MdSidenav) => {\n      this._watchSidenavToggle(sidenav);\n      this._watchSidenavAlign(sidenav);\n    });\n    this._validateDrawers();\n\n    // Give the view a chance to render the initial state, then enable transitions.\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._enableTransitions = true);\n  }\n/**\n * Subscribes to sidenav events in order to set a class on the main container element when the\n * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavToggle(sidenav: MdSidenav): void {\n    if (!sidenav || sidenav.mode === 'side') { return; }\n    sidenav.onOpen.subscribe(() => this._setContainerClass(sidenav, true));\n    sidenav.onClose.subscribe(() => this._setContainerClass(sidenav, false));\n  }\n/**\n * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n * changes.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavAlign(sidenav: MdSidenav): void {\n    if (!sidenav) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping sides at the same time.\n    sidenav.onAlignChanged.subscribe(() =>\n        this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._validateDrawers()));\n  }\n/**\n * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n * @param {?} sidenav\n * @param {?} bool\n * @return {?}\n */\nprivate _setContainerClass(sidenav: MdSidenav, bool: boolean): void {\n    this._renderer.setElementClass(this._element.nativeElement, 'mat-sidenav-opened', bool);\n  }\n/**\n * Validate the state of the sidenav children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end sidenav.\n    // NOTE: We must call toArray on _sidenavs even though it's iterable\n    // (see https://github.com/Microsoft/TypeScript/issues/3164).\n    for (let /** @type {?} */ sidenav of this._sidenavs.toArray()) {\n      if (sidenav.align == 'end') {\n        if (this._end != null) {\n          throw new MdDuplicatedSidenavError('end');\n        }\n        this._end = sidenav;\n      } else {\n        if (this._start != null) {\n          throw new MdDuplicatedSidenavError('start');\n        }\n        this._start = sidenav;\n      }\n    }\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalSidenav();\n  }\n/**\n * @return {?}\n */\n_closeModalSidenav() {\n    // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(sidenav => sidenav && !sidenav.disableClose && sidenav.mode !== 'side')\n      .forEach(sidenav => sidenav.close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isSidenavOpen(this._start) && this._start.mode != 'side')\n        || (this._isSidenavOpen(this._end) && this._end.mode != 'side');\n  }\n/**\n * @param {?} side\n * @return {?}\n */\nprivate _isSidenavOpen(side: MdSidenav): boolean {\n    return side != null && side.opened;\n  }\n/**\n * Return the width of the sidenav, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} sidenav\n * @param {?} mode\n * @return {?}\n */\nprivate _getSidenavEffectiveWidth(sidenav: MdSidenav, mode: string): number {\n    return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n  }\n/**\n * @return {?}\n */\n_getMarginLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'side');\n  }\n/**\n * @return {?}\n */\n_getMarginRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'side');\n  }\n/**\n * @return {?}\n */\n_getPositionLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'push');\n  }\n/**\n * @return {?}\n */\n_getPositionRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'push');\n  }\n/**\n * Returns the horizontal offset for the content area.  There should never be a value for both\n * left and right, so by subtracting the right value from the left value, we should always get\n * the appropriate offset.\n * @return {?}\n */\n_getPositionOffset() {\n    return this._getPositionLeft() - this._getPositionRight();\n  }\n/**\n * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n * doesn't seem to work right now.\n * @return {?}\n */\n_getStyles() {\n    return {\n      marginLeft: `${this._getMarginLeft()}px`,\n      marginRight: `${this._getMarginRight()}px`,\n      transform: `translate3d(${this._getPositionOffset()}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n  // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n  // changes its state.\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'sidenav.css',\n    'sidenav-transitions.css',\n  ],\n  host: {\n    '[class.mat-sidenav-container]': 'true',\n    '[class.mat-sidenav-transition]': '_enableTransitions',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_sidenavs': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._sidenavs;\n/**\n * Event emitted when the sidenav backdrop is clicked.\n * @type {?}\n */\nMdSidenavContainer.prototype.backdropClick;\n/**\n * The sidenav at the start/end alignment, independent of direction.\n * @type {?}\n */\nMdSidenavContainer.prototype._start;\n/** @type {?} */\nMdSidenavContainer.prototype._end;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdSidenavContainer.prototype._left;\n/** @type {?} */\nMdSidenavContainer.prototype._right;\n/**\n * Whether to enable open/close trantions.\n * @type {?}\n */\nMdSidenavContainer.prototype._enableTransitions;\n/** @type {?} */\nMdSidenavContainer.prototype._dir;\n/** @type {?} */\nMdSidenavContainer.prototype._element;\n/** @type {?} */\nMdSidenavContainer.prototype._renderer;\n/** @type {?} */\nMdSidenavContainer.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {CompatibilityModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {RtlModule} from '../core/rtl/dir';\nexport class MdSliderModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSliderModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, FormsModule, CompatibilityModule, StyleModule, RtlModule],\n  exports: [MdSlider, CompatibilityModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSlider,SliderRenderer} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule} from '../core';\nimport {A11yModule} from '../core/a11y/index';\nimport {OverlayModule} from '../core/overlay/overlay-directives';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSidenavModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, CompatibilityModule, A11yModule, OverlayModule],\n  exports: [MdSidenavContainer, MdSidenav, CompatibilityModule],\n  declarations: [MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\n\nexport {MdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n  /** The MdRadioButton that emits the change event. */\n  source: MdRadioButton;\n  /** The value of the MdRadioButton. */\n  value: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup implements AfterContentInit, ControlValueAccessor {\nprivate _value: any = null;\nprivate _name: string = `md-radio-group-${_uniqueIdCounter++}`;\nprivate _disabled: boolean = false;\nprivate _selected: MdRadioButton = null;\nprivate _isInitialized: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  \n  change: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n\n  /** Child radio buttons. */\n  \n  _radios: QueryList<MdRadioButton> = null;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n   labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this.selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      let /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    '[class.mat-radio-group]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * Disables all individual radio buttons assigned to this group.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype.labelPosition;\n}\n\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton implements OnInit, AfterViewInit, OnDestroy {\n\n  /** The unique ID for the radio button. */\n   id: string = `md-radio-${_uniqueIdCounter++}`;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n   name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n   ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n   ariaLabelledby: string;\n/**\n * Whether the ripple effect for this radio button is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  \n  change: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\nprivate _checked: boolean = false;\nprivate _disabled: boolean;\nprivate _value: any = null;\nprivate _disableRipple: boolean;\n\n  /** The child ripple instance. */\n   _ripple: MdRipple;\nprivate _focusRipple: RippleRef;\n\n  /** The native `<input type=radio>` element */\n   _inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n    this.radioGroup = radioGroup;\n\n    _radioDispatcher.listen((id: string, name: string) => {\n      if (id != this.id && name == this.name) {\n        this.checked = false;\n      }\n    });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    let /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-radio-button]': 'true',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disableRipple': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disableRipple;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._elementRef;\n/** @type {?} */\nMdRadioButton.prototype._renderer;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {\n  MdRippleModule,\n  CompatibilityModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  FocusOriginMonitor,\n} from '../core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nexport class MdRadioModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdRadioModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, CompatibilityModule],\n  exports: [MdRadioGroup, MdRadioButton, CompatibilityModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\n\nexport {MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroup,MdRadioButton} from './radio';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {QueryList} from '@angular/core';\nimport {UP_ARROW, DOWN_ARROW, TAB, HOME, END} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * This interface is for items that can be disabled. The type passed into\n * ListKeyManager must extend this interface.\n */\nexport interface CanDisable {\n  disabled?: boolean;\n}\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends CanDisable> {\nprivate _activeItemIndex: number = null;\nprivate _activeItem: T;\nprivate _tabOut: Subject<any> = new Subject();\nprivate _wrap: boolean = false;\n/**\n * @param {?} _items\n */\nconstructor(private _items: QueryList<T>) {\n  }\n/**\n * Turns on wrapping mode, which ensures that the active item will wrap to\n * the other end of list when there are no more items in the given direction.\n * \n * @return {?} The ListKeyManager that the method was called on.\n */\nwithWrap(): this {\n    this._wrap = true;\n    return this;\n  }\n/**\n * Sets the active item to the item at the index specified.\n * \n * @param {?} index The index of the item to be set as active.\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    this._activeItemIndex = index;\n    this._activeItem = this._items.toArray()[index];\n  }\n/**\n * Sets the active item depending on the key event passed in.\n * @param {?} event Keyboard event to be used for determining which element should be active.\n * @return {?}\n */\nonKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case DOWN_ARROW:\n        this.setNextItemActive();\n        break;\n      case UP_ARROW:\n        this.setPreviousItemActive();\n        break;\n      case HOME:\n        this.setFirstItemActive();\n        break;\n      case END:\n        this.setLastItemActive();\n        break;\n      case TAB:\n        // Note that we shouldn't prevent the default action on tab.\n        this._tabOut.next(null);\n        return;\n      default:\n        return;\n    }\n\n    event.preventDefault();\n  }\n/**\n * Returns the index of the currently active item.\n * @return {?}\n */\nget activeItemIndex(): number {\n    return this._activeItemIndex;\n  }\n/**\n * Returns the currently active item.\n * @return {?}\n */\nget activeItem(): T {\n    return this._activeItem;\n  }\n/**\n * Sets the active item to the first enabled item in the list.\n * @return {?}\n */\nsetFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n/**\n * Sets the active item to the last enabled item in the list.\n * @return {?}\n */\nsetLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n/**\n * Sets the active item to the next enabled item in the list.\n * @return {?}\n */\nsetNextItemActive(): void {\n    this._activeItemIndex === null ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n/**\n * Sets the active item to a previous enabled item in the list.\n * @return {?}\n */\nsetPreviousItemActive(): void {\n    this._activeItemIndex === null && this._wrap ? this.setLastItemActive()\n                                                 : this._setActiveItemByDelta(-1);\n  }\n/**\n * Allows setting of the activeItemIndex without any other effects.\n * @param {?} index The new activeItemIndex.\n * @return {?}\n */\nupdateActiveItemIndex(index: number) {\n    this._activeItemIndex = index;\n  }\n/**\n * Observable that emits any time the TAB key is pressed, so components can react\n * when focus is shifted off of the list.\n * @return {?}\n */\nget tabOut(): Observable<void> {\n    return this._tabOut.asObservable();\n  }\n/**\n * This method sets the active item, given a list of items and the delta between the\n * currently active item and the new active item. It will calculate differently\n * depending on whether wrap mode is turned on.\n * @param {?} delta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByDelta(delta: number, items = this._items.toArray()): void {\n    this._wrap ? this._setActiveInWrapMode(delta, items)\n               : this._setActiveInDefaultMode(delta, items);\n  }\n/**\n * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n * down the list until it finds an item that is not disabled, and it will wrap if it\n * encounters either end of the list.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInWrapMode(delta: number, items: T[]): void {\n    // when active item would leave menu, wrap to beginning or end\n    this._activeItemIndex =\n      (this._activeItemIndex + delta + items.length) % items.length;\n\n    // skip all disabled menu items recursively until an enabled one is reached\n    if (items[this._activeItemIndex].disabled) {\n      this._setActiveInWrapMode(delta, items);\n    } else {\n      this.setActiveItem(this._activeItemIndex);\n    }\n  }\n/**\n * Sets the active item properly given the default mode. In other words, it will\n * continue to move down the list until it finds an item that is not disabled. If\n * it encounters either end of the list, it will stop and not wrap.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInDefaultMode(delta: number, items: T[]): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n  }\n/**\n * Sets the active item to the first enabled item starting at the index specified. If the\n * item is disabled, it will move in the fallbackDelta direction until it either\n * finds an enabled item or encounters the end of the list.\n * @param {?} index\n * @param {?} fallbackDelta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByIndex(index: number, fallbackDelta: number,\n                                  items = this._items.toArray()): void {\n    if (!items[index]) { return; }\n    while (items[index].disabled) {\n      index += fallbackDelta;\n      if (!items[index]) { return; }\n    }\n    this.setActiveItem(index);\n  }\n\n}\n\nfunction ListKeyManager_tsickle_Closure_declarations() {\n/** @type {?} */\nListKeyManager.prototype._activeItemIndex;\n/** @type {?} */\nListKeyManager.prototype._activeItem;\n/** @type {?} */\nListKeyManager.prototype._tabOut;\n/** @type {?} */\nListKeyManager.prototype._wrap;\n/** @type {?} */\nListKeyManager.prototype._items;\n}\n\n\n","\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself and whether or not it is currently disabled.\n */\nexport interface Focusable extends CanDisable {\n  focus(): void;\n}\nexport class FocusKeyManager extends ListKeyManager<Focusable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Focusable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n    this.activeItem.focus();\n  }\n\n}\n","import {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the md-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material md-select animation.\n */\n\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const /** @type {?} */ transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: `scale(0.75)`\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: `scale(0.75)`\n  })),\n  transition('* => *', animate(`400ms cubic-bezier(0.25, 0.8, 0.25, 1)`))\n]);\n\n/**\n * This animation transforms the select's overlay panel on and off the page.\n *\n * When the panel is attached to the DOM, it expands its width 32px, scales it up to\n * 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n *\n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const /** @type {?} */ transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: `scaleY(1)`\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: `scaleY(0)`\n    }),\n    animate(`150ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const /** @type {?} */ fadeInContent: AnimationTriggerMetadata  =  trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate(`150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\n  ])\n]);\n","import {MdError} from '../core/errors/error';\n/**\n * Exception thrown when attempting to change a select's `multiple` option after initialization.\n * \\@docs-private\n */\nexport class MdSelectDynamicMultipleError extends MdError {\nconstructor() {\n    super('Cannot change `multiple` mode of select after initialization.');\n  }\n}\n/**\n * Exception thrown when attempting to assign a non-array value to a select in `multiple` mode.\n * Note that `undefined` and `null` are still valid values to allow for resetting the value.\n * \\@docs-private\n */\nexport class MdSelectNonArrayValueError extends MdError {\nconstructor() {\n    super('Cannot assign truthy non-array value to select in `multiple` mode.');\n  }\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect} from './select';\nimport {MdOptionModule} from '../core/option/option';\nimport {CompatibilityModule, OverlayModule} from '../core';\nexport class MdSelectModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSelectModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    CompatibilityModule,\n  ],\n  exports: [MdSelect, MdOptionModule, CompatibilityModule],\n  declarations: [MdSelect],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\n\nexport {SELECT_OPTION_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectFloatPlaceholderType,MdSelect} from './select';\nexport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n  /** The MdButtonToggle that emits the event. */\n  source: MdButtonToggle;\n  /** The value assigned to the MdButtonToggle. */\n  value: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup implements AfterViewInit, ControlValueAccessor {\nprivate _value: any = null;\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\nprivate _disabled: boolean = null;\nprivate _vertical: boolean = false;\nprivate _selected: MdButtonToggle = null;\nprivate _isInitialized: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  \n  _buttonToggles: QueryList<MdButtonToggle> = null;\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._isInitialized = true;\n  }\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n\n      // Only emit a change event if the view is completely initialized.\n      // We don't want to emit a change event for the initial values.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n * @return {?}\n */\nget change(): Observable<MdButtonToggleChange> {\n    return this._change.asObservable();\n  }\nprivate _change: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this._change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  host: {\n    '[class.mat-button-toggle-group]': 'true',\n    'role': 'radiogroup',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * Whether the button toggle group is initialized or not.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/** @type {?} */\nMdButtonToggleGroup.prototype._change;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple {\nprivate _disabled: boolean = null;\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  host: {\n    '[class.mat-button-toggle-group]': 'true',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit {\nprivate _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\nprivate _disabled: boolean = null;\nprivate _value: any = null;\nprivate _isSingleSelector: boolean = null;\n\n   _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MdButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** The unique ID for this button toggle. */\n  \n  \n  id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  \n  name: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector) {\n      if (newCheckedState) {\n        // Notify all button toggles with the same name (in the same group) to un-check.\n        this._buttonToggleDispatcher.notify(this.id, this.name);\n      }\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\nprivate _change: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nget change(): Observable<MdButtonToggleChange> {\n    return this._change.asObservable();\n  }\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.buttonToggleGroup = toggleGroup;\n\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      _buttonToggleDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this._change.emit(event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-button-toggle]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n{type: Renderer, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: HostBinding },{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked', ] },{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled', ] },{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype._change;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  CompatibilityModule,\n  FocusOriginMonitor,\n} from '../core';\nexport class MdButtonToggleModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdButtonToggleModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, CompatibilityModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    CompatibilityModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\n\nexport {ToggleType,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Renderer,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty, FocusOriginMonitor} from '../core';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {\n    '[class.mat-button]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {\n    '[class.mat-raised-button]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {\n    '[class.mat-icon-button]': 'true',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFabCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {\n    '[class.mat-fab]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFabCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFabCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFabCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdMiniFabCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {\n    '[class.mat-mini-fab]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMiniFabCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFabCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFabCssMatStyler.ctorParameters;\n}\n\n/**\n * Material design button.\n */\nexport class MdButton implements OnDestroy {\nprivate _color: string;\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\nprivate _disableRipple: boolean = false;\nprivate _disabled: boolean = null;\n/**\n * Whether the ripple effect for this button is disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableRipple(v) { this._disableRipple = coerceBooleanProperty(v); }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) { this._disabled = coerceBooleanProperty(value) ? true : null; }\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _focusOriginMonitor\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * The color of the button. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._getHostElement(), `mat-${color}`, isAdd);\n    }\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +\n            'button[md-fab], button[md-mini-fab],' +\n            'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +\n            'button[mat-fab], button[mat-mini-fab]',\n  host: {\n    '[disabled]': 'disabled',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'disabled': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/** @type {?} */\nMdButton.propDecorators;\n/** @type {?} */\nMdButton.prototype._color;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdButton.prototype._disableRipple;\n/** @type {?} */\nMdButton.prototype._disabled;\n/** @type {?} */\nMdButton.prototype._elementRef;\n/** @type {?} */\nMdButton.prototype._renderer;\n/** @type {?} */\nMdButton.prototype._focusOriginMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} focusOriginMonitor\n */\nconstructor(elementRef: ElementRef, renderer: Renderer, focusOriginMonitor: FocusOriginMonitor) {\n    super(elementRef, renderer, focusOriginMonitor);\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @return {?}\n */\nget _isAriaDisabled(): string {\n    return this.disabled ? 'true' : 'false';\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.disabled]': 'disabled',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tabIndex': [{ type: HostBinding, args: ['tabIndex', ] },],\n};\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n/** @type {?} */\nMdAnchor.propDecorators;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CompatibilityModule, MdRippleModule, StyleModule} from '../core';\nimport {\n  MdAnchor,\n  MdButton,\n  MdButtonCssMatStyler,\n  MdFabCssMatStyler,\n  MdIconButtonCssMatStyler,\n  MdMiniFabCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\n\n\nexport {MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFabCssMatStyler,MdMiniFabCssMatStyler,MdButton,MdAnchor} from './button';\nexport class MdButtonModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdButtonModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    CompatibilityModule,\n    StyleModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    CompatibilityModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n    MdFabCssMatStyler,\n    MdMiniFabCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n    MdFabCssMatStyler,\n    MdMiniFabCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  Renderer,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {\n  MdRipple,\n  RippleRef,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\n\n\n/** Monotonically increasing integer used to auto-generate unique ids for checkbox components. */\nlet /** @type {?} */ nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n  /** The source MdCheckbox of the event. */\n  source: MdCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox implements ControlValueAccessor, AfterViewInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n   ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n   ariaLabelledby: string = null;\n\n  /** A unique id for the checkbox. If one is not supplied, it is auto-generated. */\n   id: string = `md-checkbox-${++nextId}`;\nprivate _disableRipple: boolean;\n/**\n * Whether the ripple effect for this checkbox is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * ID of the native input element inside `<md-checkbox>`\n * @return {?}\n */\nget inputId(): string {\n    return `input-${this.id}`;\n  }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n   labelPosition: 'before' | 'after' = 'after';\nprivate _disabled: boolean = false;\n/**\n * Whether the checkbox is disabled.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Tabindex value that is passed to the underlying input element. */\n   tabIndex: number = 0;\n\n  /** Name value will be applied to the input element if present */\n   name: string = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n   change: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n   indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n   value: string ;\n\n  /** The native `<input type=\"checkbox\"> element */\n   _inputElement: ElementRef;\n\n   _ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _color: string;\nprivate _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\nprivate _focusRipple: RippleRef;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.color = 'accent';\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked. Note that setting `checked` will immediately set\n * `indeterminate` to false.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever `checked` is set, indeterminate is immediately set to\n * false. This differs from the web platform in that indeterminate state on native\n * checkboxes is only remove when the user manually checks the checkbox (rather than setting the\n * `checked` property programmatically). However, we feel that this behavior is more accommodating\n * to the way consumers would envision using this component.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * The color of the button. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string;\n\n    switch (oldState) {\n    case TransitionCheckState.Init:\n      // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n      // [checked] bound to it.\n      if (newState === TransitionCheckState.Checked) {\n        animSuffix = 'unchecked-checked';\n      } else if (newState == TransitionCheckState.Indeterminate) {\n        animSuffix = 'unchecked-indeterminate';\n      } else {\n        return '';\n      }\n      break;\n    case TransitionCheckState.Unchecked:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'unchecked-checked' : 'unchecked-indeterminate';\n      break;\n    case TransitionCheckState.Checked:\n      animSuffix = newState === TransitionCheckState.Unchecked ?\n          'checked-unchecked' : 'checked-indeterminate';\n      break;\n    case TransitionCheckState.Indeterminate:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'indeterminate-checked' : 'indeterminate-unchecked';\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    '[class.mat-checkbox]': 'true',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdCheckbox.prototype._disableRipple;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/** @type {?} */\nMdCheckbox.prototype._disabled;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/** @type {?} */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._color;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._renderer;\n/** @type {?} */\nMdCheckbox.prototype._elementRef;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule, CompatibilityModule, FocusOriginMonitor} from '../core';\nimport {MdCheckbox} from './checkbox';\nexport class MdCheckboxModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdCheckboxModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, CompatibilityModule],\n  exports: [MdCheckbox, CompatibilityModule],\n  declarations: [MdCheckbox],\n  providers: [FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckbox} from './checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement = null;\nprivate _backdropClick: Subject<any> = new Subject();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _ngZone: NgZone) { }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    return this._portalHost.detach();\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', this._state.direction);\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n    this._backdropElement.classList.add(this._state.backdropClass);\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement.insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) {\n      this._pane.parentNode.appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n      backdropToDetach.classList.remove(this._state.backdropClass);\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollableViewProperties {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollableViewProperties_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollableViewProperties) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollableViewProperties, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from './viewport-ruler';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange, ScrollableViewProperties\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '../scroll/scrollable';\n\n/**\n * Container to hold the bounding positions of a particular element with respect to the viewport,\n * where top and bottom are the y-axis coordinates of the bounding rectangle and left and right are\n * the x-axis coordinates.\n */\nexport type ElementBoundingPositions = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\nprivate _dir = 'ltr';\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\nprivate _origin: HTMLElement;\nprivate _pane: HTMLElement;\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} _connectedTo\n * @param {?} _originPos\n * @param {?} _overlayPos\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _connectedTo: ElementRef,\nprivate _originPos: OriginConnectionPosition,\nprivate _overlayPos: OverlayConnectionPosition,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(_originPos, _overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * To be used to for any cleanup after the element gets destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS styles.\n * @return {?} Resolves when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    // Cache the overlay pane element in case re-calculating position is necessary\n    this._pane = element;\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint = null;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayPoint);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        // Notify that the position has been changed along with its change properties.\n        const /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n        const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n        this._onPositionChange.next(positionChange);\n\n        return Promise.resolve(null);\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, fallbackPoint);\n\n    return Promise.resolve(null);\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayPoint);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate getScrollableViewProperties(overlay: HTMLElement): ScrollableViewProperties {\n    const /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n    const /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n    const /** @type {?} */ scrollContainerBounds = this.scrollables.map((scrollable: Scrollable) => {\n      return this._getElementBounds(scrollable.getElementRef().nativeElement);\n    });\n\n    return {\n      isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n      isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Whether the element is completely out of the view of any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementOutsideView(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n      const /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n      const /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n      const /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n\n      return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n  }\n/**\n * Whether the element is clipped by any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementClipped(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n      const /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n      const /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n      const /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n\n      return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayPoint\n * @return {?}\n */\nprivate _setElementPosition(element: HTMLElement, overlayPoint: Point) {\n    element.style.left = overlayPoint.x + 'px';\n    element.style.top = overlayPoint.y + 'px';\n  }\n/**\n * Returns the bounding positions of the provided element with respect to the viewport.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementBounds(element: HTMLElement): ElementBoundingPositions {\n    const /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n    return {\n      top: boundingClientRect.top,\n      right: boundingClientRect.left + boundingClientRect.width,\n      bottom: boundingClientRect.top + boundingClientRect.height,\n      left: boundingClientRect.left\n    };\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._originPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._overlayPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea?: number;\n  fitsInViewport?: boolean;\n}\n","import {PositionStrategy} from './position-strategy';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement;\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?} value New top offset.\n * @return {?}\n */\ntop(value: string): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New left offset.\n * @return {?}\n */\nleft(value: string): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?} value New bottom offset.\n * @return {?}\n */\nbottom(value: string): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New right offset.\n * @return {?}\n */\nright(value: string): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?} value New width for the overlay\n * @return {?}\n */\nwidth(value: string): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?} value New height for the overlay\n * @return {?}\n */\nheight(value: string): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS.\n * @return {?} Resolved when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    if (!this._wrapper) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n\n    return Promise.resolve(null);\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n\nexport const /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ViewportRuler} from './viewport-ruler';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {ElementRef, Injectable} from '@angular/core';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n  Provider,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OverlayContainer, OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll/scroll-dispatcher';\n\n\n/** Next overlay unique ID. */\nlet /** @type {?} */ nextUniqueId = 0;\n\n/** The default state for newly created overlays. */\nlet /** @type {?} */ defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(private _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) {}\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    return this._createOverlayRef(this._createPaneElement(), state);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n/**\n * Creates an OverlayRef for an overlay in the given DOM element.\n * @param {?} pane DOM element for the overlay\n * @param {?} state\n * @return {?}\n */\nprivate _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane), pane, state, this._ngZone);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n\n/** Providers for Overlay and its related injectables. */\nexport const /** @type {?} */ OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  SCROLL_DISPATCHER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport'rxjs/add/observable/fromEvent';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    NgModule,\n    ModuleWithProviders,\n    Directive,\n    EventEmitter,\n    TemplateRef,\n    ViewContainerRef,\n    Optional,\n    Input,\n    OnDestroy,\n    Output,\n    ElementRef\n} from '@angular/core';\nimport {Overlay, OVERLAY_PROVIDERS} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {TemplatePortal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {\n    ConnectionPositionPair,\n    ConnectedOverlayPositionChange\n} from './position/connected-position';\nimport {PortalModule} from '../portal/portal-directives';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Dir, LayoutDirection} from '../rtl/dir';\nimport {Scrollable} from './scroll/scrollable';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nlet /** @type {?} */ defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal;\nprivate _open = false;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\n\n  /** Origin for the connected overlay. */\n   origin: OverlayOrigin;\n\n  /** Registered connected position pairs. */\n   positions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number {\n    return this._offsetX;\n  }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() {\n    return this._offsetY;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n\n  /** The width of the overlay panel. */\n   width: number | string;\n\n  /** The height of the overlay panel. */\n   height: number | string;\n\n  /** The min width of the overlay panel. */\n   minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n   minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n   backdropClass: string;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() {\n    return this._hasBackdrop;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n/**\n * @return {?}\n */\nget open() {\n    return this._open;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset open(value: boolean) {\n    value ? this._attachOverlay() : this._detachOverlay();\n    this._open = value;\n  }\n\n  /** Event emitted when the backdrop is clicked. */\n   backdropClick = new EventEmitter<void>();\n\n  /** Event emitted when the position has changed. */\n   positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n   attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n   detach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _dir: Dir) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    let /** @type {?} */ overlayConfig = new OverlayState();\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    overlayConfig.hasBackdrop = this.hasBackdrop;\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    this._position = /** @type {?} */(( this._createPositionStrategy() as ConnectedPositionStrategy));\n    overlayConfig.positionStrategy = this._position;\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n      this._backdropSubscription = null;\n    }\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input },],\n'positions': [{ type: Input },],\n'offsetX': [{ type: Input },],\n'offsetY': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'backdropClass': [{ type: Input },],\n'hasBackdrop': [{ type: Input },],\n'open': [{ type: Input },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._open;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\nexport class OverlayModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: OverlayModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],\n  providers: [OVERLAY_PROVIDERS],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\n\ndeclare const window: any;\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst /** @type {?} */ hasV8BreakIterator = typeof(window) !== 'undefined' ?\n    (window.Intl && ( /** @type {?} */((window.Intl as any))).v8BreakIterator) :\n    (typeof(Intl) !== 'undefined' && ( /** @type {?} */((Intl as any))).v8BreakIterator);\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n * \\@docs-private\n */\nexport class Platform {\n  /** Layout Engines */\n  EDGE = /(edge)/i.test(navigator.userAgent);\n  TRIDENT = /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to excluded from this check.\n  BLINK = !!(window.chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT;\n\n  // Webkit is part of the userAgent in EdgeHTML Blink and Trident, so we need to\n  // ensure that Webkit runs standalone and is not use as another engines base.\n  WEBKIT = /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n\n  /** Browsers and Platform Types */\n  IOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  FIREFOX = /(firefox|minefield)/i.test(navigator.userAgent);\n\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID = /android/i.test(navigator.userAgent) && !this.TRIDENT;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Platform_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatform.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatform.ctorParameters;\n/**\n * Layout Engines\n * @type {?}\n */\nPlatform.prototype.EDGE;\n/** @type {?} */\nPlatform.prototype.TRIDENT;\n/** @type {?} */\nPlatform.prototype.BLINK;\n/** @type {?} */\nPlatform.prototype.WEBKIT;\n/**\n * Browsers and Platform Types\n * @type {?}\n */\nPlatform.prototype.IOS;\n/** @type {?} */\nPlatform.prototype.FIREFOX;\n/** @type {?} */\nPlatform.prototype.ANDROID;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {Platform} from '../platform/platform';\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nexport class InteractivityChecker {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) {}\n/**\n * Gets whether an element is disabled.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is disabled.\n */\nisDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n/**\n * Gets whether an element is visible for the purposes of interactivity.\n * \n * This will capture states like `display: none` and `visibility: hidden`, but not things like\n * being clipped by an `overflow: hidden` parent or being outside the viewport.\n * \n * @param {?} element\n * @return {?} Whether the element is visible.\n */\nisVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n/**\n * Gets whether an element can be reached via Tab key.\n * Assumes that the element has already been checked with isFocusable.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is tabbable.\n */\nisTabbable(element: HTMLElement): boolean {\n\n    let /** @type {?} */ frameElement = /** @type {?} */(( getWindow(element).frameElement as HTMLElement));\n\n    if (frameElement) {\n\n      let /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    let /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n/**\n * Gets whether an element can be focused by the user.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is focusable.\n */\nisFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction InteractivityChecker_tsickle_Closure_declarations() {\n/** @type {?} */\nInteractivityChecker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInteractivityChecker.ctorParameters;\n/** @type {?} */\nInteractivityChecker.prototype._platform;\n}\n\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element: Node) {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element: HTMLElement): number {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex'), 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  let /** @type {?} */ inputType = nodeName === 'input' && ( /** @type {?} */((element as HTMLInputElement))).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node: HTMLElement): Window {\n  return node.ownerDocument.defaultView || window;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\n/**\n * Class that allows for trapping focus within a DOM element.\n * \n * NOTE: This class currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\nexport class FocusTrap {\nprivate _startAnchor: HTMLElement;\nprivate _endAnchor: HTMLElement;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this._enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset enabled(val: boolean) {\n    this._enabled = val;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\n    }\n  }\nprivate _enabled: boolean = true;\n/**\n * @param {?} _element\n * @param {?} _checker\n * @param {?} _ngZone\n * @param {?=} deferAnchors\n */\nconstructor(\nprivate _element: HTMLElement,\nprivate _checker: InteractivityChecker,\nprivate _ngZone: NgZone,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n/**\n * Destroys the focus trap by cleaning up the anchors.\n * @return {?}\n */\ndestroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n/**\n * Inserts the anchors into the DOM. This is usually done automatically\n * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n * @return {?}\n */\nattachAnchors(): void {\n    if (!this._startAnchor) {\n      this._startAnchor = this._createAnchor();\n    }\n\n    if (!this._endAnchor) {\n      this._endAnchor = this._createAnchor();\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this._startAnchor.addEventListener('focus', () => this.focusLastTabbableElement());\n      this._endAnchor.addEventListener('focus', () => this.focusFirstTabbableElement());\n\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n    });\n  }\n/**\n * Waits for microtask queue to empty, then focuses\n * the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElementWhenReady() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this.focusFirstTabbableElement());\n  }\n/**\n * Waits for microtask queue to empty, then focuses\n * the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElementWhenReady() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this.focusLastTabbableElement());\n  }\n/**\n * Focuses the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElement() {\n    let /** @type {?} */ redirectToElement = /** @type {?} */(( this._element.querySelector('[cdk-focus-start]') as HTMLElement)) ||\n                            this._getFirstTabbableElement(this._element);\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n/**\n * Focuses the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElement() {\n    let /** @type {?} */ focusTargets = this._element.querySelectorAll('[cdk-focus-end]');\n    let /** @type {?} */ redirectToElement: HTMLElement = null;\n\n    if (focusTargets.length) {\n      redirectToElement = /** @type {?} */(( focusTargets[focusTargets.length - 1] as HTMLElement));\n    } else {\n      redirectToElement = this._getLastTabbableElement(this._element);\n    }\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n/**\n * Get the first tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getFirstTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = 0; i < children.length; i++) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getFirstTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Get the last tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getLastTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = children.length - 1; i >= 0; i--) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getLastTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Creates an anchor element.\n * @return {?}\n */\nprivate _createAnchor(): HTMLElement {\n    let /** @type {?} */ anchor = document.createElement('div');\n    anchor.tabIndex = this._enabled ? 0 : -1;\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n}\n\nfunction FocusTrap_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrap.prototype._startAnchor;\n/** @type {?} */\nFocusTrap.prototype._endAnchor;\n/** @type {?} */\nFocusTrap.prototype._enabled;\n/** @type {?} */\nFocusTrap.prototype._element;\n/** @type {?} */\nFocusTrap.prototype._checker;\n/** @type {?} */\nFocusTrap.prototype._ngZone;\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nexport class FocusTrapFactory {\n/**\n * @param {?} _checker\n * @param {?} _ngZone\n */\nconstructor(private _checker: InteractivityChecker,\nprivate _ngZone: NgZone) { }\n/**\n * @param {?} element\n * @param {?=} deferAnchors\n * @return {?}\n */\ncreate(element: HTMLElement, deferAnchors = false): FocusTrap {\n    return new FocusTrap(element, this._checker, this._ngZone, deferAnchors);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InteractivityChecker, },\n{type: NgZone, },\n];\n}\n\nfunction FocusTrapFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapFactory.ctorParameters;\n/** @type {?} */\nFocusTrapFactory.prototype._checker;\n/** @type {?} */\nFocusTrapFactory.prototype._ngZone;\n}\n\n/**\n * Directive for trapping focus within a region.\n * @deprecated\n */\nexport class FocusTrapDeprecatedDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget disabled(): boolean { return !this.focusTrap.enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {\n    this.focusTrap.enabled = !coerceBooleanProperty(val);\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-focus-trap',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction FocusTrapDeprecatedDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDeprecatedDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDeprecatedDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDeprecatedDirective.propDecorators;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._focusTrapFactory;\n}\n\n/**\n * Directive for trapping focus within a region.\n */\nexport class FocusTrapDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this.focusTrap.enabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'enabled': [{ type: Input, args: ['cdkTrapFocus', ] },],\n};\n}\n\nfunction FocusTrapDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDirective.propDecorators;\n/** @type {?} */\nFocusTrapDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDirective.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Injectable,\n  OpaqueToken,\n  Optional,\n  Inject,\n  SkipSelf,\n} from '@angular/core';\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_ELEMENT_TOKEN  = new OpaqueToken('liveAnnouncerElement');\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\nexport class LiveAnnouncer {\nprivate _liveElement: Element;\n/**\n * @param {?} elementToken\n */\nconstructor(  elementToken: any) {\n\n    // We inject the live element as `any` because the constructor signature cannot reference\n    // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n    // causes TypeScript to preserve the constructor signature types.\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n/**\n * Announces a message to screenreaders.\n * @param {?} message Message to be announced to the screenreader\n * @param {?=} politeness The politeness of the announcer element\n * @return {?}\n */\nannounce(message: string, politeness: AriaLivePoliteness = 'polite'): void {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    setTimeout(() => this._liveElement.textContent = message, 100);\n  }\n/**\n * Removes the aria-live element from the DOM.\n * @return {?}\n */\n_removeLiveElement() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _createLiveElement(): Element {\n    let /** @type {?} */ liveEl = document.createElement('div');\n\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN, ] }, ]},\n];\n}\n\nfunction LiveAnnouncer_tsickle_Closure_declarations() {\n/** @type {?} */\nLiveAnnouncer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLiveAnnouncer.ctorParameters;\n/** @type {?} */\nLiveAnnouncer.prototype._liveElement;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @return {?}\n */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher: LiveAnnouncer, liveElement: any) {\n  return parentDispatcher || new LiveAnnouncer(liveElement);\n}\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)]\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","let /** @type {?} */ supportedInputTypes: Set<string>;\n/**\n * @return {?} The input types supported by this browser.\n */\nexport function getSupportedInputTypes(): Set<string> {\n  if (!supportedInputTypes) {\n    let /** @type {?} */ featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set([\n      // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n      // first changing it to something else:\n      // The specified value \"\" does not conform to the required format.\n      // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n      'color',\n      'button',\n      'checkbox',\n      'date',\n      'datetime-local',\n      'email',\n      'file',\n      'hidden',\n      'image',\n      'month',\n      'number',\n      'password',\n      'radio',\n      'range',\n      'reset',\n      'search',\n      'submit',\n      'tel',\n      'text',\n      'time',\n      'url',\n      'week',\n    ].filter(value => {\n      featureTestInput.setAttribute('type', value);\n      return featureTestInput.type === value;\n    }));\n  }\n  return supportedInputTypes;\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {FocusTrapDirective, FocusTrapDeprecatedDirective, FocusTrapFactory} from './focus-trap';\nimport {LIVE_ANNOUNCER_PROVIDER} from './live-announcer';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '../platform/index';\nexport class A11yModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: A11yModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, PlatformModule],\n  declarations: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  exports: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  providers: [InteractivityChecker, FocusTrapFactory, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A11yModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA11yModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA11yModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {Platform} from './platform';\nexport class PlatformModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: PlatformModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [Platform]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PlatformModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformModule.ctorParameters;\n}\n\n\n\nexport {Platform} from './platform';\nexport {getSupportedInputTypes} from './features';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\nprivate _selection: Set<T> = new Set();\nprivate _deselectedToEmit: T[] = [];\nprivate _selectedToEmit: T[] = [];\nprivate _selected: T[];\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  onChange: Subject<SelectionChange<T>> = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      this.onChange.next(eventData);\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?}\n */\nlisten(listener: UniqueSelectionDispatcherListener) {\n    this._listeners.push(listener);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n\nexport const /** @type {?} */ UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {MdLineModule} from './line/line';\nimport {RtlModule} from './rtl/dir';\nimport {ObserveContentModule} from './observe-content/observe-content';\nimport {MdOptionModule} from './option/option';\nimport {PortalModule} from './portal/portal-directives';\nimport {OverlayModule} from './overlay/overlay-directives';\nimport {A11yModule} from './a11y/index';\nimport {MdSelectionModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n\n// RTL\nexport {Dir, LayoutDirection, RtlModule} from './rtl/dir';\n\n// Mutation Observer\nexport {ObserveContentModule, ObserveContent} from './observe-content/observe-content';\n\nexport {MdOptionModule, MdOption} from './option/option';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from './platform/index';\n\n// Overlay\nexport {Overlay, OVERLAY_PROVIDERS} from './overlay/overlay';\nexport {OverlayContainer} from './overlay/overlay-container';\nexport {FullscreenOverlayContainer} from './overlay/fullscreen-overlay-container';\nexport {OverlayRef} from './overlay/overlay-ref';\nexport {OverlayState} from './overlay/overlay-state';\nexport {\n  ConnectedOverlayDirective,\n  OverlayOrigin,\n  OverlayModule,\n} from './overlay/overlay-directives';\nexport {GlobalPositionStrategy} from './overlay/position/global-position-strategy';\nexport {ElementBoundingPositions,ConnectedPositionStrategy} from './overlay/position/connected-position-strategy';\nexport {HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange} from './overlay/position/connected-position';\nexport {ScrollDispatcher} from './overlay/scroll/scroll-dispatcher';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n} from './a11y/live-announcer';\n\n// Selection\nexport {SelectionModel,SelectionChange} from './selection/selection';\n\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './a11y/focus-trap';\nexport {InteractivityChecker} from './a11y/interactivity-checker';\nexport {isFakeMousedownFromScreenReader} from './a11y/fake-mousedown';\n\nexport {A11yModule} from './a11y/index';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Error\nexport {MdError} from './errors/error';\n\n// Misc\nexport {ComponentType} from './overlay/generic-component-type';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,MdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox} from './selection/index';\n\n// Coercion\nexport {coerceBooleanProperty} from './coercion/boolean-property';\nexport {coerceNumberProperty} from './coercion/number-property';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\nexport class MdCoreModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdCoreModule,\n      providers: [],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n  exports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","import {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return isNaN(parseFloat( /** @type {?} */((value as any)))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\n","import {ElementRef, NgZone} from '@angular/core';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const /** @type {?} */ RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const /** @type {?} */ RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\nprivate _containerElement: HTMLElement;\nprivate _triggerElement: HTMLElement;\nprivate _isMousedown: boolean = false;\nprivate _triggerEvents = new Map<string, any>();\nprivate _activeRipples = new Set<RippleRef>();\n\n  /** Ripple config for all ripples created by events. */\n  rippleConfig: RippleConfig = {};\n\n  /** Whether mouse ripples should be created or not. */\n  rippleDisabled: boolean = false;\n/**\n * @param {?} _elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n */\nconstructor(_elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler) {\n    this._containerElement = _elementRef.nativeElement;\n\n    // Specify events which need to be registered on the trigger.\n    this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n    this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n    this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n    // By default use the host element as trigger element.\n    this.setTriggerElement(this._containerElement);\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => this._triggerElement.removeEventListener(type, fn));\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","import {Injectable, ElementRef, Optional, SkipSelf, NgZone} from '@angular/core';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/auditTime';\n\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const /** @type {?} */ DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n */\nconstructor(private _ngZone: NgZone) { }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  _scrolled: Subject<void> = new Subject<void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription = null;\nprivate _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    if (this.scrollableReferences.has(scrollable)) {\n      this.scrollableReferences.get(scrollable).unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      this._scrolled.asObservable().auditTime(auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return Observable.merge(\n          Observable.fromEvent(window.document, 'scroll'),\n          Observable.fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher: ScrollDispatcher,\n                                                   ngZone: NgZone) {\n  return parentDispatcher || new ScrollDispatcher(ngZone);\n}\n\nexport const /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from '../scroll/scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Initially cache the document rectangle.\n    this._cacheViewportGeometry();\n\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(null, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY || 0;\n    const /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry?() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n\nexport const /** @type {?} */ VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Wrapper around Error that sets the error message.\n * \\@docs-private\n */\nexport class MdError extends Error {\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this.message = value;\n  }\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Directive,\n  OpaqueToken,\n  Inject,\n  Optional,\n  isDevMode,\n  ElementRef,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {MdError} from '../errors/error';\n\n/** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\nlet /** @type {?} */ hasDoneGlobalChecks = false;\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new OpaqueToken('md-compatibility-mode');\n/**\n * Exception thrown if the consumer has used an invalid Material prefix on a component.\n * \\@docs-private\n */\nexport class MdCompatibilityInvalidPrefixError extends MdError {\n/**\n * @param {?} prefix\n * @param {?} nodeName\n */\nconstructor(prefix: string, nodeName: string) {\n    super(\n      `The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n      `It was used on an \"${nodeName.toLowerCase()}\" element.`\n    );\n  }\n}\n\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nexport const /** @type {?} */ MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-dialog-actions],\n  [mat-dialog-close],\n  [mat-dialog-content],\n  [mat-dialog-title],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-menu-trigger-for],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [mat-tab-label],\n  [mat-tab-link],\n  [mat-tab-nav-bar],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-button-toggle,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-group,\n  mat-toolbar,\n  mat-error`;\n\n/** Selector that matches all elements that may have style collisions with AngularJS Material. */\nexport const /** @type {?} */ MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-dialog-actions],\n  [md-dialog-close],\n  [md-dialog-content],\n  [md-dialog-title],\n  [md-fab],\n  [md-icon-button],\n  [md-menu-trigger-for],\n  [md-mini-fab],\n  [md-raised-button],\n  [md-tab-label],\n  [md-tab-link],\n  [md-tab-nav-bar],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-button-toggle,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-group,\n  md-toolbar,\n  md-error`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw new MdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw new MdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CompatibilityModule,\n      providers: [],\n    };\n  }\n/**\n * @param {?} _document\n */\nconstructor(\nprivate _document: any) {\n    if (!hasDoneGlobalChecks && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n/** @type {?} */\nCompatibilityModule.prototype._document;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    NgModule,\n    Directive,\n    Renderer,\n    ElementRef,\n    QueryList\n} from '@angular/core';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line]',\n  host: {\n    '[class.mat-line]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} bool\n * @return {?}\n */\nprivate _setClass(className: string, bool: boolean): void {\n    this._renderer.setElementClass(this._element.nativeElement, className, bool);\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [MdLine, CompatibilityModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n// Due to a bug in the ChromeDriver, Angular keyboard events are not triggered by `sendKeys`\n// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,\n// we are temporarily using a single (keydown) handler.\n// See: https://github.com/angular/angular/issues/9419\n\nexport const /** @type {?} */ UP_ARROW = 38;\nexport const /** @type {?} */ DOWN_ARROW = 40;\nexport const /** @type {?} */ RIGHT_ARROW = 39;\nexport const /** @type {?} */ LEFT_ARROW = 37;\n\nexport const /** @type {?} */ PAGE_UP = 33;\nexport const /** @type {?} */ PAGE_DOWN = 34;\n\nexport const /** @type {?} */ HOME = 36;\nexport const /** @type {?} */ END = 35;\n\nexport const /** @type {?} */ ENTER = 13;\nexport const /** @type {?} */ SPACE = 32;\nexport const /** @type {?} */ TAB = 9;\n\nexport const /** @type {?} */ ESCAPE = 27;\nexport const /** @type {?} */ BACKSPACE = 8;\nexport const /** @type {?} */ DELETE = 46;\n","\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","import {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  OpaqueToken,\n  Optional,\n} from '@angular/core';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef} from './ripple-ref';\n\n/** OpaqueToken that can be used to specify the global ripple options. */\nexport const /** @type {?} */ MD_RIPPLE_GLOBAL_OPTIONS = new OpaqueToken('md-ripple-global-options');\n\nexport type RippleGlobalOptions = {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n};\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n   centered: boolean;\n\n  /**\n   * Whether click events will not trigger the ripple. It can still be triggered by manually\n   * calling createRipple()\n   */\n   disabled: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n   radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n   speedFactor: number = 1;\n\n  /** Custom color for ripples. */\n   color: string;\n\n  /** Whether foreground ripples should be visible outside the component's bounds. */\n   unbounded: boolean;\nprivate _rippleRenderer: RippleRenderer;\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    // Type needs to be `any` because of https://github.com/angular/angular/issues/12631\n      globalOptions: any\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler);\n    this._globalOptions = globalOptions ? globalOptions : {};\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    '[class.mat-ripple]': 'true',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MdRipple} from './ripple';\nimport {CompatibilityModule} from '../compatibility/compatibility';\nimport {VIEWPORT_RULER_PROVIDER} from '../overlay/position/viewport-ruler';\nimport {SCROLL_DISPATCHER_PROVIDER} from '../overlay/scroll/scroll-dispatcher';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdRippleModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [MdRipple, CompatibilityModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER, SCROLL_DISPATCHER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer,\n} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n  /** Display state of the checkbox. */\n   state: MdPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n   disabled: boolean = false;\n/**\n * Color of the checkbox.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value) {\n      let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n      this._renderer.setElementClass(nativeElement, `mat-${this.color}`, false);\n      this._renderer.setElementClass(nativeElement, `mat-${value}`, true);\n      this._color = value;\n    }\n  }\nprivate _color: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer) {\n    this.color = 'accent';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    '[class.mat-pseudo-checkbox]': 'true',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n/** @type {?} */\nMdPseudoCheckbox.prototype._color;\n/** @type {?} */\nMdPseudoCheckbox.prototype._elementRef;\n/** @type {?} */\nMdPseudoCheckbox.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ModuleWithProviders,\n  Renderer,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  multiple: boolean = false;\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n   value: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Event emitted when the option is selected or deselected. */\n   onSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _renderer: Renderer,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return this._getHostElement().textContent.trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    this._renderer.invokeElementMethod(this._getHostElement(), 'focus');\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    this._active = true;\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    this._active = false;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.mat-option]': 'true',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @type {?}\n */\nMdOption.prototype.multiple;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._renderer;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\nexport class MdOptionModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdOptionModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption],\n  declarations: [MdOption]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdSelectionModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdError} from '../errors/error';\n/**\n * Exception thrown when attempting to attach a null portal to a host.\n * \\@docs-private\n */\nexport class NullPortalError extends MdError {\nconstructor() {\n      super('Must provide a portal to attach');\n  }\n}\n/**\n * Exception thrown when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n */\nexport class PortalAlreadyAttachedError extends MdError {\nconstructor() {\n      super('Host already has a portal attached');\n  }\n}\n/**\n * Exception thrown when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n */\nexport class PortalHostAlreadyDisposedError extends MdError {\nconstructor() {\n      super('This PortalHost has already been disposed');\n  }\n}\n/**\n * Exception thrown when attempting to attach an unknown portal type.\n * \\@docs-private\n */\nexport class UnknownPortalTypeError extends MdError {\nconstructor() {\n      super(\n        'Attempting to attach an unknown Portal type. ' +\n        'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.');\n  }\n}\n/**\n * Exception thrown when attempting to attach a portal to a null host.\n * \\@docs-private\n */\nexport class NullPortalHostError extends MdError {\nconstructor() {\n      super('Attempting to attach a portal to a null PortalHost');\n  }\n}\n/**\n * Exception thrown when attempting to detach a portal that is not attached.\n * \\@docs-private\n */\nexport class NoPortalAttachedError extends MdError {\nconstructor() {\n      super('Attempting to detach a portal that is not attached to a host');\n  }\n}\n","import {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    Injector\n} from '@angular/core';\nimport {\n    NullPortalHostError,\n    PortalAlreadyAttachedError,\n    NoPortalAttachedError,\n    NullPortalError,\n    PortalHostAlreadyDisposedError,\n    UnknownPortalTypeError\n} from './portal-errors';\nimport {ComponentType} from '../overlay/generic-component-type';\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\n    if (host == null) {\n      throw new NullPortalHostError();\n    }\n\n    if (host.hasAttached()) {\n      throw new PortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return /** @type {?} */(( <T> host.attach(this)));\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\n    let /** @type {?} */ host = this._attachedHost;\n    if (host == null) {\n      throw new NoPortalAttachedError();\n    }\n\n    this._attachedHost = null;\n    return host.detach();\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost) {\n    this._attachedHost = host;\n  }\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef: ViewContainerRef;\n\n  /** [Optional] Injector used for the instantiation of the component. */\n  injector: Injector;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\n      component: ComponentType<T>,\n      viewContainerRef: ViewContainerRef = null,\n      injector: Injector = null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal extends Portal<Map<string, any>> {\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\n  templateRef: TemplateRef<any>;\n\n  /** Reference to the ViewContainer into which the template will be stamped out. */\n  viewContainerRef: ViewContainerRef;\n\n  /**\n   * Additional locals for the instantiated embedded view.\n   * These locals can be seen as \"exports\" for the template, such as how ngFor has\n   * index / event / odd.\n   * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n   */\n  locals: Map<string, any> = new Map<string, any>();\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n/**\n * @param {?} host\n * @param {?=} locals\n * @return {?}\n */\nattach(host: PortalHost, locals?: Map<string, any>): Map<string, any> {\n    this.locals = locals == null ? new Map<string, any>() : locals;\n    return super.attach(host);\n  }\n/**\n * @return {?}\n */\ndetach(): void {\n    this.locals = new Map<string, any>();\n    return super.detach();\n  }\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n * @type {?}\n */\nTemplatePortal.prototype.locals;\n}\n\n\n\n/**\n * A `PortalHost` is an space that can contain a single `Portal`.\n */\nexport interface PortalHost {\n  attach(portal: Portal<any>): any;\n\n  detach(): any;\n\n  dispose(): void;\n\n  hasAttached(): boolean;\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\nprivate _attachedPortal: Portal<any>;\nprivate _disposeFn: () => void;\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\n    if (!portal) {\n      throw new NullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throw new PortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throw new PortalHostAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throw new UnknownPortalTypeError();\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal) {}\n/**\n * @return {?}\n */\ndetach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n/**\n * @return {?}\n */\ndispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\n","import {\n    NgModule,\n    ModuleWithProviders,\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    OnDestroy,\n    Input,\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n * \n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-portal], [portal]',\n  exportAs: 'cdkPortal',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n * \n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\nprivate _portal: Portal<any>;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> {\n    return this._portal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any>) {\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._portal = portal;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.dispose();\n    this._portal = null;\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n * \n * @template T\n * @param {?} portal Portal to be attached to the portal host.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let /** @type {?} */ componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._portal = portal;\n\n    return ref;\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._portal = portal;\n\n    // TODO(jelbourn): return locals from view\n    return new Map<string, any>();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkPortalHost], [portalHost]',\n  inputs: ['portal: cdkPortalHost']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {\n/**\n * @deprecated\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: PortalModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {PositionStrategy} from './position/position-strategy';\nimport {LayoutDirection} from '../rtl/dir';\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nexport class OverlayState {\n  /** Strategy with which to position the overlay. */\n  positionStrategy: PositionStrategy;\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass: string = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight: number | string;\n\n  /** The direction of the text in the overlay panel. */\n  direction: LayoutDirection = 'ltr';\n\n  // TODO(jelbourn): configuration still to add\n  // - focus trap\n  // - disable pointer events\n  // - z-index\n}\n\nfunction OverlayState_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayState.prototype.positionStrategy;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayState.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayState.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayState.prototype.direction;\n}\n\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n    // To move the view to the specified host element. We just re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return new Map<string, any>();\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\n    super.dispose();\n    if (this._hostDomElement.parentNode != null) {\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n    }\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\n"],"names":["SELECT_PANEL_PADDING_X","[attr.tabindex]","[attr.aria-disabled]","[attr.disabled]","(click)","template","exportAs","MdMenuItem","ctorParameters","type","Renderer","ElementRef","propDecorators","disabled","Input","transition","style","opacity","transform","animate","MdMenu","posX","posY","deprecatedPosX","deprecatedPosY","this","_classList","close","EventEmitter","_setPositionX","prototype","ngAfterContentInit","_this","_keyManager","FocusKeyManager","items","withWrap","_tabSubscription","tabOut","subscribe","_emitCloseEvent","ngOnDestroy","unsubscribe","Object","defineProperty","set","classes","split","reduce","obj","className","setPositionClasses","positionX","positionY","MdMenuInvalidPositionX","pos","_setPositionY","styles","encapsulation","ViewEncapsulation","None","animations","transformMenu","fadeInItems","undefined","decorators","Attribute","args","templateRef","ViewChild","TemplateRef","overlapTrigger","classList","Output","MdMenuTrigger","_overlay","_element","_viewContainerRef","_renderer","_dir","onMenuClose","get","menu","enumerable","configurable","v","_checkMenu","closeMenu","destroyMenu","_menuOpen","openMenu","_createOverlay","_overlayRef","attach","_portal","_subscribeToBackdrop","detach","_backdropSubscription","dispose","_cleanUpSubscriptions","focus","invokeElementMethod","nativeElement","backdropClick","_openedByMouse","focusFirstItem","_resetMenu","_setIsMenuOpen","isOpen","onMenuOpen","emit","MdMenuMissingError","TemplatePortal","config","_getOverlayConfig","_subscribeToPositions","create","overlayState","OverlayState","positionStrategy","_getPosition","withDirection","dir","change","connectionPair","originX","originY","overlayY","fallbackOriginY","fallbackOverlayY","withFallbackPosition","fallbackX","overlayX","_positionSubscription","_handleMousedown","event","isFakeMousedownFromScreenReader","selector","host","aria-haspopup","(mousedown)","Overlay","_deprecatedMdMenuTriggerFor","_deprecatedMatMenuTriggerFor","_matMenuTriggerFor","MdMenuModule","providers","NgModule","imports","OverlayModule","CommonModule","MdRippleModule","CompatibilityModule","exports","declarations","MdDialogRef","_containerInstance","_afterClosed","Subject","detachBackdrop","state$$1","next","_result","complete","componentInstance","dialogResult","_exit","asObservable","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","updateSize","width","height","getState","DialogInjector","[class.mat-tab-group]","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","MdTabGroup","dynamicHeight","selectedIndexChange","focusChange","selectChange","MdTabLabelWrapper","value","_disabled","coerceBooleanProperty","elementRef","offsetLeft","[class.mat-tab-disabled]","MdInkBar","_elementRef","_ngZone","alignToElement","element","setElementStyle","_getLeftPosition","show","offsetWidth","Directive","NgZone","_directionChange","dirChange","_alignInkBar","MdTabNavBar","updateActiveLink","_activeLinkChanged","_activeLinkElement","_inkBar","[class.mat-tab-nav-bar]","Dir","Optional","MdTabLink","_mdTabNavBar","_isActive","[class.mat-tab-link]","active","MdTabLinkRipple","_super","ngZone","ruler","globalOptions","call","__extends","MdRipple","ViewportRuler","Inject","MD_RIPPLE_GLOBAL_OPTIONS","MdTabBody","_changeDetectorRef","_canBeAnimated","_position","_getLayoutDirection","origin","_origin","ngAfterViewChecked","_portalHost","_content","ngAfterContentChecked","markForCheck","_onTranslateTabStarted","e","_isCenterPosition","toState","onCentering","clientHeight","_onTranslateTabComplete","onCentered","[class.mat-tab-body]","trigger","state","ChangeDetectorRef","MdTabHeader","_focusIndex","_scrollDistance","_selectedIndexChanged","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","_tabLabelCount","_labelWrappers","length","_updatePagination","_checkScrollingControls","_scrollDistanceChanged","_focusPreviousTab","focusIndex","_alignInkBarToSelectedTab","_onContentChanges","_isValidIndex","tab","_setTabFocus","tabIndex","_scrollToLabel","toArray","containerEl","_tabListContainer","scrollLeft","_focusNextTab","_moveFocus","_updateTabScrollPosition","translateX","scrollDistance","applyCssTransform","_tabList","Math","max","min","_getMaxScrollDistance","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","getOffsetLeft","labelAfterPos","getOffsetWidth","afterVisiblePos","_checkPaginationEnabled","scrollWidth","selectedLabelWrapper","selectedIndex","Component","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","indexFocused","MdTabsModule","ngModule","PortalModule","VIEWPORT_RULER_PROVIDER","SCROLL_DISPATCHER_PROVIDER","MdToolbarRow","[class.mat-toolbar-row]","MdToolbar","renderer","_color","_updateColor","_setElementColor","newColor","color","isAdd","[class.mat-toolbar]","MdToolbarModule","forRoot","MdTooltipInvalidPositionError","MdError","MdTooltip","_scrollDispatcher","_platform","IOS","listen","hide","_tooltipInstance","_disposeTooltip","_message","_setTooltipMessage","message","hideDelay","showDelay","scrollSubscription","scrolled","delay","trim","_isTooltipVisible","isVisible","_createTooltip","portal","ComponentPortal","TooltipComponent","instance","afterHidden","_getOrigin","_getOverlayPosition","connectedTo","onPositionChange","isDirectionLtr","isLtr","_markForCheck","onMicrotaskEmpty","first","(longpress)","(touchend)","ScrollDispatcher","ViewContainerRef","Platform","_positionDeprecated","_deprecatedMessage","_matMessage","_matPosition","_matDisabled","_matShowDelay","_visibility","_onHide","_closeOnInteraction","_showTimeoutId","clearTimeout","_hideTimeoutId","setTimeout","_setTransformOrigin","_transformOrigin","_handleBodyInteraction","MdTooltipModule","PlatformModule","entryComponents","MdMenuInvalidPositionY","_getTabIndex","_checkDisabled","preventDefault","stopPropagation","role","[class.mat-menu-item]","changeDetection","ChangeDetectionStrategy","OnPush","MdProgressBar","HostBinding","bufferValue","MdProgressBarModule","MdInputContainerPlaceholderConflictError","MdInputContainerUnsupportedTypeError","MdInputContainerMissingMdInputError","nextUniqueId$1","MdPlaceholder","MdHint","align","id","[class.mat-hint]","MdErrorDirective","MdPrefix","MdSuffix","MdInputDirective","_required","focused","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_id","_type","_isTextarea","setElementProperty","_isBadInput","_onBlur","_isNeverEmpty","indexOf","validity","badInput","nodeName","toLowerCase","[class.mat-input-element]","[id]","(blur)","(focus)","(input)","NgControl","Self","placeholder","required","_placeholderChange","_parentFormGroup","_subscriptAnimationState","_hintLabel","MdInputContainer","_processHints","_floatPlaceholder","_mdInputChild","_validatePlaceholders","ngAfterViewInit","detectChanges","_shouldForward","prop","control","_ngControl","isInvalid","invalid","_getDisplayedMessages","_syncAriaDescribedby","startHint_1","hintLabel","MdInputContainerDuplicatedHintError","hint","endHint_1","endHint","_hintChildren","find","startHint","ids","push","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","NgForm","FormGroupDirective","floatPlaceholder","ContentChild","_placeholderChild","_errorChildren","ContentChildren","_prefixChildren","_suffixChildren","MdTextareaAutosize","minRows","_cachedLineHeight","maxRows","_cacheTextareaLineHeight","textarea","textareaClone","visibility","border","padding","maxHeight","scrollHeight","[style.min-height]","[style.max-height]","MdInputModule","announcementMessage","viewContainerRef","MdSnackBarRef","containerInstance","_onAction","onAction","dismiss","_onExit","_finishDismiss","_instance","closed","exit","afterDismissed","_onEnter","MdSnackBarContentAlreadyAttached","MdSnackBarContainer","onEnter","attachComponentPortal","snackBarConfig","extraClasses","attachTemplatePortal","Error","onAnimationEnd","_completeExit","run","enter","animationState","onExit","[@state]","SimpleSnackBar","snackBarRef","_action","action","[class.mat-simple-snackbar]","MdSnackBar","_live","_parentSnackBar","_openedSnackBarRef","_snackBarRefAtThisLevel","openFromComponent","component","_applyConfigDefaults","duration","afterOpened","simpleSnackBarRef","_attachSnackBarContainer","overlayRef","containerPortal","containerRef","_attachSnackbarContent","container","contentRef","LiveAnnouncer","SkipSelf","MdSnackBarModule","MdTabLabel","MdTab","_contentPortal","ngOnInit","templateLabel","textLabel","_dynamicHeight","headerPosition","_onFocusChange","_indexToSelect","map","index","_onSelectChange","_createChangeEvent","_tabs","forEach","_groupId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","_tabBodyWrapperHeight","_tabBodyWrapper","offsetHeight","[class.mat-grid-list]","MdGridList","_tiles","MdGridTile","gutterSize","rowHeight","MdGridListModule","MdLineModule","MdGridTileText","MdGridTileHeaderCssMatStyler","MdGridAvatarCssMatStyler","MdCardContent","[class.mat-card-content]","MdCardTitle","[class.mat-card-title]","[class.mat-card-subtitle]","MdCardSubtitle","MdCardActions","MdCardFooter","[class.mat-card-sm-image]","[class.mat-card-md-image]","MdCardMdImage","class.mat-card-lg-image","[class.mat-card-image]","MdCardImage","MdCardXlImage","[class.mat-card-xl-image]","MdCardAvatar","MdCard","[class.mat-card]","MdCardHeader","MdCardTitleGroup","MdCardModule","MdCardSmImage","MdCardLgImage","MdChip","onFocus","destroy","_addDefaultCSSClass","String","_handleClick","[class.mat-chip]","tabindex","[class.mat-chip-selected]","_selectable","MdChipList","chips","_subscribeChips","changes","setFirstItemActive","_keydown","target","contains","keyCode","selectable","_toggleSelectOnFocusedChip","setPreviousItemActive","setNextItemActive","onKeydown","focusedIndex","activeItemIndex","focusedChip","toggleSelected","chip","_addChip","_subscribed","chipIndex","updateActiveItemIndex","delete","[class.mat-chip-list]","queries","MdChipsModule","MdIconNameNotFoundError","iconName","MdIconSvgTagNotFoundError","SvgIconConfig","iconKey","namespace","name","MdIconRegistry","_http","_sanitizer","_cachedIconsByUrl","Map","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","url","_svgIconConfigs","key","addSvgIconSet","addSvgIconSetInNamespace","_iconSetConfigs","registerFontClassAlias","alias","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getNamedSvgIcon","_getSvgFromConfig","Observable","throw","svgElement","namedIcon","_extractIconWithNameFromAnySet","iconSetConfigs","of","iconSetFetchRequests","iconSetConfig","do","svg","_loadSvgIconFromConfig","svgText","_svgElementFromString","_createSvgElementForSingleIcon","responseText","_setSvgAttributes","iconNode","iconSet","querySelector","cloneNode","appendChild","div","innerHTML","str","setAttribute","finally","share","Injectable","Http","DomSanitizer","MdIconInvalidNameError","_mdIconRegistry","hostAriaLabel","MdIcon","parts","changedInputs","keys","svgIcon","_a","_splitIconName","_setSvgElement","err","console","log","_usingFontIcon","_updateFontIconClasses","_updateAriaLabel","ariaLabel","_previousAriaLabel","_getAriaLabel","fontIcon","text","textContent","layoutElement","projectNodes","elem","fontSetClass","fontSet","classNameForFontAlias","_previousFontSetClass","_previousFontIconClass","setElementClass","ICON_REGISTRY_PROVIDER","MdIconModule","DEGREE_IN_RADIANS","PI","MdProgressSpinner","_mode","mode","interval","clearInterval","_interdeterminateInterval","_cleanupIndeterminateAnimation","_animateCircle","animateFrom","animateTo","ease","rotation","changeInValue","_renderArc","elapsedTime","_startIndeterminateAnimation","animate$$1","start","end","materialEase","rotationStartPoint","interdeterminateInterval","runOutsideAngular","setInterval","currentValue","path","_path","getSvgArc","[attr.aria-valuemin]","MdSpinner","MdProgressSpinnerModule","MdProgressSpinnerCssMatStyler","_value","_bufferValue","clamp$1","aria-valuemax","[class.mat-primary]","[class.mat-accent]","onCloseStart","onClose","onAlignChanged","_toggleAnimationPromise","_resolveToggleAnimationPromise","_elementFocusedBeforeSidenavWasOpened","MdSidenav","_align","_disableClose","_focusTrap","_focusTrapFactory","enabled","isFocusTrapEnabled","toggle","onOpenStart","Promise","resolve","disableClose","transitionEvent","propertyName","endsWith","_opened","[class.mat-sidenav-opened]","onOpen","opened","MdSidenavContainer","_enableTransitions","_start","_end","_sidenavs","_validateDrawers","_watchSidenavToggle","sidenav","_watchSidenavAlign","_setContainerClass","bool","MdDuplicatedSidenavError","_left","_right","_isSidenavOpen","side","_getSidenavEffectiveWidth","_getPositionLeft","_getPositionRight","_getStyles","marginLeft","_getMarginLeft","_getPositionOffset","[class.mat-sidenav-transition]","MdSidenavModule","A11yModule","MdListDivider","MdList","MdListCssMatStyler","[class.mat-list]","MdNavListCssMatStyler","[class.mat-nav-list]","provide","LIST_TYPE_TOKEN","useValue","MdNavListTokenSetter","MdDividerCssMatStyler","[class.mat-divider]","MdListAvatarCssMatStyler","[class.mat-list-avatar]","MdListIconCssMatStyler","[class.mat-list-icon]","MdListSubheaderCssMatStyler","[class.mat-subheader]","MdListItem","_listType","disableRipple","_hasFocus","avatar","isRippleEnabled","_handleBlur","MdListModule","_colspan","_rowspan","coerceToNumber","[class.mat-grid-tile]","rowspan","colspan","_lineSetter","MdLineSetter","_lines","MdLine","[class.mat-grid-avatar]","MdGridTileFooterCssMatStyler","[class.mat-grid-tile-footer]","MdGridListColsError","MdGridTileTooWideError","MdGridListBadRatioError","rowIndex","tracker","Array","numColumns","fill","positions","tiles","tile","_trackTile","TileCoordinator","lastRowMax","apply","rowCount","gapStartIndex","_findMatchingGap","_markTilePosition","columnIndex","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","row","col","_gutterSize","normalizeUnits","sizePercent","gutterFraction","TileStyler","getTilePosition","baseSize","offset","calc","getTileSize","span","setColStyles","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setRowStyles","_direction","_setStyle","baseTileWidth","getGutterSpan","percentWidth","gutterWidth","getComputedHeight","FixedTileStyler","fixedRowHeight","init","cols","direction","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","getTileSpan","parseFloat","ratioParts","FitTileStyler","arguments","gutterHeightPerTile","_rows","getBaseTileSize","_cols","_rowHeight","coerceToString","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","_tileStyler","setStyle","_setListStyle","style$$1","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[class.mat-select-disabled]","[class.mat-select]","MdSelect","overlayDir","ConnectedOverlayDirective","options","MdOption","ariaLabelledby","MdSelectModule","MdOptionModule","MD_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","MdSlideToggle","multi","MdSlideToggleChange","_focusOriginMonitor","onChange","_","_slideRenderer","_disableRipple","SlideToggleRenderer","_onChangeEvent","_onInputClick","onTouched","_setMousedown","writeValue","registerOnTouched","fn","setDisabledState","isDisabled","_checked","_onInputFocusChange","focusOrigin","_focusRipple","_emitChangeEvent","_onDragStart","startThumbDrag","checked","_onDrag","dragging","updateThumbPosition","deltaX","_previousChecked","stopThumbDrag","[class.mat-slide-toggle]","[class.mat-checked]","FocusOriginMonitor","_inputElement","_thumbBarWidth","_thumbBarEl","clientWidth","_thumbEl","remove","dragPercentage","_getDragPercentage","distance","dragX","percentage","MdSlideToggleModule","MD_SLIDER_VALUE_ACCESSOR","MdSlider","MdSliderChange","_invert","_thumbLabel","_tickInterval","input","_percent","_tickIntervalPercent","_sliderDimensions","_lastChangeValue","_lastInputValue","monitor","SliderRenderer","_max","coerceNumberProperty","_calculatePercentage","_min","_step","_roundLabelTo","toString","pop","tickInterval","toFixed","vertical","invert","percent","axis","_invertMouseCoords","_thumbGap","backgroundSize","sign","tickSize","rotate","_isMinValue","_invertAxis","_onMouseenter","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitValueIfChanged","_onSlide","center","addFocus","_onFocus","getSliderDimensions","_updateTickIntervalPercent","_onKeydown","_increment","_onKeyup","_clamp","step","numSteps","size","posComponent","closestValue","_controlValueAccessorChangeFn","pixelsPerStep","trackSize","pixelsPerTick","[class.mat-slider]","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[class.mat-warn]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_sliderElement","MdSliderModule","FormsModule","StyleModule","RtlModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MdSidenavToggleResult","animationFinished","[class.mat-checkbox]","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MD_CHECKBOX_CONTROL_VALUE_ACCESSOR","MdCheckbox","indeterminate","MdCheckboxModule","MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MdRadioChange","MdRadioGroup","_name","_uniqueIdCounter$2","_selected","_radios","labelPosition","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","selected","_isInitialized","isAlreadySelected","source","MdRadioButton","radioGroup","_radioDispatcher","newCheckedState","focusVia","_isRippleDisabled","_onInputChange","groupValueChanged","_touch","fadeOut","[class.mat-radio-checked]","MdRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","ListKeyManager","_items","_activeItemIndex","_tabOut","_wrap","setLastItemActive","_setActiveItemByIndex","_setActiveInDefaultMode","delta","_setActiveInWrapMode","fallbackDelta","setActiveItem","fadeInContent","MdSelectDynamicMultipleError","MdSelectNonArrayValueError","MdSelectChange","_viewportRuler","_control","_panelOpen","_scrollTop","_multiple","_placeholderState","_onChange","_onTouched","_optionIds","_offsetX","_offsetY","_positions","valueAccessor","_tabIndex","parseInt","_placeholder","then","_setTriggerWidth","_selectionModel","merge","option","onSelectionChange","_resetOptions","_setSelectionByValue","_dropSubscriptions","_changeSubscription","panelOpen","open","registerOnChange","_isRtl","selectedOptions","reverse","join","viewValue","_triggerWidth","_getTriggerRect","_panelDoneAnimating","overlayElement","scrollTop","isArray","multiple","_clearSelection","_selectValue","_sortValues","_setValueWidth","isEmpty","correspondingOption","select","skip","clear","deselect","getBoundingClientRect","_listenToOptions","_setOptionIds","_setOptionMultiple","_optionSubscription","optionSelectionChanges","isUserInput","_onSelect","wasSelected","isSelected","valueToEmit","_focusCorrectOption","_getOptionIndex","result","current","panelHeight","scrollBuffer","_calculateOverlayScroll","maxScroll","_checkOverlayWithinViewport","SELECT_OPTION_HEIGHT","_floatPlaceholderState","_getPlaceholderVisibility","_calculateOverlayOffset","optionOffsetFromPanelTop","firstDisplayedIndex","selectedDisplayIndex","viewportRect","getViewportRect","triggerRect","panelHeightBottom","bottomSpaceAvailable","_adjustPanelUp","panelHeightTop","topSpaceAvailable","_adjustPanelDown","distanceBelowViewport","_getOriginBasedOnOption","distanceAboveViewport","abs","MdCoreModule","ObserveContentModule","MdSelectionModule","MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MdButtonToggleGroup","_uniqueIdCounter$1","MdButtonToggleChange","_vertical","_change","_updateButtonToggleNames","_buttonToggles","_updateSelectedButtonToggleFromValue","matchingButtonToggle","buttonToggle","[class.mat-button-toggle-vertical]","MdButtonToggleGroupMultiple","MdButtonToggle","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","notify","[class.mat-button-toggle]","UniqueSelectionDispatcher","MdButtonToggleModule","MdButtonCssMatStyler","[class.mat-button]","MdRaisedButtonCssMatStyler","[class.mat-raised-button]","MdIconButtonCssMatStyler","MdFabCssMatStyler","[class.mat-fab]","MdMiniFabCssMatStyler","[class.mat-mini-fab]","MdButton","_isRoundButton","_hasAttributeWithPrefix","_getHostElement","unprefixedAttributeNames","_i","el","hasAttribute","suffix","[disabled]","MdAnchor","_haltDisabledEvents","MdButtonModule","nextId","TransitionCheckState","Init","Checked","Unchecked","MdCheckboxChange","indeterminateChange","_indeterminate","stopMonitoring","changed","_transitionCheckState","Indeterminate","_currentCheckState","newState","_removeFocusRipple","_onInteractionEvent","oldState","animSuffix","_state","_pane","formatCssUnit","OverlayRef","_togglePointerEvents","enablePointer","_backdropElement","document","createElement","add","backdropClass","requestAnimationFrame","_updateStackingOrder","nextSibling","parentNode","backdropToDetach","finishDetach_1","addEventListener","ConnectionPositionPair","ConnectedOverlayPositionChange","scrollableViewProperties","ScrollableViewProperties","_onPositionChange","ConnectedPositionStrategy","originRect","overlayRect","fallbackPoint","overlayPoint","fitsInViewport","_setElementPosition","visibleArea","lastPosition","_lastConnectedPosition","_preferredPositions","withOffsetX","withOffsetY","_getEndX","rect","_getOriginConnectionPoint","originStartX","_getStartX","originEndX","_getOverlayPoint","originPoint","overlayStartX","overlayStartY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","getScrollableViewProperties","overlay","isOriginClipped","isElementClipped","originBounds","scrollContainerBounds","isOriginOutsideView","isElementOutsideView","isOverlayClipped","overlayBounds","elementBounds","containersBounds","some","containerBounds","outsideAbove","outsideBelow","outsideLeft","clippedBelow","boundingClientRect","_subtractOverflows","overflows","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","GlobalPositionStrategy","_height","parentStyles","_cssPosition","marginBottom","marginRight","alignItems","_wrapper","OverlayPositionBuilder","OverlayContainer","_themeClass","_containerElement","_createContainer","OVERLAY_CONTAINER_PROVIDER","deps","useFactory","OVERLAY_CONTAINER_PROVIDER_FACTORY","_overlayContainer","_componentFactoryResolver","_positionBuilder","_appRef","_injector","defaultState","_createOverlayRef","_createPaneElement","getContainerElement","pane","ApplicationRef","Injector","_scroll","_elementScrolled","Scrollable","deregister","elementScrolled","OverlayOrigin","_hasBackdrop","positionChange","offsetX","offsetY","_open","_attachOverlay","_detachOverlay","_destroyOverlay","defaultPositionList","_buildConfig","overlayConfig","minWidth","minHeight","hasBackdrop","_createPositionStrategy","_handlePositionChanges","hasAttached","_templatePortal","OVERLAY_PROVIDERS","hasV8BreakIterator","window","Intl","v8BreakIterator","EDGE","test","navigator","userAgent","TRIDENT","WEBKIT","BLINK","MSStream","ANDROID","InteractivityChecker","hasGeometry","getComputedStyle","isTabbable","frameType","tabIndexValue","getTabIndexValue","FIREFOX","isPotentiallyTabbableIOS","FocusTrap","_checker","deferAnchors","_enabled","attachAnchors","val","_startAnchor","_endAnchor","_createAnchor","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","focusLastTabbableElement","redirectToElement","_getFirstTabbableElement","focusTargets","querySelectorAll","children","tabbableChild","_getLastTabbableElement","root","isFocusable","childNodes","nodeType","Node","ELEMENT_NODE","anchor","FocusTrapFactory","FocusTrapDeprecatedDirective","focusTrap","FocusTrapDirective","LIVE_ANNOUNCER_ELEMENT_TOKEN","OpaqueToken","elementToken","_liveElement","_createLiveElement","announce","politeness","liveEl","body","FullscreenOverlayContainer","_adjustParentForFullscreenChange","getFullscreenElement","_addFullscreenChangeListener","fullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","events","_hammer","warn","buildHammer","press","Press","pan","recognizeWith","swipe","mc","slide","longpress","_createRecognizer","base","recognizer","inheritances","item","HammerGestureConfig","SelectionModel","_isMulti","initiallySelectedValues","_emitChanges","_selection","Set","_deselectedToEmit","_selectedToEmit","_markSelected","sort","predicate","eventData","SelectionChange","_unmarkSelected","_unmarkAll","added","removed","_listeners","listener","_elementInfo","info_1","checkChildren","subject","focusListener","blurListener","elementInfo","unlisten","_setClasses","_registerDocumentEvents","_lastTouchTarget","_touchTimeout","_windowFocused","_setOriginForCurrentEventQueue","_wasCausedByTouch","focusTarget","_lastFocusOrigin","relatedTarget","CdkMonitorFocus","cdkFocusChange","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","ACCELERATION_CURVE","AnimationDurations","EXITING","enforceStyleRecalculation","sqrt","distX","distY","SCROLL_DISPATCHER_PROVIDER_FACTORY","parentDispatcher","VIEWPORT_RULER_PROVIDER_FACTORY","parentRuler","scrollDispatcher","getClientRects","isNativeFormElement","isAnchorElement","isNaN","hasValidTabIndex","getAttribute","inputType","isPotentiallyFocusable","getWindow","node","ownerDocument","defaultView","liveElement","supportedInputTypes","featureTestInput_1","buttons","UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY","FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY","transformValue","fallbackValue","n","cloneSvg","angleInRadians","angleInDegrees","linearEase","currentTime","startValue","startPoint","startAngle","MAX_ANGLE","endAngle","polarToCartesian","arcSweep","largeArcFlag","sources","sources_1","dest","hasDoneGlobalChecks","MdCompatibilityInvalidPrefixError","MdPrefixRejector","MatPrefixRejector","NoConflictStyleCompatibilityMode","MATERIAL_COMPATIBILITY_MODE","_setLineClass","count","_setClass","_resetClasses","old","ObserveContent","_observer","observe","characterData","childList","disconnect","RippleState","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","fadeOutRipple","RippleRenderer","_ruler","rippleConfig","rippleDisabled","_triggerEvents","onMousedown","bind","onMouseup","onMouseLeave","setTriggerElement","containerRect","pageX","pageY","scrollPosition","getViewportScrollPosition","ripple","radius","backgroundColor","rippleRef","_activeRipples","runTimeoutOutsideZone","persistent","_isMousedown","rippleEl","transitionDuration","RIPPLE_FADE_OUT_DURATION","removeChild","fadeOutAll","_triggerElement","removeEventListener","fadeInRipple","_scrolledCount","scrollableReferences","register","scrollable","_notify","auditTimeInMs","callback","observable","_globalSubscription","subscription","scrollableContainsElement","scrollingContainers","scrollableElement","parentElement","_scrolled","documentRect","_documentRect","innerHeight","scrollY","scrollX","_cacheViewportGeometry","documentElement","_rippleRenderer","_globalOptions","launch","centered","speedFactor","baseSpeedFactor","[class.mat-ripple-unbounded]","unbounded","MdPseudoCheckbox","[class.mat-pseudo-checkbox]","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","_uniqueIdCounter","MdOptionSelectionChange","_isCompatibilityMode","_active","_selectViaInteraction","_emitSelectionChangeEvent","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[attr.aria-selected]","[class.mat-option]","NullPortalError","PortalAlreadyAttachedError","PortalHostAlreadyDisposedError","UnknownPortalTypeError","NullPortalHostError","NoPortalAttachedError","Portal","_attachedHost","setAttachedHost","injector","locals","BasePortalHost","_isDisposed","_attachedPortal","_invokeDisposeFn","_disposeFn","TemplatePortalDirective","PortalHostDirective","componentFactory","resolveComponentFactory","ref","createComponent","parentInjector","setDisposeFn","createEmbeddedView","inputs","ComponentFactoryResolver","_defaultInjector","DomPortalHost","componentRef","attachView","hostView","_hostDomElement","_getComponentRootNode","viewRef","viewContainer","rootNodes","rootNode","_backdropClick","attachResult","_attachBackdrop"],"mappings":"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"}