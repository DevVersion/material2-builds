{"version":3,"file":"material-stepper.umd.min.js","sources":["../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button/index.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/icon/index.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/stepper/index.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n/**\n * Default color palette for round buttons (mat-fab and mat-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MatButton,\n                 anchor: MatAnchor) {\n    // Set the default color palette for the mat-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatButton), ] }, ]},\n{type: MatAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatAnchor), ] }, ]},\n];\n}\n\nfunction MatFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMatFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MatMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MatButton,\n                 anchor: MatAnchor) {\n    // Set the default color palette for the mat-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatButton), ] }, ]},\n{type: MatAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatAnchor), ] }, ]},\n];\n}\n\nfunction MatMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonBase.prototype._renderer;\n/** @type {?} */\nMatButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n/**\n * Material design button.\n */\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor) {\n    super(renderer, elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes with a 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      return this._getHostElement().hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusMonitor, },\n];\n}\n\nfunction MatButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButton.ctorParameters;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMatButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMatButton.prototype._isIconButton;\n/** @type {?} */\nMatButton.prototype._platform;\n/** @type {?} */\nMatButton.prototype._focusMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MatAnchor extends MatButton {\n/**\n * @param {?} platform\n * @param {?} focusMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusMonitor);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MatAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMatAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatAnchor.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\nexport class MatButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatButtonModule,MatButtonCssMatStyler,MatRaisedButtonCssMatStyler,MatIconButtonCssMatStyler,MatFab,MatMiniFab,MatButtonBase,_MatButtonMixinBase,MatButton,MatAnchor} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {catchOperator, doOperator, finallyOperator, map, RxChain, share} from '@angular/cdk/rxjs';\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MatIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <mat-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MatIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMatIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMatIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMatIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMatIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMatIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMatIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMatIconRegistry.prototype._http;\n/** @type {?} */\nMatIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MatIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MatIconRegistry(http, sanitizer);\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {first} from '@angular/cdk/rxjs';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n/**\n * \\@docs-private\n */\nexport class MatIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconBase.prototype._renderer;\n/** @type {?} */\nMatIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _iconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _iconRegistry: MatIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return /** @type {?} */(( <[string, string]>parts));\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        first.call(this._iconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._renderer.appendChild(this._elementRef.nativeElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _clearSvgElement() {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MatIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MatIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIcon.ctorParameters;\n/** @type {?} */\nMatIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMatIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMatIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMatIcon.prototype.fontIcon;\n/** @type {?} */\nMatIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMatIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMatIcon.prototype._iconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MatIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatIconModule,MatIconBase,_MatIconMixinBase,MatIcon,getMatIconNameNotFoundError,getMatIconNoHttpProviderError,getMatIconFailedToSanitizeError,MatIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatStepLabel = CdkStepLabel;\nexport class MatStepLabel extends _MatStepLabel {\n/**\n * @param {?} template\n */\nconstructor(template: TemplateRef<any>) {\n    super(template);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matStepLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction MatStepLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Component, Input, ViewEncapsulation, ElementRef, OnDestroy, Renderer2} from '@angular/core';\nimport {MatStepLabel} from './step-label';\nexport class MatStepHeader implements OnDestroy {\n/**\n * Icon for the given step.\n */\nicon: string;\n/**\n * Label of the given step.\n */\nlabel: MatStepLabel | string;\n/**\n * Index of the given step.\n * @return {?}\n */\nget index() { return this._index; }\n/**\n * @param {?} value\n * @return {?}\n */\nset index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\nprivate _index: number;\n/**\n * Whether the given step is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\nprivate _selected: boolean;\n/**\n * Whether the given step label is active.\n * @return {?}\n */\nget active() { return this._active; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\nprivate _active: boolean;\n/**\n * Whether the given step is optional.\n * @return {?}\n */\nget optional() { return this._optional; }\n/**\n * @param {?} value\n * @return {?}\n */\nset optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\nprivate _optional: boolean;\n/**\n * @param {?} _focusMonitor\n * @param {?} _element\n * @param {?} renderer\n */\nconstructor(\nprivate _focusMonitor: FocusMonitor,\nprivate _element: ElementRef,\n    renderer: Renderer2) {\n    _focusMonitor.monitor(_element.nativeElement, renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n/**\n * Returns string label of given step if it is a text label.\n * @return {?}\n */\n_stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n/**\n * Returns MatStepLabel if the label of given step is a template label.\n * @return {?}\n */\n_templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n/**\n * Returns the host HTML element.\n * @return {?}\n */\n_getHostElement() {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FocusMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'icon': [{ type: Input },],\n'label': [{ type: Input },],\n'index': [{ type: Input },],\n'selected': [{ type: Input },],\n'active': [{ type: Input },],\n'optional': [{ type: Input },],\n};\n}\n\nfunction MatStepHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepHeader.ctorParameters;\n/** @type {?} */\nMatStepHeader.propDecorators;\n/**\n * Icon for the given step.\n * @type {?}\n */\nMatStepHeader.prototype.icon;\n/**\n * Label of the given step.\n * @type {?}\n */\nMatStepHeader.prototype.label;\n/** @type {?} */\nMatStepHeader.prototype._index;\n/** @type {?} */\nMatStepHeader.prototype._selected;\n/** @type {?} */\nMatStepHeader.prototype._active;\n/** @type {?} */\nMatStepHeader.prototype._optional;\n/** @type {?} */\nMatStepHeader.prototype._focusMonitor;\n/** @type {?} */\nMatStepHeader.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Optional,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {\n  defaultErrorStateMatcher,\n  ErrorOptions,\n  ErrorStateMatcher,\n  MAT_ERROR_GLOBAL_OPTIONS,\n} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatStep = CdkStep;\nexport const /** @type {?} */ _MatStepper = CdkStepper;\nexport class MatStep extends _MatStep implements ErrorOptions {\n/**\n * Content for step label given by <ng-template matStepLabel>.\n */\nstepLabel: MatStepLabel;\n/**\n * Original ErrorStateMatcher that checks the validity of form control.\n */\nprivate _originalErrorStateMatcher: ErrorStateMatcher;\n/**\n * @param {?} stepper\n * @param {?} errorOptions\n */\nconstructor( stepper: MatStepper,\n                \n                  errorOptions: ErrorOptions) {\n    super(stepper);\n    if (errorOptions && errorOptions.errorStateMatcher) {\n      this._originalErrorStateMatcher = errorOptions.errorStateMatcher;\n    } else {\n      this._originalErrorStateMatcher = defaultErrorStateMatcher;\n    }\n  }\n/**\n * Custom error state matcher that additionally checks for validity of interacted form.\n */\nerrorStateMatcher = (control: FormControl, form: FormGroupDirective | NgForm) => {\n    let originalErrorState = this._originalErrorStateMatcher(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    let customErrorState =  control.invalid && this.interacted;\n\n    return originalErrorState || customErrorState;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: MAT_ERROR_GLOBAL_OPTIONS, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatStepper, decorators: [{ type: Inject, args: [forwardRef(() => MatStepper), ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'stepLabel': [{ type: ContentChild, args: [MatStepLabel, ] },],\n};\n}\n\nfunction MatStep_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStep.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStep.ctorParameters;\n/** @type {?} */\nMatStep.propDecorators;\n/**\n * Content for step label given by <ng-template matStepLabel>.\n * @type {?}\n */\nMatStep.prototype.stepLabel;\n/**\n * Original ErrorStateMatcher that checks the validity of form control.\n * @type {?}\n */\nMatStep.prototype._originalErrorStateMatcher;\n/**\n * Custom error state matcher that additionally checks for validity of interacted form.\n * @type {?}\n */\nMatStep.prototype.errorStateMatcher;\n}\n\nexport class MatStepper extends _MatStepper {\n/**\n * The list of step headers of the steps in the stepper.\n */\n_stepHeader: QueryList<ElementRef>;\n/**\n * Steps that the stepper holds.\n */\n_steps: QueryList<MatStep>;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matStepper]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_stepHeader': [{ type: ViewChildren, args: [MatStepHeader, {read: ElementRef}, ] },],\n'_steps': [{ type: ContentChildren, args: [MatStep, ] },],\n};\n}\n\nfunction MatStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepper.ctorParameters;\n/** @type {?} */\nMatStepper.propDecorators;\n/**\n * The list of step headers of the steps in the stepper.\n * @type {?}\n */\nMatStepper.prototype._stepHeader;\n/**\n * Steps that the stepper holds.\n * @type {?}\n */\nMatStepper.prototype._steps;\n}\n\nexport class MatHorizontalStepper extends MatStepper { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n      state('current', style({transform: 'none', visibility: 'visible'})),\n      state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n      transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ])\n  ],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatHorizontalStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHorizontalStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHorizontalStepper.ctorParameters;\n}\n\nexport class MatVerticalStepper extends MatStepper { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({height: '0px', visibility: 'hidden'})),\n      state('next', style({height: '0px', visibility: 'hidden'})),\n      state('current', style({height: '*', visibility: 'visible'})),\n      transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatVerticalStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMatVerticalStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatVerticalStepper.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatStepperNext = CdkStepperNext;\nexport const /** @type {?} */ _MatStepperPrevious = CdkStepperPrevious;\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nexport class MatStepperNext extends _MatStepperNext { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatStepperNext_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepperNext.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepperNext.ctorParameters;\n}\n\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nexport class MatStepperPrevious extends _MatStepperPrevious { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatStepperPrevious_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepperPrevious.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepperPrevious.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nexport class MatStepperModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatStepperModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepperModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepperModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatStepperModule,_MatStepLabel,MatStepLabel,_MatStep,_MatStepper,MatStep,MatStepper,MatHorizontalStepper,MatVerticalStepper,_MatStepperNext,_MatStepperPrevious,MatStepperNext,MatStepperPrevious,MatStepHeader} from './public_api';\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, InjectionToken, NgModule} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matCellDef],\n  [matColumnDef],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matHeaderCellDef],\n  [matHeaderRowDef],\n  [matLine],\n  [matRowDef],\n  [matStepLabel],\n  [matStepperNext],\n  [matStepperPrevious],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  [matInput],\n  [matPrefix],\n  [matSuffix],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-header-row,\n  mat-hint,\n  mat-horizontal-stepper,\n  mat-icon,\n  mat-input-container,\n  mat-form-field,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-step,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar,\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdCellDef],\n  [mdColumnDef],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdHeaderCellDef],\n  [mdHeaderRowDef],\n  [mdLine],\n  [mdRowDef],\n  [mdStepLabel],\n  [mdStepperNext],\n  [mdStepperPrevious],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  [mdInput],\n  [mdPrefix],\n  [mdSuffix],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-header-row,\n  md-hint,\n  md-horizontal-stepper,\n  md-icon,\n  md-input-container,\n  md-form-field,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-step,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar,\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nexport class MatCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * Reference to the global `document` object.\n */\nprivate _document = typeof document === 'object' && document ? document : null;\n/**\n * @param {?} sanityChecksEnabled\n */\nconstructor(  sanityChecksEnabled: boolean) {\n    if (sanityChecksEnabled && !this._hasDoneGlobalChecks && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const /** @type {?} */ computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MatCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMatCommonModule.prototype._hasDoneGlobalChecks;\n/**\n * Reference to the global `document` object.\n * @type {?}\n */\nMatCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ntoIso8601(date: D) {}\n/**\n * Creates a date from an RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339).\n * @abstract\n * @param {?} iso8601String The ISO date string to create a date from\n * @return {?} The date created from the ISO date string.\n */\nfromIso8601(iso8601String: string) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string): Date | null {\n    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n    // string is the right format first.\n    if (ISO_8601_REGEX.test(iso8601String)) {\n      let /** @type {?} */ d = new Date(iso8601String);\n      if (this.isValid(d)) {\n        return d;\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the pointer is currently being held on the trigger or not.\n */\nprivate _isPointerDown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('touchstart', this.onTouchstart.bind(this));\n\n      this._triggerEvents.set('mouseup', this.onPointerUp.bind(this));\n      this._triggerEvents.set('touchend', this.onPointerUp.bind(this));\n\n      this._triggerEvents.set('mouseleave', this.onPointerLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Function being called whenever the trigger is being pressed.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Function being called whenever the pointer is being released.\n * @return {?}\n */\nprivate onPointerUp() {\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Function being called whenever the pointer leaves the trigger.\n * @return {?}\n */\nprivate onPointerLeave() {\n    if (this._isPointerDown) {\n      this.onPointerUp();\n    }\n  }\n/**\n * Function being called whenever the trigger is being touched.\n * @param {?} event\n * @return {?}\n */\nprivate onTouchstart(event: TouchEvent) {\n    if (!this.rippleDisabled) {\n      const {pageX, pageY} = event.touches[0];\n      this._isPointerDown = true;\n      this.fadeInRipple(pageX, pageY, this.rippleConfig);\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the pointer is currently being held on the trigger or not.\n * @type {?}\n */\nRippleRenderer.prototype._isPointerDown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\nexport {MatDateFormats,MAT_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MatNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MAT_ERROR_GLOBAL_OPTIONS =\n    new InjectionToken<ErrorOptions>('mat-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nexport class MatLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMatLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MatLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MatLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MatLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMatLineSetter.prototype._lines;\n/** @type {?} */\nMatLineSetter.prototype._renderer;\n/** @type {?} */\nMatLineSetter.prototype._element;\n}\n\nexport class MatLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\nexport class MatRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if ((changes['trigger'] || changes['_matRippleTrigger']) && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['matRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['matRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['matRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MatRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRipple.ctorParameters;\n/** @type {?} */\nMatRipple.propDecorators;\n/** @type {?} */\nMatRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMatRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMatRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMatRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMatRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMatRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMatRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMatRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMatRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport {MatRipple, RippleGlobalOptions, MAT_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MatRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MatPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MatPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MatPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMatPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMatPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMatPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MatPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPseudoCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MatPseudoCheckboxState,MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MatOptgroupBase { }\nexport const /** @type {?} */ _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `mat-option`.\n */\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MatOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMatOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatOptgroup.ctorParameters;\n/** @type {?} */\nMatOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMatOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMatOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MatOption when selected or deselected.\n */\nexport class MatOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MatOption,\npublic isUserInput = false) { }\n}\n\nfunction MatOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMatOptionSelectionChange.prototype.source;\n/** @type {?} */\nMatOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\nexport class MatOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `mat-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MatOptgroup) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\n    return this.viewValue;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let /** @type {?} */ optionsArray = options.toArray();\n      let /** @type {?} */ groups = optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MatOptgroup, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MatOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMatOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatOption.ctorParameters;\n/** @type {?} */\nMatOption.propDecorators;\n/** @type {?} */\nMatOption.prototype._selected;\n/** @type {?} */\nMatOption.prototype._active;\n/** @type {?} */\nMatOption.prototype._multiple;\n/** @type {?} */\nMatOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMatOption.prototype._disabled;\n/** @type {?} */\nMatOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMatOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMatOption.prototype.onSelectionChange;\n/** @type {?} */\nMatOption.prototype._element;\n/** @type {?} */\nMatOption.prototype._changeDetectorRef;\n/** @type {?} */\nMatOption.prototype.group;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["host","[disabled]","MatAnchor","_super","platform","focusMonitor","elementRef","renderer","call","this","tslib_1.__extends","prototype","_haltDisabledEvents","event","disabled","preventDefault","MatButton","type","Component","args","selector","[attr.tabindex]","[attr.aria-disabled]","inputs","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","ctorParameters","Platform","FocusMonitor","ElementRef","Renderer2","MatButtonModule","decorators","NgModule","imports","CommonModule","MatRippleModule","MatCommonModule","MatMiniFab","SvgIconConfig","url","svgElement","MatIconRegistry","_http","_sanitizer","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","key","iconKey","_svgIconConfigs","set","addSvgIconSet","addSvgIconSetInNamespace","config","configNamespace","_iconSetConfigs","get","push","registerFontClassAlias","alias","className","_fontCssClassesByAlias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","_this","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","_cachedIconsByUrl","of","cloneSvg","RxChain","from","_loadSvgIconFromConfig","doOperator","svg","getNamedSvgIcon","name","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","_loadSvgIconSetFromConfig","iconSetConfig","catchOperator","err","console","log","result","map","forkJoin","Observable","foundIcon","i","length","_extractSvgIconFromSet","_fetchUrl","svgText","_svgElementFromString","iconSet","iconNode","querySelector","tagName","toLowerCase","_setSvgAttributes","cloneNode","_toSvgElement","str","div","document","createElement","element","getAttribute","setAttribute","inProgressFetch","_inProgressUrlFetches","response","text","finallyOperator","delete","share","Injectable","DomSanitizer","provide","deps","Optional","SkipSelf","Http","useFactory","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","MatIcon","parts","split","Error","ngOnChanges","changes","svgIcon","_usingFontIcon","_updateFontIconClasses","ngOnInit","_setSvgElement","_clearSvgElement","_renderer","appendChild","_elementRef","nativeElement","layoutElement","childCount","childNodes","removeChild","elem","fontSetClass","fontSet","_iconRegistry","_previousFontSetClass","removeClass","addClass","fontIcon","_previousFontIconClass","_MatIconMixinBase","role","class","undefined","Attribute","propDecorators","Input","MatIconModule","_MatStepLabel","CdkStepLabel","MatStepLabel","Directive","MatStepHeader","_focusMonitor","_element","monitor","value","_selected","coerceBooleanProperty","Object","defineProperty","enumerable","configurable","_optional","label","_templateLabel","icon","optional","_MatStep","CdkStep","_MatStepper","CdkStepper","MatStep","stepper","errorOptions","errorStateMatcher","control","form","originalErrorState","_originalErrorStateMatcher","customErrorState","invalid","interacted","defaultErrorStateMatcher","providers","MAT_ERROR_GLOBAL_OPTIONS","useExisting","MatStepper","Inject","forwardRef","apply","arguments","_stepHeader","ViewChildren","read","_steps","ContentChildren","MatHorizontalStepper","animations","trigger","state","style","transform","visibility","transition","animate","MatVerticalStepper","height","_MatStepperPrevious","CdkStepperPrevious","MatStepperNext","_MatStepperNext","(click)","MatStepperPrevious","__extends","d","b","__","constructor","extendStatics","create","class_1","_disabled","class_2","_color","parentDispatcher","UniqueSelectionDispatcher","sources","source","isSubmitted","submitted","touched","enforceStyleRecalculation","window","getComputedStyle","getPropertyValue","distX","Math","max","abs","x","rect","left","right","distY","y","top","bottom","sqrt","getMatIconNameNotFoundError","getMatIconNoHttpProviderError","parentRegistry","http","sanitizer","setPrototypeOf","__proto__","Array","p","hasOwnProperty","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","AnimationDurations","EXITING","_listeners","listener","_a","_i","id","listen","registered","MAT_DATE_LOCALE","InjectionToken","DateAdapter","_localeChanges","Subject","getMonthNames","getDayOfWeekNames","clone","date","today","addCalendarYears","years","isDateInstance","obj","isValid","locale","compareDate","first","second","clampDate","min","DEFAULT_DATE_NAMES","range","String","short","narrow","useUtcForDisplay","setLocale","matDateLocale","NativeDateAdapter","getMonth","getDate","getDay","SUPPORTS_INTL_API","dtf_1","Intl","DateTimeFormat","month","_stripDirectionalityCharacters","format","Date","DEFAULT_MONTH_NAMES","dtf_3","weekday","getYearName","dtf","year","getYear","_createDateWithOverflow","parse","UTC","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","displayFormat","extendObject","timeZone","addCalendarMonths","months","newDate","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","fromIso8601","iso8601String","ISO_8601_REGEX","test","setFullYear","n","slice","MAT_DATE_FORMATS","MAT_NATIVE_DATE_FORMATS","monthYearLabel","dateA11yLabel","day","monthYearA11yLabel","NativeDateModule","MAT_DATE_LOCALE_PROVIDER","MatNativeDateModule","GestureConfig","events","_hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","add","inheritances","forEach","item","recognizer","recognizeWith","MatLine","MatLineModule","declarations","RippleState","HIDDEN","FADING_IN","RippleRef","fadeOut","fadeOutRipple","RippleRenderer","_ngZone","_ruler","_isPointerDown","rippleConfig","rippleDisabled","_triggerEvents","onMousedown","bind","setTriggerElement","_containerElement","containerRect","getBoundingClientRect","centered","pageX","width","pageY","scrollPosition","getViewportScrollPosition","radius","distanceToFurthestCorner","ripple","runTimeoutOutsideZone","_activeRipples","rippleRef","rippleEl","transitionDuration","RIPPLE_FADE_OUT_DURATION","opacity","FADING_OUT","_triggerElement","fn","removeEventListener","runOutsideAngular","addEventListener","onPointerUp","persistent","VISIBLE","onPointerLeave","onTouchstart","touches","fadeInRipple","MatRipple","ngZone","ruler","globalOptions","_rippleRenderer","ngOnDestroy","speedFactor","_globalOptions","baseSpeedFactor","exportAs","[class.mat-ripple-unbounded]","NgZone","ViewportRuler","VIEWPORT_RULER_PROVIDER","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckboxModule","exports","MatOptgroup","_labelId","_uniqueOptgroupIdCounter","_MatOptgroupMixinBase","[class.mat-optgroup-disabled]","_uniqueIdCounter","isUserInput","MatOptionSelectionChange","MatOption","_changeDetectorRef","group","_active","_multiple","_disableRipple","_id","onSelectionChange","EventEmitter","markForCheck","select","deselect","_getHostElement","focus","_handleKeydown","_selectViaInteraction","_emitSelectionChangeEvent","emit","countGroupLabelsBeforeOption","optionIndex","options","optionGroups","optionsArray","groups","groupCounter","[id]","[attr.aria-selected]","[class.mat-option-disabled]","(keydown)","ChangeDetectorRef","Output","MatOptionModule","DEFAULT_ROUND_BUTTON_COLOR","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatFab","button","anchor","Self","_MatButtonMixinBase","mixinColor","mixinDisabled","base","class_3","MatButtonBase","_platform","_isIconButton","_hasAttributeWithPrefix","stopMonitoring","_isRippleDisabled","disableRipple","unprefixedAttributeNames","isBrowser"],"mappings":"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"}